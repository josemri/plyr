package com.plyr.viewmodel

import android.app.Application
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.media3.common.MediaItem
import androidx.media3.common.Player
import androidx.media3.exoplayer.ExoPlayer
import com.plyr.network.YouTubeAudioExtractor
import com.plyr.utils.isValidAudioUrl
import com.plyr.utils.Config
import com.plyr.service.YouTubeSearchManager
import com.plyr.database.TrackEntity
import android.os.Handler
import android.os.Looper
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import kotlinx.coroutines.CompletableDeferred

/**
 * PlayerViewModel - Maneja la reproducci√≥n de audio usando ExoPlayer y NewPipe
 * 
 * Esta clase es responsable de:
 * - Gestionar el ciclo de vida del ExoPlayer
 * - Extraer URLs de audio de YouTube usando NewPipe Extractor
 * - Proporcionar una interfaz para reproducir audio desde videos o tracks de Spotify
 * - Manejar estados de reproducci√≥n (loading, error, etc.)
 * - Proporcionar funcionalidades como play, pause, seek y control de tiempo
 * 
 * @param application Contexto de la aplicaci√≥n para acceder a recursos del sistema
 */
class PlayerViewModel(application: Application) : AndroidViewModel(application) {
    
    // === PROPIEDADES PRIVADAS ===
    
    /** Instancia del ExoPlayer para reproducci√≥n de audio */
    private var _exoPlayer: ExoPlayer? = null
    
    /** LiveData privado para la URL de audio actual */
    private val _audioUrl = MutableLiveData<String?>()
    
    /** LiveData privado para el t√≠tulo de la canci√≥n actual */
    private val _currentTitle = MutableLiveData<String?>()
    
    /** LiveData privado para el estado de carga */
    private val _isLoading = MutableLiveData<Boolean>()
    
    /** LiveData privado para mensajes de error */
    private val _error = MutableLiveData<String?>()
    
    /** Handler para ejecutar c√≥digo en el hilo principal */
    private val mainHandler = Handler(Looper.getMainLooper())
    
    /** Manejador de b√∫squedas de YouTube usando NewPipe */
    private val youtubeSearchManager = YouTubeSearchManager(application)
    
    /** Callback para notificar cuando una canci√≥n termina de reproducirse */
    private var playbackEndedCallback: CompletableDeferred<Boolean>? = null
    
    // === PROPIEDADES P√öBLICAS (READONLY) ===
    
    /** Acceso p√∫blico de solo lectura al ExoPlayer */
    val exoPlayer: ExoPlayer? get() = _exoPlayer
    
    /** LiveData observable para la URL de audio actual */
    val audioUrl: LiveData<String?> = _audioUrl
    
    /** LiveData observable para el t√≠tulo de la canci√≥n actual */
    val currentTitle: LiveData<String?> = _currentTitle
    
    /** LiveData observable para el estado de carga */
    val isLoading: LiveData<Boolean> = _isLoading
    
    /** LiveData observable para mensajes de error */
    val error: LiveData<String?> = _error
    
    // === M√âTODOS P√öBLICOS ===
    
    /**
     * Inicializa el ExoPlayer si no ha sido creado a√∫n.
     * Configura los listeners necesarios para el manejo de estados de reproducci√≥n.
     */
    fun initializePlayer() {
        if (_exoPlayer == null) {
            _exoPlayer = ExoPlayer.Builder(getApplication()).build().apply {
                // Configurar listener para eventos de reproducci√≥n
                addListener(createPlayerListener())
            }
        }
    }
    
    /**
     * Crea el listener para el ExoPlayer que maneja cambios de estado.
     * @return Player.Listener configurado con los callbacks necesarios
     */
    private fun createPlayerListener(): Player.Listener {
        return object : Player.Listener {
            override fun onPlaybackStateChanged(playbackState: Int) {
                when (playbackState) {
                    Player.STATE_ENDED -> {
                        println("PlayerViewModel: üéµ Canci√≥n terminada - Player.STATE_ENDED")
                        playbackEndedCallback?.complete(true)
                        playbackEndedCallback = null
                    }
                    Player.STATE_IDLE -> {
                        println("PlayerViewModel: ExoPlayer en estado IDLE")
                    }
                    Player.STATE_BUFFERING -> {
                        println("PlayerViewModel: ExoPlayer bufferizando...")
                    }
                    Player.STATE_READY -> {
                        println("PlayerViewModel: ExoPlayer listo para reproducir")
                    }
                }
            }
            
            override fun onIsPlayingChanged(isPlaying: Boolean) {
                println("PlayerViewModel: Estado de reproducci√≥n cambi√≥: $isPlaying")
            }
        }
    }
    
    /**
     * Carga y reproduce audio desde un video ID de YouTube.
     * 
     * @param videoId ID del video de YouTube (ej: "dQw4w9WgXcQ")
     * @param title T√≠tulo opcional para mostrar en la UI
     */
    fun loadAudio(videoId: String, title: String? = null) {
        println("PlayerViewModel: Cargando audio para video ID: $videoId con t√≠tulo: $title")
        updateLoadingState(true, null, title)
        
        // Usar NewPipe Extractor para obtener la URL de audio
        CoroutineScope(Dispatchers.Main).launch {
            try {
                val audioUrl = extractAudioUrl(videoId)
                
                if (audioUrl != null && isValidAudioUrl(audioUrl)) {
                    println("PlayerViewModel: ‚úÖ URL obtenida con NewPipe: $audioUrl")
                    playAudioFromUrl(audioUrl)
                } else {
                    handleAudioExtractionError(videoId, audioUrl)
                }
            } catch (e: Exception) {
                handleException("Error al extraer audio", e)
            }
        }
    }
    
    /**
     * Extrae la URL de audio de un video de YouTube usando NewPipe.
     * @param videoId ID del video de YouTube
     * @return URL de audio o null si falla
     */
    private suspend fun extractAudioUrl(videoId: String): String? {
        return withContext(Dispatchers.IO) {
            YouTubeAudioExtractor.getAudioUrl(videoId)
        }
    }
    
    /**
     * Reproduce audio desde una URL espec√≠fica.
     * @param audioUrl URL del archivo de audio
     */
    private fun playAudioFromUrl(audioUrl: String) {
        _audioUrl.postValue(audioUrl)
        
        _exoPlayer?.apply {
            try {
                println("PlayerViewModel: Creando MediaItem con URL: $audioUrl")
                setMediaItem(MediaItem.fromUri(audioUrl))
                prepare()
                play()
                println("PlayerViewModel: ExoPlayer configurado y reproduciendo")
                _isLoading.postValue(false)
            } catch (e: Exception) {
                handleException("Error al configurar ExoPlayer", e)
            }
        }
    }
    
    /**
     * Maneja errores en la extracci√≥n de audio.
     */
    private fun handleAudioExtractionError(videoId: String, audioUrl: String?) {
        if (audioUrl == null) {
            println("PlayerViewModel: ‚ùå No se pudo obtener URL de audio")
            updateLoadingState(false, "No se pudo extraer la URL de audio para el video ID: $videoId")
        } else {
            println("PlayerViewModel: URL no v√°lida seg√∫n isValidAudioUrl")
            updateLoadingState(false, "La URL obtenida no es v√°lida para reproducci√≥n de audio")
        }
    }
    
    
    /**
     * Carga y reproduce audio desde un TrackEntity de forma transparente.
     * Obtiene el YouTube ID autom√°ticamente si no existe.
     * 
     * @param track Entidad del track con informaci√≥n de Spotify
     * @return true si la carga fue exitosa, false si fall√≥
     */
    suspend fun loadAudioFromTrack(track: TrackEntity): Boolean = withContext(Dispatchers.Main) {
        try {
            println("PlayerViewModel: Cargando audio para track: ${track.name} - ${track.artists}")
            updateLoadingState(true, null, "${track.name} - ${track.artists}")
            
            // Obtener YouTube ID de forma transparente
            val youtubeId = obtainYouTubeId(track)
            
            if (youtubeId != null) {
                println("PlayerViewModel: ‚úÖ YouTube ID obtenido: $youtubeId")
                return@withContext playTrackAudio(youtubeId, track)
            } else {
                println("PlayerViewModel: ‚ùå No se encontr√≥ YouTube ID para: ${track.name}")
                updateLoadingState(false, "No se encontr√≥ el video para: ${track.name}")
                return@withContext false
            }
        } catch (e: Exception) {
            handleException("Error al cargar audio desde track", e)
            return@withContext false
        }
    }
    
    /**
     * Obtiene el YouTube ID para un track.
     * @param track Track del cual obtener el ID
     * @return YouTube ID o null si no se encuentra
     */
    private suspend fun obtainYouTubeId(track: TrackEntity): String? {
        return withContext(Dispatchers.IO) {
            youtubeSearchManager.getYouTubeIdTransparently(track)
        }
    }
    
    /**
     * Reproduce audio de un track usando su YouTube ID.
     * @param youtubeId ID de YouTube del track
     * @param track Informaci√≥n del track para logs
     * @return true si la reproducci√≥n fue exitosa
     */
    private suspend fun playTrackAudio(youtubeId: String, track: TrackEntity): Boolean {
        // Obtener URL de audio con el ID
        val audioUrl = withContext(Dispatchers.IO) {
            YouTubeAudioExtractor.getAudioUrl(youtubeId)
        }
        
        if (audioUrl != null && isValidAudioUrl(audioUrl)) {
            println("PlayerViewModel: ‚úÖ URL de audio obtenida: $audioUrl")
            return configureAndPlayAudio(audioUrl, track)
        } else {
            println("PlayerViewModel: ‚ùå No se pudo obtener URL de audio v√°lida")
            updateLoadingState(false, "No se pudo obtener el audio para: ${track.name}")
            return false
        }
    }
    
    /**
     * Configura ExoPlayer y inicia la reproducci√≥n.
     * @param audioUrl URL del audio a reproducir
     * @param track Informaci√≥n del track para logs
     * @return true si la configuraci√≥n fue exitosa
     */
    private suspend fun configureAndPlayAudio(audioUrl: String, track: TrackEntity): Boolean {
        _audioUrl.postValue(audioUrl)
        
        return withContext(Dispatchers.Main) {
            _exoPlayer?.apply {
                try {
                    setMediaItem(MediaItem.fromUri(audioUrl))
                    prepare()
                    play()
                    println("PlayerViewModel: ‚úÖ Reproducci√≥n iniciada para: ${track.name}")
                    _isLoading.postValue(false)
                    return@withContext true
                } catch (e: Exception) {
                    handleException("Error configurando ExoPlayer", e)
                    return@withContext false
                }
            }
            
            _isLoading.postValue(false)
            return@withContext false
        }
    }
    
    // === M√âTODOS DE CONTROL DE REPRODUCCI√ìN ===
    
    /**
     * Pausa la reproducci√≥n actual.
     */
    fun pausePlayer() {
        mainHandler.post {
            _exoPlayer?.pause()
        }
    }
    
    /**
     * Reanuda la reproducci√≥n.
     */
    fun playPlayer() {
        mainHandler.post {
            _exoPlayer?.play()
        }
    }
    
    /**
     * Busca a una posici√≥n espec√≠fica en la canci√≥n.
     * @param positionMs Posici√≥n en milisegundos
     */
    fun seekTo(positionMs: Long) {
        mainHandler.post {
            _exoPlayer?.seekTo(positionMs)
        }
    }
    
    /**
     * Obtiene la posici√≥n actual de reproducci√≥n.
     * @return Posici√≥n actual en milisegundos
     */
    fun getCurrentPosition(): Long {
        return try {
            _exoPlayer?.currentPosition ?: 0L
        } catch (e: Exception) {
            println("PlayerViewModel: Error obteniendo posici√≥n: ${e.message}")
            0L
        }
    }
    
    /**
     * Obtiene la duraci√≥n total de la canci√≥n actual.
     * @return Duraci√≥n en milisegundos
     */
    fun getDuration(): Long {
        return try {
            _exoPlayer?.duration?.takeIf { it > 0 } ?: 0L
        } catch (e: Exception) {
            println("PlayerViewModel: Error obteniendo duraci√≥n: ${e.message}")
            0L
        }
    }
    
    /**
     * Verifica si el reproductor est√° reproduciendo actualmente.
     * @return true si est√° reproduciendo, false en caso contrario
     */
    fun isPlaying(): Boolean {
        return try {
            _exoPlayer?.isPlaying ?: false
        } catch (e: Exception) {
            println("PlayerViewModel: Error verificando estado de reproducci√≥n: ${e.message}")
            false
        }
    }
    
    
    // === M√âTODOS DE ESPERA Y SINCRONIZACI√ìN ===
    
    /**
     * Espera a que termine la canci√≥n actual usando el listener de ExoPlayer.
     * √ötil para reproducci√≥n secuencial de playlists.
     * 
     * @return true si termin√≥ naturalmente, false si se cancel√≥ o fall√≥
     */
    suspend fun waitForCurrentSongToFinish(): Boolean {
        return try {
            println("PlayerViewModel: ‚è≥ Esperando a que termine la canci√≥n actual...")
            
            // Verificar que hay una canci√≥n reproduci√©ndose
            val hasPlayback = checkCurrentPlayback()
            if (!hasPlayback) {
                println("PlayerViewModel: ‚ö†Ô∏è No hay canci√≥n reproduci√©ndose")
                return false
            }
            
            // Configurar callback para esperar el final
            playbackEndedCallback = CompletableDeferred()
            
            // Esperar el resultado con timeout
            waitForPlaybackCompletion()
            
        } catch (e: Exception) {
            handleWaitException(e)
        }
    }
    
    /**
     * Verifica si hay una canci√≥n reproduci√©ndose actualmente.
     * @return true si hay reproducci√≥n activa
     */
    private suspend fun checkCurrentPlayback(): Boolean {
        return withContext(Dispatchers.Main) {
            _exoPlayer != null && isPlaying()
        }
    }
    
    /**
     * Espera a que la reproducci√≥n termine con un timeout de seguridad.
     * @return true si termin√≥ correctamente
     */
    private suspend fun waitForPlaybackCompletion(): Boolean {
        return withContext(Dispatchers.IO) {
            // Timeout de 8 minutos (480 segundos) por seguridad
            val timeout = 480000L
            val startTime = System.currentTimeMillis()
            
            // Esperar hasta que termine o se agote el tiempo
            while (playbackEndedCallback != null && !playbackEndedCallback!!.isCompleted) {
                if (System.currentTimeMillis() - startTime > timeout) {
                    println("PlayerViewModel: ‚ö†Ô∏è Timeout esperando fin de canci√≥n")
                    playbackEndedCallback?.complete(false)
                    break
                }
                kotlinx.coroutines.delay(1000)
            }
            
            val result = playbackEndedCallback?.await() ?: false
            playbackEndedCallback = null
            
            println("PlayerViewModel: ${if (result) "‚úÖ" else "‚ö†Ô∏è"} Canci√≥n ${if (result) "terminada" else "cancelada"}")
            result
        }
    }
    
    /**
     * Maneja excepciones durante la espera de finalizaci√≥n.
     * @param e Excepci√≥n ocurrida
     * @return false indicando fallo
     */
    private fun handleWaitException(e: Exception): Boolean {
        println("PlayerViewModel: ‚ùå Error esperando fin de canci√≥n: ${e.message}")
        playbackEndedCallback?.complete(false)
        playbackEndedCallback = null
        return false
    }
    
    /**
     * Cancela la espera del final de la canci√≥n.
     * √ötil cuando se quiere detener la reproducci√≥n secuencial.
     */
    fun cancelWaitForSong() {
        playbackEndedCallback?.complete(false)
        playbackEndedCallback = null
    }
    
    // === M√âTODOS UTILITARIOS PRIVADOS ===
    
    /**
     * Actualiza el estado de carga y error de forma consistente.
     * @param loading Estado de carga
     * @param errorMessage Mensaje de error (null si no hay error)
     * @param title T√≠tulo a mostrar (opcional)
     */
    private fun updateLoadingState(loading: Boolean, errorMessage: String? = null, title: String? = null) {
        _isLoading.postValue(loading)
        _error.postValue(errorMessage)
        title?.let { _currentTitle.postValue(it) }
    }
    
    /**
     * Maneja excepciones de forma consistente.
     * @param message Mensaje descriptivo del error
     * @param exception Excepci√≥n ocurrida
     */
    private fun handleException(message: String, exception: Exception) {
        println("PlayerViewModel: ‚ùå $message: ${exception.message}")
        updateLoadingState(false, "$message: ${exception.message}")
    }
    
    // === LIMPIEZA DE RECURSOS ===
    
    /**
     * Limpia los recursos cuando el ViewModel es destruido.
     * Cancela callbacks pendientes y libera el ExoPlayer.
     */
    override fun onCleared() {
        super.onCleared()
        
        // Cancelar cualquier callback pendiente
        playbackEndedCallback?.complete(false)
        playbackEndedCallback = null
        
        // Liberar ExoPlayer en el hilo principal
        mainHandler.post {
            _exoPlayer?.release()
            _exoPlayer = null
        }
    }
}
