<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt" />
              <option name="updatedContent" value="package com.plyr.examples&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de integración del sistema de notificaciones de música&#10; * &#10; * Este archivo muestra cómo implementar las notificaciones en tu MainActivity.&#10; * Copia este código a tu MainActivity existente.&#10; */&#10;class NotificationIntegrationExample {&#10;    &#10;    // En tu MainActivity, agrega estas propiedades:&#10;    private lateinit var notificationManager: MusicNotificationManager&#10;    private lateinit var playerViewModel: PlayerViewModel&#10;    &#10;    // Launcher para pedir permisos de notificación (Android 13+)&#10;    private val notificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Permiso concedido, continuar con la inicialización&#10;            initializeNotificationSystem()&#10;        } else {&#10;            // Permiso denegado, manejar el caso apropiadamente&#10;            // Puedes mostrar un mensaje al usuario explicando por qué necesitas el permiso&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Llama este método en onCreate() de tu MainActivity&#10;     */&#10;    fun setupNotificationSystem(activity: ComponentActivity, viewModel: PlayerViewModel) {&#10;        playerViewModel = viewModel&#10;        &#10;        // Verificar y pedir permisos de notificación para Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            when {&#10;                ContextCompat.checkSelfPermission(&#10;                    activity,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10;                    // Permiso ya concedido&#10;                    initializeNotificationSystem()&#10;                }&#10;                else -&gt; {&#10;                    // Pedir permiso&#10;                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                }&#10;            }&#10;        } else {&#10;            // Android 12 y menores no necesitan permiso explícito&#10;            initializeNotificationSystem()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicializa el sistema de notificaciones&#10;     */&#10;    private fun initializeNotificationSystem() {&#10;        notificationManager = MusicNotificationManager(this)&#10;        notificationManager.startService()&#10;        &#10;        // Configurar listeners para actualizar notificación cuando cambie el track&#10;        setupNotificationListeners()&#10;    }&#10;    &#10;    /**&#10;     * Configura los listeners para sincronizar el PlayerViewModel con las notificaciones&#10;     */&#10;    private fun setupNotificationListeners() {&#10;        // Observar cambios en el track actual&#10;        playerViewModel.currentTrack.observe(this) { track -&gt;&#10;            track?.let {&#10;                notificationManager.updateSongInfo(it.name, it.artists)&#10;            }&#10;        }&#10;        &#10;        // Observar cambios en el título actual&#10;        playerViewModel.currentTitle.observe(this) { title -&gt;&#10;            title?.let {&#10;                // Si tienes información del artista disponible&#10;                val artist = &quot;Artista Desconocido&quot; // Reemplaza con la fuente real del artista&#10;                notificationManager.updateSongInfo(it, artist)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo de cómo reproducir una canción con notificación&#10;     */&#10;    fun playTrackWithNotification(audioUrl: String, title: String, artist: String) {&#10;        lifecycleScope.launch {&#10;            // Actualizar información en la notificación&#10;            notificationManager.updateSongInfo(title, artist)&#10;            &#10;            // Reproducir el audio en el servicio de notificación&#10;            notificationManager.playAudio(audioUrl, title, artist)&#10;            &#10;            // También reproducir en tu PlayerViewModel existente&#10;            // playerViewModel.playAudio(audioUrl) // Tu método existente&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Limpieza en onDestroy()&#10;     */&#10;    fun cleanupNotificationSystem() {&#10;        if (::notificationManager.isInitialized) {&#10;            notificationManager.stopService()&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * INTEGRACIÓN COMPLETA EN TU MAINACTIVITY:&#10; * &#10; * class MainActivity : ComponentActivity() {&#10; *     private lateinit var notificationManager: MusicNotificationManager&#10; *     private lateinit var playerViewModel: PlayerViewModel&#10; *     &#10; *     // Launcher para permisos de notificación&#10; *     private val notificationPermissionLauncher = registerForActivityResult(&#10; *         ActivityResultContracts.RequestPermission()&#10; *     ) { isGranted -&gt;&#10; *         if (isGranted) {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onCreate(savedInstanceState: Bundle?) {&#10; *         super.onCreate(savedInstanceState)&#10; *         &#10; *         // Tu código existente...&#10; *         playerViewModel = ViewModelProvider(this)[PlayerViewModel::class.java]&#10; *         &#10; *         // Configurar notificaciones&#10; *         setupNotificationSystem()&#10; *         &#10; *         // Tu código de Compose...&#10; *     }&#10; *     &#10; *     private fun setupNotificationSystem() {&#10; *         if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10; *             when {&#10; *                 ContextCompat.checkSelfPermission(&#10; *                     this, Manifest.permission.POST_NOTIFICATIONS&#10; *                 ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10; *                     initializeNotificationSystem()&#10; *                 }&#10; *                 else -&gt; {&#10; *                     notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10; *                 }&#10; *             }&#10; *         } else {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     private fun initializeNotificationSystem() {&#10; *         notificationManager = MusicNotificationManager(this)&#10; *         notificationManager.startService()&#10; *         &#10; *         // Observar cambios en el track actual&#10; *         playerViewModel.currentTrack.observe(this) { track -&gt;&#10; *             track?.let {&#10; *                 notificationManager.updateSongInfo(it.name, it.artists)&#10; *             }&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onDestroy() {&#10; *         super.onDestroy()&#10; *         if (::notificationManager.isInitialized) {&#10; *             notificationManager.stopService()&#10; *         }&#10; *     }&#10; * }&#10; */" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.IBinder&#10;import android.util.Log&#10;import com.plyr.database.TrackEntity&#10;&#10;/**&#10; * MusicNotificationManager - Clase helper para gestionar la notificación de música&#10; * &#10; * Esta clase actúa como puente entre tu PlayerViewModel y el MusicService,&#10; * facilitando el control de la notificación sin tener que manejar directamente&#10; * el service binding en el ViewModel.&#10; */&#10;class MusicNotificationManager(private val context: Context) {&#10;    &#10;    private var musicService: MusicService? = null&#10;    private var isBound = false&#10;    &#10;    companion object {&#10;        private const val TAG = &quot;MusicNotificationManager&quot;&#10;    }&#10;    &#10;    /**&#10;     * Conexión con el servicio de música&#10;     */&#10;    private val serviceConnection = object : ServiceConnection {&#10;        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {&#10;            Log.d(TAG, &quot;Service connected&quot;)&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            isBound = true&#10;        }&#10;        &#10;        override fun onServiceDisconnected(name: ComponentName?) {&#10;            Log.d(TAG, &quot;Service disconnected&quot;)&#10;            musicService = null&#10;            isBound = false&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicia el servicio y se conecta a él&#10;     */&#10;    fun startService() {&#10;        Log.d(TAG, &quot;Starting MusicService&quot;)&#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.startService(serviceIntent)&#10;        context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;    }&#10;    &#10;    /**&#10;     * Para el servicio y se desconecta&#10;     */&#10;    fun stopService() {&#10;        Log.d(TAG, &quot;Stopping MusicService&quot;)&#10;        if (isBound) {&#10;            context.unbindService(serviceConnection)&#10;            isBound = false&#10;        }&#10;        &#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.stopService(serviceIntent)&#10;        musicService = null&#10;    }&#10;    &#10;    /**&#10;     * Inicia la reproducción de audio con notificación&#10;     */&#10;    fun playAudio(audioUrl: String, title: String, artist: String) {&#10;        Log.d(TAG, &quot;Playing audio: $title by $artist&quot;)&#10;        &#10;        if (!isBound) {&#10;            // Si no está conectado, iniciar el servicio con los datos&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;AUDIO_URL&quot;, audioUrl)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;            context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;        } else {&#10;            // Si ya está conectado, usar el servicio directamente&#10;            musicService?.updateSongInfo(title, artist)&#10;            musicService?.playAudio(audioUrl)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza la información de la canción en la notificación&#10;     */&#10;    fun updateSongInfo(title: String, artist: String) {&#10;        Log.d(TAG, &quot;Updating song info: $title by $artist&quot;)&#10;        &#10;        if (isBound &amp;&amp; musicService != null) {&#10;            musicService?.updateSongInfo(title, artist)&#10;        } else {&#10;            // Si no está conectado, enviar intent de actualización&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;UPDATE_INFO&quot;, true)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza usando un TrackEntity&#10;     */&#10;    fun updateSongInfo(track: TrackEntity) {&#10;        updateSongInfo(track.name, track.artists)&#10;    }&#10;    &#10;    /**&#10;     * Pausa/reanuda la reproducción desde la notificación&#10;     */&#10;    fun togglePlayPause() {&#10;        musicService?.togglePlayPause()&#10;    }&#10;    &#10;    /**&#10;     * Para completamente la reproducción&#10;     */&#10;    fun stopPlayback() {&#10;        musicService?.stopPlayback()&#10;    }&#10;    &#10;    /**&#10;     * Verifica si está reproduciendo&#10;     */&#10;    fun isPlaying(): Boolean {&#10;        return musicService?.isPlaying() ?: false&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el servicio está conectado&#10;     */&#10;    fun isServiceConnected(): Boolean {&#10;        return isBound &amp;&amp; musicService != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/AudioListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/AudioListScreen.kt" />
              <option name="originalContent" value="package com.plyr.ui&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyAuthEvent&#10;import com.plyr.database.PlaylistLocalRepository&#10;import com.plyr.database.PlaylistEntity&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.database.toSpotifyPlaylist&#10;import com.plyr.database.toSpotifyTrack&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.lifecycle.asFlow&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.runtime.Stable&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.layout.onSizeChanged&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.draw.clipToBounds&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.CoroutineScope&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.plyr.network.SpotifyAlbum&#10;import com.plyr.network.SpotifySearchAllResponse&#10;import kotlinx.coroutines.GlobalScope&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.Job&#10;import com.plyr.service.YouTubeSearchManager&#10;import kotlinx.coroutines.Dispatchers&#10;import coil.compose.AsyncImage&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.ui.Alignment&#10;import com.plyr.network.SpotifyAlbumsSearchResult&#10;import com.plyr.network.SpotifyArtistsSearchResult&#10;import com.plyr.network.SpotifyPlaylistsSearchResult&#10;import com.plyr.network.SpotifyTracksSearchResult&#10;&#10;&#10;// Estados para navegación&#10;enum class Screen {&#10;    HOME,&#10;    SEARCH,&#10;    QUEUE,&#10;    CONFIG,&#10;    PLAYLISTS&#10;}&#10;&#10;@Stable&#10;data class MenuOption(val screen: Screen, val title: String)&#10;&#10;@Composable&#10;fun AudioListScreen(&#10;    context: Context,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onThemeChanged: (String) -&gt; Unit = {},&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    var currentScreen by remember { mutableStateOf(Screen.HOME) }&#10;    &#10;    // Handle back button - always go to HOME, never exit app&#10;    BackHandler(enabled = currentScreen != Screen.HOME) {&#10;        currentScreen = Screen.HOME&#10;    }&#10;    &#10;    when (currentScreen) {&#10;        Screen.HOME -&gt; HomeScreen(&#10;            context = context,&#10;            onNavigateToScreen = { screen -&gt; currentScreen = screen }&#10;        )&#10;        Screen.SEARCH -&gt; SearchScreen(&#10;            context = context,&#10;            onVideoSelected = onVideoSelected,&#10;            onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;            onBack = { currentScreen = Screen.HOME },&#10;            playerViewModel = playerViewModel&#10;        )&#10;        Screen.QUEUE -&gt; QueueScreen(&#10;            context = context,&#10;            onBack = { currentScreen = Screen.HOME },&#10;            playerViewModel = playerViewModel&#10;        )&#10;        Screen.CONFIG -&gt; ConfigScreen(&#10;            context = context,&#10;            onBack = { currentScreen = Screen.HOME },&#10;            onThemeChanged = onThemeChanged&#10;        )&#10;        Screen.PLAYLISTS -&gt; PlaylistsScreen(&#10;            context = context,&#10;            onBack = { currentScreen = Screen.HOME },&#10;            playerViewModel = playerViewModel&#10;        )&#10;    }&#10;}&#10;&#10;&#10;// Place this at the top level, outside of any other composable&#10;@Composable&#10;fun CreateSpotifyPlaylistScreen(&#10;    onBack: () -&gt; Unit,&#10;    onPlaylistCreated: () -&gt; Unit&#10;) {&#10;    var playlistName by remember { mutableStateOf(&quot;&quot;) }&#10;    var playlistDesc by remember { mutableStateOf(&quot;&quot;) }&#10;    var isPublic by remember { mutableStateOf(true) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val context = LocalContext.current&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;$ create_playlist&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 20.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        OutlinedTextField(&#10;            value = playlistName,&#10;            onValueChange = { playlistName = it },&#10;            label = { Text(&quot;Playlist name&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = playlistDesc,&#10;            onValueChange = { playlistDesc = it },&#10;            label = { Text(&quot;Description (optional)&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            // Opción Public&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { isPublic = true }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;public&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (isPublic) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            // Opción Private&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { isPublic = false }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;private&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (!isPublic) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        Spacer(Modifier.height(16.dp))&#10;        Text(&#10;            text = if (isLoading) &quot;&lt;creating...&gt;&quot; else &quot;&lt;create&gt;&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 14.sp,&#10;                color = if (isLoading) Color(0xFFFFD93D) else Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable(enabled = !isLoading &amp;&amp; playlistName.isNotBlank()) {&#10;                    // Acción de crear playlist&#10;                    isLoading = true&#10;                    error = null&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        SpotifyRepository.createPlaylist(&#10;                            accessToken,&#10;                            playlistName,&#10;                            playlistDesc,&#10;                            isPublic&#10;                        ) { success, errMsg -&gt;&#10;                            isLoading = false&#10;                            if (success) onPlaylistCreated() else error = errMsg ?: &quot;Unknown error&quot;&#10;                        }&#10;                    } else {&#10;                        isLoading = false&#10;                        error = &quot;Spotify not connected&quot;&#10;                    }&#10;                }&#10;                .padding(8.dp)&#10;        )&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&quot;Error: $it&quot;, color = Color.Red)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    context: Context,&#10;    onNavigateToScreen: (Screen) -&gt; Unit&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var backPressedTime by remember { mutableStateOf(0L) }&#10;    var showExitMessage by remember { mutableStateOf(false) }&#10;    &#10;    // Handle double back press to exit&#10;    BackHandler {&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - backPressedTime &gt; 2000) {&#10;            backPressedTime = currentTime&#10;            showExitMessage = true&#10;            // Hide message after 2 seconds&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(2000)&#10;                showExitMessage = false&#10;            }&#10;        } else {&#10;            // Exit app&#10;            (context as? Activity)?.finish()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Terminal-style header&#10;        Text(&#10;            text = &quot;$ plyr_home&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Lista de opciones disponibles&#10;        val options = remember {&#10;            listOf(&#10;                MenuOption(Screen.SEARCH, &quot;&gt; search&quot;),&#10;                MenuOption(Screen.PLAYLISTS, &quot;&gt; playlists&quot;),&#10;                MenuOption(Screen.QUEUE, &quot;&gt; queue&quot;),&#10;                MenuOption(Screen.CONFIG, &quot;&gt; settings&quot;)&#10;            )&#10;        }&#10;        &#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                Text(&#10;                    text = option.title,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 20.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable {&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                            onNavigateToScreen(option.screen)&#10;                        }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Exit message&#10;        if (showExitMessage) {&#10;            Text(&#10;                text = &quot;&gt; Press back again to exit&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(top = 8.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SearchScreen(&#10;    context: Context,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var results by remember { mutableStateOf&lt;List&lt;AudioItem&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    &#10;    // Estados para resultados de Spotify&#10;    var spotifyResults by remember { mutableStateOf&lt;SpotifySearchAllResponse?&gt;(null) }&#10;    var showSpotifyResults by remember { mutableStateOf(false) }&#10;    &#10;    // Estados para paginación&#10;    var currentOffset by remember { mutableStateOf(0) }&#10;    var isLoadingMore by remember { mutableStateOf(false) }&#10;    var hasMoreResults by remember { mutableStateOf(true) }&#10;    val itemsPerPage = 10&#10;&#10;    // Estados para vista detallada de playlist/álbum&#10;    var selectedSpotifyPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedSpotifyAlbum by remember { mutableStateOf&lt;SpotifyAlbum?&gt;(null) }&#10;    var selectedItemTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    &#10;    // YouTube search manager para búsquedas locales&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Search function with pagination support&#10;    val performSearch: (String, Boolean) -&gt; Unit = { searchQuery, isLoadMore -&gt;&#10;        if (searchQuery.isNotBlank() &amp;&amp; (!isLoading || isLoadMore)) {&#10;            if (isLoadMore) {&#10;                isLoadingMore = true&#10;            } else {&#10;                isLoading = true&#10;                currentOffset = 0&#10;                results = emptyList()&#10;                spotifyResults = null&#10;                showSpotifyResults = false&#10;                hasMoreResults = true&#10;            }&#10;            error = null&#10;&#10;            coroutineScope.launch {&#10;                try {&#10;                    val searchEngine = Config.getSearchEngine(context)&#10;                    &#10;                    // Permitir override temporal con prefijos&#10;                    val (finalSearchEngine, finalQuery) = when {&#10;                        searchQuery.startsWith(&quot;yt:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;youtube&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        searchQuery.startsWith(&quot;sp:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;spotify&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        else -&gt; searchEngine to searchQuery&#10;                    }&#10;                    &#10;                    if (finalQuery.isEmpty()) {&#10;                        isLoading = false&#10;                        isLoadingMore = false&#10;                        error = &quot;Query vacía después de procesar prefijo&quot;&#10;                        return@launch&#10;                    }&#10;                    &#10;                    when (finalSearchEngine) {&#10;                        &quot;youtube&quot; -&gt; {&#10;                            // Search YouTube with detailed information&#10;                            val youtubeResults = youtubeSearchManager.searchYouTubeVideosDetailed(finalQuery)&#10;                            // Convert YouTube video info to AudioItem objects&#10;                            val newResults = youtubeResults.map { videoInfo -&gt;&#10;                                AudioItem(&#10;                                    title = videoInfo.title,&#10;                                    url = &quot;&quot;, // Use empty string for url, required by AudioItem&#10;                                    videoId = videoInfo.videoId,&#10;                                    channel = videoInfo.uploader,&#10;                                    duration = videoInfo.getFormattedDuration()&#10;                                )&#10;                            }&#10;&#10;                            if (isLoadMore) {&#10;                                results = results + newResults&#10;                            } else {&#10;                                results = newResults&#10;                            }&#10;&#10;                            hasMoreResults = newResults.size &gt;= itemsPerPage&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                        }&#10;                        &#10;                        &quot;spotify&quot; -&gt; {&#10;                            // Search Spotify with pagination&#10;                            if (Config.isSpotifyConnected(context)) {&#10;                                val accessToken = Config.getSpotifyAccessToken(context)&#10;                                if (accessToken != null) {&#10;                                    Log.d(&quot;SearchScreen&quot;, &quot; Iniciando búsqueda en Spotify: '$finalQuery'&quot;)&#10;                                    SpotifyRepository.searchAllWithPagination(accessToken, finalQuery) { searchResults: SpotifySearchAllResponse?, searchError: String? -&gt;&#10;                                        // Asegurar que las actualizaciones se ejecuten en el hilo principal&#10;                                        android.os.Handler(android.os.Looper.getMainLooper()).post {&#10;                                            if (searchError != null) {&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                error = &quot;Error searching Spotify: $searchError&quot;&#10;                                                Log.e(&quot;SearchScreen&quot;, &quot;Error searching Spotify: $searchError&quot;)&#10;                                            } else if (searchResults != null) {&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Resultados actualizados: ${searchResults.tracks.items.size} tracks, ${searchResults.albums.items.size} albums, ${searchResults.artists.items.size} artists, ${searchResults.playlists.items.size} playlists&quot;)&#10;&#10;                                                if (isLoadMore &amp;&amp; spotifyResults != null) {&#10;                                                    // Combinar resultados existentes con nuevos&#10;                                                    val combinedResults = SpotifySearchAllResponse(&#10;                                                        tracks = SpotifyTracksSearchResult(&#10;                                                            items = spotifyResults!!.tracks.items + searchResults.tracks.items,&#10;                                                            total = searchResults.tracks.total,&#10;                                                            limit = searchResults.tracks.limit,&#10;                                                            offset = searchResults.tracks.offset,&#10;                                                            next = searchResults.tracks.next&#10;                                                        ),&#10;                                                        albums = SpotifyAlbumsSearchResult(&#10;                                                            items = spotifyResults!!.albums.items + searchResults.albums.items,&#10;                                                            total = searchResults.albums.total,&#10;                                                            limit = searchResults.albums.limit,&#10;                                                            offset = searchResults.albums.offset,&#10;                                                            next = searchResults.albums.next&#10;                                                        ),&#10;                                                        artists = SpotifyArtistsSearchResult(&#10;                                                            items = spotifyResults!!.artists.items + searchResults.artists.items,&#10;                                                            total = searchResults.artists.total,&#10;                                                            limit = searchResults.artists.limit,&#10;                                                            offset = searchResults.artists.offset,&#10;                                                            next = searchResults.artists.next&#10;                                                        ),&#10;                                                        playlists = SpotifyPlaylistsSearchResult(&#10;                                                            items = spotifyResults!!.playlists.items + searchResults.playlists.items,&#10;                                                            total = searchResults.playlists.total,&#10;                                                            limit = searchResults.playlists.limit,&#10;                                                            offset = searchResults.playlists.offset,&#10;                                                            next = searchResults.playlists.next&#10;                                                        )&#10;                                                    )&#10;                                                    spotifyResults = combinedResults&#10;                                                } else {&#10;                                                    spotifyResults = searchResults&#10;                                                }&#10;&#10;                                                // Para esta implementación, como searchAllWithPagination ya obtiene todos los resultados,&#10;                                                // no hay paginación manual adicional necesaria&#10;                                                hasMoreResults = false&#10;&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                showSpotifyResults = true&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot; Estado actualizado - showSpotifyResults=$showSpotifyResults&quot;)&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                } else {&#10;                                    isLoading = false&#10;                                    isLoadingMore = false&#10;                                    error = &quot;Token de Spotify no disponible&quot;&#10;                                }&#10;                            } else {&#10;                                isLoading = false&#10;                                isLoadingMore = false&#10;                                error = &quot;Spotify no está conectado&quot;&#10;                            }&#10;                        }&#10;                        &#10;                        else -&gt; {&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                            error = &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;&#10;                            Log.w(&quot;SearchScreen&quot;, &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;)&#10;                        }&#10;                    }&#10;                    &#10;                } catch (e: Exception) {&#10;                    isLoading = false&#10;                    isLoadingMore = false&#10;                    error = &quot;Error en búsqueda: ${e.message}&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;Error en búsqueda&quot;, e)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Funciones auxiliares para operaciones de Spotify&#10;    val saveSpotifyPlaylistToLibrary: () -&gt; Unit = {&#10;        coroutineScope.launch {&#10;            try {&#10;                selectedSpotifyPlaylist?.let { playlist -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando playlist en biblioteca de Spotify: ${playlist.name}&quot;)&#10;                        SpotifyRepository.followPlaylist(accessToken, playlist.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Playlist seguida exitosamente: ${playlist.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error siguiendo playlist: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;                selectedSpotifyAlbum?.let { album -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando álbum en biblioteca de Spotify: ${album.name}&quot;)&#10;                        SpotifyRepository.saveAlbum(accessToken, album.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Álbum guardado exitosamente: ${album.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error guardando álbum: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error guardando en biblioteca de Spotify&quot;, e)&#10;            }&#10;        }&#10;    }&#10;    &#10;    val loadSpotifyPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedSpotifyPlaylist = playlist&#10;        selectedSpotifyAlbum = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;        &#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks de la playlist: ${playlist.name}&quot;)&#10;                    SpotifyRepository.getPlaylistTracks(accessToken, playlist.id) { playlistTracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (playlistTracks != null) {&#10;                            // Convertir SpotifyPlaylistTrack a SpotifyTrack&#10;                            val tracks = playlistTracks.mapNotNull { it.track }&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para la playlist: ${playlist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks de la playlist: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de playlist: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks de la playlist: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando playlist tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;    &#10;    val loadSpotifyAlbumTracks: (SpotifyAlbum) -&gt; Unit = { album -&gt;&#10;        selectedSpotifyAlbum = album&#10;        selectedSpotifyPlaylist = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;        &#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks del álbum: ${album.name}&quot;)&#10;                    SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (tracks != null) {&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para el álbum: ${album.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks del álbum: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de álbum: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks del álbum: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando album tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        when {&#10;            selectedSpotifyPlaylist != null || selectedSpotifyAlbum != null -&gt; {&#10;                // Volver de la vista detallada a los resultados de búsqueda&#10;                selectedSpotifyPlaylist = null&#10;                selectedSpotifyAlbum = null&#10;                selectedItemTracks = emptyList()&#10;            }&#10;            else -&gt; onBack()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Mostrar vista detallada o búsqueda normal&#10;        when {&#10;            selectedSpotifyPlaylist != null -&gt; {&#10;                SpotifyPlaylistDetailView(&#10;                    playlist = selectedSpotifyPlaylist!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyPlaylist = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir playlist desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;                            &#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;                            &#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;                            &#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir playlist en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;                            &#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;                            &#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;                            &#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist aleatoria&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyAlbum != null -&gt; {&#10;                SpotifyAlbumDetailView(&#10;                    album = selectedSpotifyAlbum!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyAlbum = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir álbum desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;                            &#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;                            &#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;                            &#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir álbum en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;                            &#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;                            &#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;                            &#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum aleatorio&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            else -&gt; {&#10;                // Vista normal de búsqueda&#10;                SearchMainView(&#10;                    searchQuery = searchQuery,&#10;                    onSearchQueryChange = { searchQuery = it },&#10;                    results = results,&#10;                    spotifyResults = spotifyResults,&#10;                    showSpotifyResults = showSpotifyResults,&#10;                    isLoading = isLoading,&#10;                    error = error,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                    onAlbumSelected = loadSpotifyAlbumTracks,&#10;                    onPlaylistSelected = loadSpotifyPlaylistTracks,&#10;                    onSearchTriggered = performSearch,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun QueueScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_queue&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Contenido de la cola&#10;        if (playerViewModel != null) {&#10;            val queueState by playerViewModel.queueState.collectAsStateWithLifecycle()&#10;            val currentQueue = queueState.queue&#10;            &#10;            if (currentQueue.isNotEmpty()) {&#10;                // Header de la cola&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Current queue [${currentQueue.size}]&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFFFFD93D)&#10;                        )&#10;                    )&#10;                    &#10;                    // Botón para limpiar la cola&#10;                    TextButton(&#10;                        onClick = { &#10;                            playerViewModel.clearQueue()&#10;                            Log.d(&quot;QueueScreen&quot;, &quot;Cola limpiada por el usuario&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;clear&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(Modifier.height(16.dp))&#10;                &#10;                // Lista de tracks en la cola&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(&#10;                        count = currentQueue.size,&#10;                        key = { index -&gt; currentQueue[index].id }&#10;                    ) { index -&gt;&#10;                        val track = currentQueue[index]&#10;                        val isCurrentTrack = queueState.currentIndex == index&#10;                        &#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp, horizontal = 4.dp)&#10;                                .clickable {&#10;                                    coroutineScope.launch {&#10;                                        if (queueState.currentIndex != index) {&#10;                                            playerViewModel.playQueueFromIndex(index)&#10;                                        } else {&#10;                                            playerViewModel.resumeIfPaused()&#10;                                        }&#10;                                    }&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Iniciando cola desde índice: $index&quot;)&#10;                                },&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Indicador de posición y estado&#10;                            Text(&#10;                                text = if (isCurrentTrack) &quot;♪ &quot; else &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            // Nombre del track&#10;                            MarqueeText(&#10;                                text = track.name,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFFE0E0E0) else Color(0xFFBDC3C7)&#10;                                ),&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            &#10;                            // Botón para remover de la cola&#10;                            TextButton(&#10;                                onClick = { &#10;                                    playerViewModel.removeFromQueue(index)&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Track removido de la cola en índice: $index&quot;)&#10;                                },&#10;                                modifier = Modifier.padding(start = 8.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;×&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Estado vacío&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Queue is empty&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                    &#10;                    Text(&#10;                        text = &quot;Add tracks from search to start playing&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF7F8C8D)&#10;                        ),&#10;                        modifier = Modifier.padding(top = 8.dp)&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            // PlayerViewModel no disponible&#10;            Column(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Player not available&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Composable para texto marquee mejorado&#10;@Composable&#10;fun MarqueeText(&#10;    text: String,&#10;    style: TextStyle,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val density = LocalDensity.current&#10;    var textWidth by remember { mutableStateOf(0) }&#10;    var containerWidth by remember { mutableStateOf(0) }&#10;    val shouldAnimate = textWidth &gt; containerWidth &amp;&amp; containerWidth &gt; 0&#10;    &#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;marquee&quot;)&#10;    &#10;    val animatedOffset by infiniteTransition.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = if (shouldAnimate) -(textWidth - containerWidth).toFloat() else 0f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(&#10;                durationMillis = if (shouldAnimate) maxOf(text.length * 100, 3000) else 0,&#10;                easing = LinearEasing,&#10;                delayMillis = 1500 // Pausa al inicio&#10;            ),&#10;            repeatMode = RepeatMode.Restart&#10;        ),&#10;        label = &quot;marquee_animation&quot;&#10;    )&#10;    &#10;    Box(&#10;        modifier = modifier&#10;            .clipToBounds()&#10;            .onSizeChanged { size -&gt;&#10;                containerWidth = size.width&#10;            }&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = style,&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Visible,&#10;            softWrap = false,&#10;            modifier = Modifier&#10;                .onSizeChanged { size -&gt;&#10;                    textWidth = size.width&#10;                }&#10;                .offset(x = with(density) { animatedOffset.toDp() })&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ConfigScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    onThemeChanged: (String) -&gt; Unit = {}&#10;) {&#10;    var selectedTheme by remember { mutableStateOf(Config.getTheme(context)) }&#10;    var selectedSearchEngine by remember { mutableStateOf(Config.getSearchEngine(context)) }&#10;    &#10;    // Estado para Spotify&#10;    var isSpotifyConnected by remember { mutableStateOf(Config.isSpotifyConnected(context)) }&#10;    var isConnecting by remember { mutableStateOf(false) }&#10;    var connectionMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    &#10;    LaunchedEffect(selectedTheme) {&#10;        Config.setTheme(context, selectedTheme)&#10;        onThemeChanged(selectedTheme)&#10;    }&#10;    &#10;    LaunchedEffect(selectedSearchEngine) {&#10;        Config.setSearchEngine(context, selectedSearchEngine)&#10;    }&#10;    &#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_config&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        &#10;        // Selector de tema&#10;        Text(&#10;            text = &quot;&gt; theme&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                //color = MaterialTheme.colorScheme.secondary&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;        &#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Dark&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { &#10;                        selectedTheme = &quot;dark&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Text(&#10;                    text = &quot;dark&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedTheme == &quot;dark&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            &#10;            // Opción Light&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { &#10;                        selectedTheme = &quot;light&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedTheme == &quot;light&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Selector de motor de búsqueda&#10;        Text(&#10;            text = &quot;&gt; search_engine&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                //color = MaterialTheme.colorScheme.secondary&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;        &#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Spotify&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { &#10;                        selectedSearchEngine = &quot;spotify&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;spotify&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedSearchEngine == &quot;spotify&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color =MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            // Opción YouTube&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { &#10;                        selectedSearchEngine = &quot;youtube&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;youtube&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedSearchEngine == &quot;youtube&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(30.dp))&#10;        &#10;        // Información de uso&#10;        Column {&#10;            Text(&#10;                text = &quot;&gt; info&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    //color = MaterialTheme.colorScheme.secondary&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            &#10;            Text(&#10;                text = &quot;    ● don't pirate music!\n    ● Change engine with yt: / sp:&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                lineHeight = 18.sp&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;        &#10;        // Escuchar eventos de autenticación de Spotify&#10;        LaunchedEffect(Unit) {&#10;            SpotifyAuthEvent.setAuthCallback { success, message -&gt;&#10;                isConnecting = false&#10;                isSpotifyConnected = success&#10;                connectionMessage = message ?: if (success) &quot;connected&quot; else &quot;error&quot;&#10;            }&#10;        }&#10;        &#10;        // Limpiar callback al salir&#10;        DisposableEffect(Unit) {&#10;            onDispose {&#10;                SpotifyAuthEvent.clearCallback()&#10;            }&#10;        }&#10;        &#10;        // Status unificado de plyr y Spotify&#10;        Column {&#10;            Text(&#10;                text = &quot;&gt; sptfy_status&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    //color = MaterialTheme.colorScheme.secondary&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;&#10;            // Estado de Spotify (clickeable)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { &#10;                        if (isSpotifyConnected) {&#10;                            // Desconectar Spotify&#10;                            Config.clearSpotifyTokens(context)&#10;                            isSpotifyConnected = false&#10;                            connectionMessage = &quot;disconnected&quot;&#10;                        } else {&#10;                            // Verificar que las credenciales estén configuradas&#10;                            if (!Config.hasSpotifyCredentials(context)) {&#10;                                connectionMessage = &quot;credentials_required&quot;&#10;                            } else {&#10;                                // Conectar con Spotify&#10;                                isConnecting = true&#10;                                connectionMessage = &quot;opening_browser...&quot;&#10;                                try {&#10;                                    val success = SpotifyRepository.startOAuthFlow(context)&#10;                                    if (success) {&#10;                                        connectionMessage = &quot;check_browser&quot;&#10;                                    } else {&#10;                                        connectionMessage = &quot;error_starting_oauth&quot;&#10;                                        isConnecting = false&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    connectionMessage = &quot;error: ${e.message}&quot;&#10;                                    isConnecting = false&#10;                                }&#10;                            }&#10;                        }&#10;                        haptic.performHapticFeedback(HapticFeedbackType.LongPress)&#10;                    }&#10;                    .padding(vertical = 4.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;    ● client:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Estado de conexión&#10;                    Text(&#10;                        text = when {&#10;                            connectionMessage == &quot;credentials_required&quot; -&gt; &quot;configure credentials first&quot;&#10;                            connectionMessage.isNotEmpty() -&gt; connectionMessage&#10;                            isSpotifyConnected &amp;&amp; Config.hasSpotifyCredentials(context) -&gt; &quot;connected&quot;&#10;                            Config.hasSpotifyCredentials(context) -&gt; &quot;disconnected&quot;&#10;                            else -&gt; &quot;credentials required&quot;&#10;                        },&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = when {&#10;                                connectionMessage == &quot;credentials_required&quot; -&gt; Color(0xFFE74C3C)&#10;                                !Config.hasSpotifyCredentials(context) -&gt; Color(0xFFE74C3C)&#10;                                isSpotifyConnected -&gt; Color(0xFF1DB954)&#10;                                else -&gt; Color(0xFF95A5A6)&#10;                            }&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Configuración de API de Spotify&#10;        SpotifyApiConfigSection(context = context)&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlaylistsScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var dragOffsetX by remember { mutableStateOf(0f) }&#10;    &#10;    // Repositorio local y manager de búsqueda&#10;    val localRepository = remember { PlaylistLocalRepository(context) }&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Estado para las playlists y autenticación&#10;    val playlistsFromDB by localRepository.getAllPlaylistsLiveData().asFlow().collectAsStateWithLifecycle(initialValue = emptyList())&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var isSpotifyConnected by remember { mutableStateOf(Config.isSpotifyConnected(context)) }&#10;    var isSyncing by remember { mutableStateOf(false) }&#10;    var isEditing by remember { mutableStateOf(false) }&#10;    &#10;    // Convertir entidades a SpotifyPlaylist para compatibilidad con UI existente&#10;    val playlists = playlistsFromDB.map { it.toSpotifyPlaylist() }&#10;    &#10;    // Estado para mostrar tracks de una playlist&#10;    var selectedPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedPlaylistEntity by remember { mutableStateOf&lt;PlaylistEntity?&gt;(null) }&#10;    var playlistTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    var isSearchingYouTubeIds by remember { mutableStateOf(false) }&#10;    var showCreatePlaylistScreen by remember { mutableStateOf(false) }&#10;    &#10;    // Tracks observados desde la base de datos&#10;    val tracksFromDB by if (selectedPlaylistEntity != null) {&#10;        localRepository.getTracksByPlaylistLiveData(selectedPlaylistEntity!!.spotifyId)&#10;            .asFlow()&#10;            .collectAsStateWithLifecycle(initialValue = emptyList())&#10;    } else {&#10;        remember { mutableStateOf(emptyList&lt;TrackEntity&gt;()) }&#10;    }&#10;    &#10;    // Actualizar tracks cuando cambien en la DB&#10;    LaunchedEffect(tracksFromDB) {&#10;        if (selectedPlaylistEntity != null) {&#10;            playlistTracks = tracksFromDB.map { it.toSpotifyTrack() }&#10;        }&#10;    }&#10;    &#10;    // Función para cargar playlists con sincronización automática&#10;    val loadPlaylists = {&#10;        if (!isSpotifyConnected) {&#10;            error = &quot;Spotify no está conectado&quot;&#10;        } else {&#10;            isLoading = true&#10;            error = null&#10;            &#10;            // Usar corrutina para operaciones asíncronas&#10;            coroutineScope.launch {&#10;                try {&#10;                    val playlistEntities = localRepository.getPlaylistsWithAutoSync()&#10;                    isLoading = false&#10;                    // Las playlists se actualizan automáticamente a través del LiveData&#10;                } catch (e: Exception) {&#10;                    isLoading = false&#10;                    error = &quot;Error cargando playlists: ${e.message}&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Función para cargar tracks de una playlist&#10;    val loadPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedPlaylist = playlist&#10;        selectedPlaylistEntity = playlistsFromDB.find { it.spotifyId == playlist.id }&#10;        isLoadingTracks = true&#10;        &#10;        if (selectedPlaylistEntity == null) {&#10;            isLoadingTracks = false&#10;            error = &quot;Playlist no encontrada en base de datos local&quot;&#10;        } else {&#10;            // Usar corrutina para operaciones asíncronas&#10;            coroutineScope.launch {&#10;                try {&#10;                    val trackEntities = localRepository.getTracksWithAutoSync(playlist.id)&#10;                    isLoadingTracks = false&#10;                    // Los tracks se actualizan automáticamente a través del LiveData&#10;                    &#10;                    // NOTA: Ya no se necesita búsqueda masiva de YouTube IDs&#10;                    // Los IDs se obtienen automáticamente cuando el usuario hace click en cada canción&#10;                    Log.d(&quot;PlaylistScreen&quot;, &quot;✅ Tracks cargados para playlist: ${playlist.name}. IDs de YouTube se obtendrán bajo demanda.&quot;)&#10;                } catch (e: Exception) {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Error cargando tracks: ${e.message}&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Función para forzar sincronización completa&#10;    val forceSyncAll = {&#10;        if (!isSpotifyConnected) {&#10;            error = &quot;Spotify no está conectado&quot;&#10;        } else {&#10;            isSyncing = true&#10;            error = null&#10;            &#10;            coroutineScope.launch {&#10;                try {&#10;                    val success = localRepository.forceSyncAll()&#10;                    isSyncing = false&#10;                    if (!success) {&#10;                        error = &quot;Error en la sincronización&quot;&#10;                    }&#10;                } catch (e: Exception) {&#10;                    isSyncing = false&#10;                    error = &quot;Error en sincronización: ${e.message}&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Cargar playlists al iniciar si está conectado&#10;    LaunchedEffect(isSpotifyConnected) {&#10;        if (isSpotifyConnected) {&#10;            loadPlaylists()&#10;        }&#10;    }&#10;    &#10;    // Cleanup del YouTubeSearchManager&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            youtubeSearchManager.cleanup()&#10;        }&#10;    }&#10;    &#10;    // Manejar botón de retroceso del sistema&#10;    BackHandler {&#10;        if (selectedPlaylist != null) {&#10;            selectedPlaylist = null&#10;            playlistTracks = emptyList()&#10;        } else {&#10;            onBack()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        if (showCreatePlaylistScreen) {&#10;            CreateSpotifyPlaylistScreen(&#10;                onBack = { showCreatePlaylistScreen = false },&#10;                onPlaylistCreated = { showCreatePlaylistScreen = false; loadPlaylists() }&#10;            )&#10;            return@Column&#10;        }&#10;        // Header&#10;        Text(&#10;            text = if (selectedPlaylist == null) &quot;$ plyr_lists&quot; else &quot;$ ${selectedPlaylist!!.name}&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Botón de sincronización manual (solo visible si está conectado y no es una playlist individual)&#10;        if (isSpotifyConnected &amp;&amp; selectedPlaylist == null) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Botón de sincronización&#10;                Text(&#10;                    text = if (isSyncing) &quot;&lt;syncing...&gt;&quot; else &quot;&lt;sync&gt;&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (isSyncing) Color(0xFFFFD93D) else Color(0xFF4ECDC4)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable(enabled = !isSyncing) { &#10;                            forceSyncAll()&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                        }&#10;                        .padding(8.dp)&#10;                )&#10;                // New button&#10;                Text(&#10;                    text = &quot;&lt;new&gt;&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF4ECDC4)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable(enabled = !isSyncing) {&#10;                            // Set state to show create playlist screen&#10;                            showCreatePlaylistScreen = true&#10;                        }&#10;                        .padding(8.dp)&#10;                )&#10;                &#10;                // Indicador de estado&#10;                Text(&#10;                    text = when {&#10;                        isSyncing -&gt; &quot;Sincronizando...&quot;&#10;                        playlists.isNotEmpty() -&gt; &quot;${playlists.size} playlists&quot;&#10;                        else -&gt; &quot;Sin datos locales&quot;&#10;                    },&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.align(Alignment.CenterVertically)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        &#10;        when {&#10;            !isSpotifyConnected -&gt; {&#10;                // Estado no conectado&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;● &quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFFFF6B6B)&#10;                        )&#10;                    )&#10;                    Text(&#10;                        text = &quot;$ spotify_not_connected&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 14.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Conecta tu cuenta en Config primero&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;            &#10;            selectedPlaylist != null -&gt; {&#10;                // Vista de tracks de playlist&#10;                if (isLoadingTracks) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;● &quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFFFD93D)&#10;                            )&#10;                        )&#10;                        Text(&#10;                            text = &quot;$ loading_tracks...&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 14.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Estados para los botones de control&#10;                    var isRandomizing by remember { mutableStateOf(false) }&#10;                    var isStarting by remember { mutableStateOf(false) }&#10;                    var randomJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;                    var startJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;                    &#10;                    // Función para parar todas las reproducciones&#10;                    fun stopAllPlayback() {&#10;                        isRandomizing = false&#10;                        isStarting = false&#10;                        randomJob?.cancel()&#10;                        startJob?.cancel()&#10;                        randomJob = null&#10;                        startJob = null&#10;                        // Cancelar espera de canción y pausar el reproductor&#10;                        playerViewModel?.cancelWaitForSong()&#10;                        playerViewModel?.pausePlayer()&#10;                    }&#10;                    &#10;                    &#10;                    // Función para randomización simplificada - solo reproduce un track aleatorio&#10;                    fun startRandomizing() {&#10;                        stopAllPlayback()&#10;                        isRandomizing = true&#10;                        &#10;                        if (playlistTracks.isNotEmpty() &amp;&amp; playerViewModel != null) {&#10;                            randomJob = GlobalScope.launch {&#10;                                val randomTrack = playlistTracks.random()&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == randomTrack.id }&#10;                                &#10;                                println(&quot;� RANDOM: ${randomTrack.getDisplayName()}&quot;)&#10;                                &#10;                                if (trackEntity != null &amp;&amp; playerViewModel != null) {&#10;                                    // Reproducir la canción usando PlayerViewModel&#10;                                    playerViewModel?.initializePlayer()&#10;                                    &#10;                                    // Establecer la playlist completa con el track aleatorio seleccionado&#10;                                    val currentTrackIndex = tracksFromDB.indexOf(trackEntity)&#10;                                    if (currentTrackIndex &gt;= 0) {&#10;                                        playerViewModel?.setCurrentPlaylist(tracksFromDB, currentTrackIndex)&#10;                                    }&#10;                                    &#10;                                    // Cargar y reproducir - PlayerViewModel manejará la navegación automática&#10;                                    playerViewModel?.loadAudioFromTrack(trackEntity)&#10;                                } else {&#10;                                    println(&quot;⚠️ TrackEntity no encontrado para: ${randomTrack.getDisplayName()}&quot;)&#10;                                }&#10;                                &#10;                                isRandomizing = false&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    // Función para reproducción ordenada simplificada - solo inicia desde el primer track&#10;                    fun startOrderedPlayback() {&#10;                        stopAllPlayback()&#10;                        isStarting = true&#10;                        &#10;                        if (playlistTracks.isNotEmpty() &amp;&amp; playerViewModel != null) {&#10;                            startJob = GlobalScope.launch {&#10;                                val firstTrack = playlistTracks.first()&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == firstTrack.id }&#10;                                &#10;                                println(&quot; START [${selectedPlaylist!!.name}]: ${firstTrack.getDisplayName()}&quot;)&#10;                                &#10;                                if (trackEntity != null &amp;&amp; playerViewModel != null) {&#10;                                    // Reproducir la canción usando PlayerViewModel&#10;                                    playerViewModel?.initializePlayer()&#10;                                    &#10;                                    // Establecer la playlist completa desde el inicio (índice 0)&#10;                                    val trackEntityIndex = tracksFromDB.indexOf(trackEntity)&#10;                                    if (trackEntityIndex &gt;= 0) {&#10;                                        playerViewModel?.setCurrentPlaylist(tracksFromDB, trackEntityIndex)&#10;                                    }&#10;                                    &#10;                                    // Cargar y reproducir - PlayerViewModel manejará la navegación automática&#10;                                    playerViewModel?.loadAudioFromTrack(trackEntity)&#10;                                } else {&#10;                                    println(&quot;⚠️ TrackEntity no encontrado para: ${firstTrack.getDisplayName()}&quot;)&#10;                                }&#10;                                &#10;                                isStarting = false&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    // Limpiar jobs al salir&#10;                    DisposableEffect(selectedPlaylist) {&#10;                        onDispose {&#10;                            randomJob?.cancel()&#10;                            startJob?.cancel()&#10;                        }&#10;                    }&#10;                    &#10;                    Column {&#10;                        // Botones de control&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(bottom = 16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            // Botón &lt;start&gt;&#10;                            Text(&#10;                                text = if (isStarting) &quot;&lt;stop&gt;&quot; else &quot;&lt;start&gt;&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 16.sp,&#10;                                    color = if (isStarting) Color(0xFFFF6B6B) else Color(0xFF4ECDC4)&#10;                                ),&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        if (isStarting) {&#10;                                            stopAllPlayback()&#10;                                        } else {&#10;                                            startOrderedPlayback()&#10;                                        }&#10;                                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                    }&#10;                                    .padding(8.dp)&#10;                            )&#10;                            &#10;                            // Botón &lt;rand&gt;&#10;                            Text(&#10;                                text = if (isRandomizing) &quot;&lt;stop&gt;&quot; else &quot;&lt;rand&gt;&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 16.sp,&#10;                                    color = if (isRandomizing) Color(0xFFFF6B6B) else Color(0xFFFFD93D)&#10;                                ),&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        if (isRandomizing) {&#10;                                            stopAllPlayback()&#10;                                        } else {&#10;                                            startRandomizing()&#10;                                        }&#10;                                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                    }&#10;                                    .padding(8.dp)&#10;                            )&#10;                            // Botón &lt;edit&gt;&#10;                            Text(&#10;                                text = if (isEditing) &quot;&lt;done&gt;&quot; else &quot;&lt;edit&gt;&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 16.sp,&#10;                                    color = if (isEditing) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        isEditing = !isEditing&#10;                                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                    }&#10;                                    .padding(8.dp)&#10;                            )&#10;                        }&#10;                        if (isEditing) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(vertical = 8.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                // Botón para añadir canción&#10;                                Text(&#10;                                    text = &quot;&lt;add song&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color(0xFF4ECDC4)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable { /* TODO: lógica para añadir canción */ }&#10;                                        .padding(8.dp)&#10;                                )&#10;                                // Botón para eliminar canción&#10;                                Text(&#10;                                    text = &quot;&lt;remove song&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color(0xFFFF6B6B)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable { /* TODO: lógica para eliminar canción */ }&#10;                                        .padding(8.dp)&#10;                                )&#10;                                // Cambiar título&#10;                                var newTitle by remember { mutableStateOf(selectedPlaylist?.name ?: &quot;&quot;) }&#10;                                OutlinedTextField(&#10;                                    value = newTitle,&#10;                                    onValueChange = { newTitle = it },&#10;                                    label = { Text(&quot;Playlist Title&quot;) },&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                )&#10;                                Text(&#10;                                    text = &quot;&lt;save title&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color(0xFF4ECDC4)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable { /* TODO: lógica para guardar título */ }&#10;                                        .padding(8.dp)&#10;                                )&#10;                                // Cambiar descripción&#10;                                var newDesc by remember { mutableStateOf(selectedPlaylist?.description ?: &quot;&quot;) }&#10;                                OutlinedTextField(&#10;                                    value = newDesc,&#10;                                    onValueChange = { newDesc = it },&#10;                                    label = { Text(&quot;Playlist Description&quot;) },&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                )&#10;                                Text(&#10;                                    text = &quot;&lt;save desc&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color(0xFF4ECDC4)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable { /* TODO: lógica para guardar descripción */ }&#10;                                        .padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        // Lista de tracks&#10;                        LazyColumn(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            contentPadding = PaddingValues(bottom = 16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(playlistTracks.size) { index -&gt;&#10;                                val track = playlistTracks[index]&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == track.id }&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            // Create TrackEntity from SpotifyTrack and play&#10;                                            val trackEntity = TrackEntity(&#10;                                                id = &quot;spotify_${System.currentTimeMillis()}_${track.id}&quot;,&#10;                                                playlistId = &quot;spotify_playlist&quot;,&#10;                                                spotifyTrackId = track.id,&#10;                                                name = track.name,&#10;                                                artists = track.getArtistNames(),&#10;                                                youtubeVideoId = null, // Se buscará dinámicamente&#10;                                                audioUrl = null, // Se obtendrá dinámicamente&#10;                                                position = index,&#10;                                                lastSyncTime = System.currentTimeMillis()&#10;                                            )&#10;                                            &#10;                                            // Add to player queue and play&#10;                                            playerViewModel?.let { viewModel -&gt;&#10;                                                CoroutineScope(Dispatchers.Main).launch {&#10;                                                    try {&#10;                                                        // Create playlist from current tracks&#10;                                                        val playlistEntities = playlistTracks.mapIndexed { idx, spotifyTrack -&gt;&#10;                                                            TrackEntity(&#10;                                                                id = &quot;spotify_${System.currentTimeMillis()}_${spotifyTrack.id}_$idx&quot;,&#10;                                                                playlistId = &quot;spotify_playlist&quot;,&#10;                                                                spotifyTrackId = spotifyTrack.id,&#10;                                                                name = spotifyTrack.name,&#10;                                                                artists = spotifyTrack.getArtistNames(),&#10;                                                                youtubeVideoId = null,&#10;                                                                audioUrl = null,&#10;                                                                position = idx,&#10;                                                                lastSyncTime = System.currentTimeMillis()&#10;                                                            )&#10;                                                        }&#10;                                                        &#10;                                                        // Set current playlist and play from index&#10;                                                        viewModel.setCurrentPlaylist(playlistEntities, index)&#10;                                                        viewModel.loadAudioFromTrack(trackEntity)&#10;                                                    } catch (e: Exception) {&#10;                                                        Log.e(&quot;PlaylistScreen&quot;, &quot;Error playing track: ${e.message}&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                        .padding(8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;${index + 1}. &quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        )&#10;                                    )&#10;                                    &#10;                                    Column(modifier = Modifier.weight(1f)) {&#10;                                        Text(&#10;                                            text = track.name,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFFE0E0E0)&#10;                                            ),&#10;                                            maxLines = 1,&#10;                                            overflow = TextOverflow.Ellipsis&#10;                                        )&#10;                                        &#10;                                        Text(&#10;                                            text = track.getArtistNames(),&#10;                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFF95A5A6)&#10;                                            ),&#10;                                            maxLines = 1,&#10;                                            overflow = TextOverflow.Ellipsis&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            &#10;            else -&gt; {&#10;                // Vista principal de playlists&#10;                if (isLoading || isSyncing) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (isSyncing) &quot;$ syncing_from_spotify...&quot; else &quot;$ loading_playlists...&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFFFD93D)&#10;                            )&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Estado cuando no está cargando ni sincronizando&#10;                    if (playlists.isEmpty()) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No playlists found&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    } else {&#10;                        // Grilla de portadas de playlists&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Adaptive(minSize = 150.dp),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            contentPadding = PaddingValues(bottom = 16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            items(playlists.size) { index -&gt;&#10;                                val playlist = playlists[index]&#10;                                val playlistEntity = playlistsFromDB.find { it.spotifyId == playlist.id }&#10;&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            selectedPlaylist = playlist&#10;                                            loadPlaylistTracks(playlist)&#10;                                        },&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                ) {&#10;                                    // Portada de la playlist&#10;                                    AsyncImage(&#10;                                        model = playlistEntity?.imageUrl,&#10;                                        contentDescription = &quot;Portada de ${playlist.name}&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(150.dp)&#10;                                            .clip(RoundedCornerShape(8.dp)),&#10;                                        placeholder = null,&#10;                                        error = null,&#10;                                        fallback = null&#10;                                    )&#10;&#10;                                    // Nombre de la playlist (opcional, se puede quitar si solo quieres las portadas)&#10;                                    Text(&#10;                                        text = playlist.name,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFE0E0E0)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 8.dp),&#10;                                        maxLines = 2,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotifyApiConfigSection(context: Context) {&#10;    var isExpanded by remember { mutableStateOf(false) }&#10;    var clientId by remember { mutableStateOf(Config.getSpotifyClientId(context) ?: &quot;&quot;) }&#10;    var clientSecret by remember { mutableStateOf(Config.getSpotifyClientSecret(context) ?: &quot;&quot;) }&#10;    val haptic = LocalHapticFeedback.current&#10;    &#10;    Column {&#10;        // Campo principal de API - similar al formato del cliente&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { &#10;                    isExpanded = !isExpanded&#10;                    haptic.performHapticFeedback(HapticFeedbackType.LongPress)&#10;                }&#10;                .padding(vertical = 4.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;    ● api:&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                )&#10;            )&#10;            &#10;            Text(&#10;                text = if (Config.hasSpotifyCredentials(context)) &quot;configured&quot; else &quot;not_configured&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 12.sp,&#10;                    color = if (Config.hasSpotifyCredentials(context)) Color(0xFF1DB954) else Color(0xFFE74C3C)&#10;                )&#10;            )&#10;        }&#10;        &#10;        // Desplegable con campos de configuración&#10;        if (isExpanded) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(start = 16.dp, top = 8.dp)&#10;            ) {&#10;                // Campos de entrada&#10;                Text(&#10;                    text = &quot;      client_id:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = clientId,&#10;                    onValueChange = { &#10;                        clientId = it&#10;                        Config.setSpotifyClientId(context, it)&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 8.dp),&#10;                    textStyle = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp&#10;                    ),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = Color(0xFF1DB954),&#10;                        unfocusedBorderColor = Color(0xFF95A5A6),&#10;                        focusedTextColor = Color(0xFFECF0F1),&#10;                        unfocusedTextColor = Color(0xFFBDC3C7)&#10;                    ),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;enter your spotify client id&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF7F8C8D)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;                &#10;                Text(&#10;                    text = &quot;      client_secret:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = clientSecret,&#10;                    onValueChange = { &#10;                        clientSecret = it&#10;                        Config.setSpotifyClientSecret(context, it)&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp),&#10;                    textStyle = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp&#10;                    ),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = Color(0xFF1DB954),&#10;                        unfocusedBorderColor = Color(0xFF95A5A6),&#10;                        focusedTextColor = Color(0xFFECF0F1),&#10;                        unfocusedTextColor = Color(0xFFBDC3C7)&#10;                    ),&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;enter your spotify client secret&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF7F8C8D)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;                &#10;                // Explicación detallada&#10;                Column(&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;      &gt; how to get spotify api credentials:&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 11.sp,&#10;                            color = Color(0xFF3498DB)&#10;                        ),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                    &#10;                    val instructions = listOf(&#10;                        &quot;1. go to https://developer.spotify.com/dashboard&quot;,&#10;                        &quot;2. log in with your spotify account&quot;,&#10;                        &quot;3. click 'create app'&quot;,&#10;                        &quot;4. fill app name (e.g., 'plyr mobile')&quot;,&#10;                        &quot;5. set redirect uri: 'plyr://spotify/callback'&quot;,&#10;                        &quot;6. select 'mobile' and 'web api'&quot;,&#10;                        &quot;7. click 'save'&quot;,&#10;                        &quot;8. copy client id and client secret&quot;,&#10;                        &quot;9. paste them in the fields above&quot;&#10;                    )&#10;                    &#10;                    instructions.forEach { instruction -&gt;&#10;                        Text(&#10;                            text = &quot;        $instruction&quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 10.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.padding(bottom = 2.dp)&#10;                        )&#10;                    }&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    Text(&#10;                        text = &quot;      note: these credentials are stored locally&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF7F8C8D)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotifyPlaylistDetailView(&#10;    playlist: SpotifyPlaylist,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onBack: () -&gt; Unit,&#10;    onStart: () -&gt; Unit,&#10;    onRandom: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header con botón de retroceso&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;&lt;&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { onBack() }&#10;                    .padding(end = 8.dp)&#10;            )&#10;            Text(&#10;                text = &quot;$ ${playlist.name}&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.weight(1f),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;        &#10;        // Información de la playlist&#10;        playlist.description?.let { description -&gt;&#10;            Text(&#10;                text = description,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp),&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;        Text(&#10;            text = &quot;Tracks: ${playlist.getTrackCount()}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color(0xFF95A5A6)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Botones de acción&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;&#10;            ActionButton(&#10;                text = &quot;&lt;start&gt;&quot;,&#10;                color = Color(0xFF4ECDC4),&#10;                onClick = onStart,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;rand&gt;&quot;,&#10;                color = Color(0xFFFFD93D),&#10;                onClick = onRandom,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;save&gt;&quot;,&#10;                color = Color(0xFF7FB069),&#10;                onClick = onSave,&#10;                enabled = true&#10;            )&#10;        }&#10;        &#10;        // Estados de carga y error&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        &#10;        error?.let {&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;        }&#10;        &#10;        // Lista de tracks&#10;        if (tracks.isNotEmpty()) {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentPadding = PaddingValues(bottom = 16.dp)&#10;            ) {&#10;                items(tracks.size) { index -&gt;&#10;                    val track = tracks[index]&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                // Reproducir track específico&#10;                                Log.d(&quot;SpotifyPlaylist&quot;, &quot; Track seleccionado: ${track.name}&quot;)&#10;                                &#10;                                playerViewModel?.let { viewModel -&gt;&#10;                                    // Convertir todos los tracks de la playlist a TrackEntity&#10;                                    val trackEntities = tracks.mapIndexed { trackIndex, spotifyTrack -&gt;&#10;                                        TrackEntity(&#10;                                            id = &quot;spotify_${playlist.id}_${spotifyTrack.id}&quot;,&#10;                                            playlistId = playlist.id,&#10;                                            spotifyTrackId = spotifyTrack.id,&#10;                                            name = spotifyTrack.name,&#10;                                            artists = spotifyTrack.getArtistNames(),&#10;                                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                                            audioUrl = null,&#10;                                            position = trackIndex,&#10;                                            lastSyncTime = System.currentTimeMillis()&#10;                                        )&#10;                                    }&#10;                                    &#10;                                    // Establecer la playlist completa y comenzar desde el track seleccionado&#10;                                    viewModel.setCurrentPlaylist(trackEntities, index)&#10;                                    &#10;                                    // Buscar y reproducir el track seleccionado&#10;                                    val selectedTrackEntity = trackEntities[index]&#10;                                    coroutineScope.launch {&#10;                                        try {&#10;                                            viewModel.loadAudioFromTrack(selectedTrackEntity)&#10;                                            Log.d(&quot;SpotifyPlaylist&quot;, &quot; Reproduciendo track ${index + 1}/${trackEntities.size}: ${selectedTrackEntity.name}&quot;)&#10;                                        } catch (e: Exception) {&#10;                                            Log.e(&quot;SpotifyPlaylist&quot;, &quot;Error al reproducir track de playlist&quot;, e)&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                            .padding(vertical = 4.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = track.name ?: &quot;Sin título&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                            Text(&#10;                                text = track.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                        Text(&#10;                            text = track.getDurationText(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotifyAlbumDetailView(&#10;    album: SpotifyAlbum,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onBack: () -&gt; Unit,&#10;    onStart: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope,&#10;    onRandom: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header con botón de retroceso&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;&lt;&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { onBack() }&#10;                    .padding(end = 8.dp)&#10;            )&#10;            Text(&#10;                text = &quot;$ ${album.name}&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.weight(1f),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;        &#10;        // Información del álbum&#10;        Text(&#10;            text = &quot;Artist: ${album.getArtistNames()}&quot;,&#10;            style = MaterialTheme.typography.bodySmall.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color(0xFF95A5A6)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 4.dp),&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Ellipsis&#10;        )&#10;        &#10;        album.release_date?.let { releaseDate -&gt;&#10;            Text(&#10;                text = &quot;Released: $releaseDate&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 4.dp)&#10;            )&#10;        }&#10;        &#10;        Text(&#10;            text = &quot;Tracks: ${album.total_tracks ?: tracks.size}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color(0xFF95A5A6)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Botones de acción&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            ActionButton(&#10;                text = &quot;&lt;start&gt;&quot;,&#10;                color = Color(0xFF4ECDC4),&#10;                onClick = onStart,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;save&gt;&quot;,&#10;                color = Color(0xFF7FB069),&#10;                onClick = onSave,&#10;                enabled = true&#10;            )&#10;        }&#10;        &#10;        // Estados de carga y error&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        &#10;        error?.let {&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;        }&#10;        &#10;        // Lista de tracks&#10;        if (tracks.isNotEmpty()) {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentPadding = PaddingValues(bottom = 16.dp)&#10;            ) {&#10;                items(tracks.size) { index -&gt;&#10;                    val track = tracks[index]&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                // Reproducir track específico&#10;                                Log.d(&quot;SpotifyAlbum&quot;, &quot; Track seleccionado: ${track.name}&quot;)&#10;                                &#10;                                playerViewModel?.let { viewModel -&gt;&#10;                                    // Convertir todos los tracks del álbum a TrackEntity&#10;                                    val trackEntities = tracks.mapIndexed { trackIndex, spotifyTrack -&gt;&#10;                                        TrackEntity(&#10;                                            id = &quot;spotify_${album.id}_${spotifyTrack.id}&quot;,&#10;                                            playlistId = album.id,&#10;                                            spotifyTrackId = spotifyTrack.id,&#10;                                            name = spotifyTrack.name,&#10;                                            artists = spotifyTrack.getArtistNames(),&#10;                                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                                            audioUrl = null,&#10;                                            position = trackIndex,&#10;                                            lastSyncTime = System.currentTimeMillis()&#10;                                        )&#10;                                    }&#10;                                    &#10;                                    // Establecer la playlist completa y comenzar desde el track seleccionado&#10;                                    viewModel.setCurrentPlaylist(trackEntities, index)&#10;                                    &#10;                                    // Buscar y reproducir el track seleccionado&#10;                                    val selectedTrackEntity = trackEntities[index]&#10;                                    coroutineScope.launch {&#10;                                        try {&#10;                                            viewModel.loadAudioFromTrack(selectedTrackEntity)&#10;                                            Log.d(&quot;SpotifyAlbum&quot;, &quot; Reproduciendo track ${index + 1}/${trackEntities.size}: ${selectedTrackEntity.name}&quot;)&#10;                                        } catch (e: Exception) {&#10;                                            Log.e(&quot;SpotifyAlbum&quot;, &quot;Error al reproducir track de álbum&quot;, e)&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                            .padding(vertical = 4.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = track.name ?: &quot;Sin título&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                            Text(&#10;                                text = track.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                        Text(&#10;                            text = track.getDurationText(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ActionButton(&#10;    text: String,&#10;    color: Color,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    Text(&#10;        text = text,&#10;        style = MaterialTheme.typography.bodyMedium.copy(&#10;            fontFamily = FontFamily.Monospace,&#10;            fontSize = 16.sp,&#10;            color = if (enabled) color else Color(0xFF95A5A6)&#10;        ),&#10;        modifier = Modifier&#10;            .clickable(enabled = enabled) { onClick() }&#10;            .padding(8.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SpotifySearchResultsView(&#10;    results: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onTrackSelectedFromSearch: (SpotifyTrack, List&lt;SpotifyTrack&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (results.tracks.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ tracks [${results.tracks.items.size}]&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // Changed from LazyColumn to Column for better scroll behavior&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                results.tracks.items.forEachIndexed { index, track -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                onTrackSelectedFromSearch(track, results.tracks.items, index)&#10;                            }&#10;                            .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = track.name ?: &quot;Unknown Track&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                            Text(&#10;                                text = track.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;&#10;                        Text(&#10;                            text = track.getDurationText(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (results.albums.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ albums [${results.albums.items.size}]&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            LazyRow(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(horizontal = 8.dp)&#10;            ) {&#10;                items(results.albums.items.size) { index -&gt;&#10;                    val album = results.albums.items[index]&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .width(120.dp)&#10;                            .clickable { onAlbumSelected(album) },&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        AsyncImage(&#10;                            model = album.getImageUrl(),&#10;                            contentDescription = &quot;Album cover&quot;,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;&#10;                        Text(&#10;                            text = album.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            modifier = Modifier.padding(top = 4.dp),&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;&#10;                        Text(&#10;                            text = album.getArtistNames(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (results.playlists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ playlists [${results.playlists.items.size}]&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            LazyRow(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(horizontal = 8.dp)&#10;            ) {&#10;                items(results.playlists.items.size) { index -&gt;&#10;                    val playlist = results.playlists.items[index]&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .width(120.dp)&#10;                            .clickable { onPlaylistSelected(playlist) },&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        AsyncImage(&#10;                            model = playlist.getImageUrl(),&#10;                            contentDescription = &quot;Playlist cover&quot;,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;&#10;                        Text(&#10;                            text = playlist.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            modifier = Modifier.padding(top = 4.dp),&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;&#10;                        Text(&#10;                            text = &quot;${playlist.getTrackCount()} tracks&quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Artists section (optional)&#10;        if (results.artists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ artists [${results.artists.items.size}]&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            LazyRow(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(horizontal = 8.dp)&#10;            ) {&#10;                items(results.artists.items.size) { index -&gt;&#10;                    val artist = results.artists.items[index]&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .width(100.dp)&#10;                            .clickable { /* TODO: Handle artist selection */ },&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        AsyncImage(&#10;                            model = artist.getImageUrl(),&#10;                            contentDescription = &quot;Artist image&quot;,&#10;                            modifier = Modifier&#10;                                .size(100.dp)&#10;                                .clip(RoundedCornerShape(50.dp))&#10;                        )&#10;&#10;                        Text(&#10;                            text = artist.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            modifier = Modifier.padding(top = 4.dp),&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun YouTubeSearchResultsView(&#10;    results: List&lt;AudioItem&gt;,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;$ youtube_results [${results.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp, top = 16.dp)&#10;        )&#10;&#10;        // Changed from LazyColumn to Column for better scroll behavior&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            results.forEachIndexed { index, item -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable {&#10;                            onVideoSelectedFromSearch(item.videoId, item.title, results, index)&#10;                        }&#10;                        .padding(8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${index + 1}. &quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        modifier = Modifier.width(32.dp)&#10;                    )&#10;&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = item.title,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Text(&#10;                                text = item.channel ?: &quot;Unknown Channel&quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.weight(1f),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;&#10;                            item.duration?.let { duration -&gt;&#10;                                Text(&#10;                                    text = duration,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    // Header&#10;    Text(&#10;        text = &quot;$ plyr_search&quot;,&#10;        style = MaterialTheme.typography.headlineMedium.copy(&#10;            fontFamily = FontFamily.Monospace,&#10;            fontSize = 24.sp,&#10;            color = Color(0xFF4ECDC4)&#10;        ),&#10;        modifier = Modifier.padding(bottom = 16.dp)&#10;    )&#10;&#10;    // Search field with clear button and enter action&#10;    OutlinedTextField(&#10;        value = searchQuery,&#10;        onValueChange = onSearchQueryChange,&#10;        label = {&#10;            Text(&#10;                &quot;&gt; search_audio&quot;,&#10;                style = MaterialTheme.typography.bodyLarge.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp&#10;                )&#10;            )&#10;        },&#10;        modifier = Modifier.fillMaxWidth(),&#10;        trailingIcon = {&#10;            if (searchQuery.isNotEmpty()) {&#10;                IconButton(onClick = {&#10;                    onSearchQueryChange(&quot;&quot;)&#10;                }) {&#10;                    Text(&#10;                        text = &quot;x&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;        keyboardActions = KeyboardActions(&#10;            onSearch = {&#10;                if (searchQuery.isNotBlank() &amp;&amp; !isLoading) {&#10;                    onSearchTriggered(searchQuery, false)&#10;                }&#10;            }&#10;        ),&#10;        enabled = !isLoading,&#10;        colors = OutlinedTextFieldDefaults.colors(&#10;            focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;            unfocusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;            focusedLabelColor = MaterialTheme.colorScheme.primary,&#10;            unfocusedLabelColor = MaterialTheme.colorScheme.secondary,&#10;            focusedTextColor = MaterialTheme.colorScheme.onSurface,&#10;            unfocusedTextColor = MaterialTheme.colorScheme.onSurface&#10;        ),&#10;        textStyle = MaterialTheme.typography.bodyLarge.copy(&#10;            fontFamily = FontFamily.Monospace,&#10;            fontSize = 16.sp&#10;        )&#10;    )&#10;&#10;    Spacer(Modifier.height(12.dp))&#10;&#10;    if (isLoading) {&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                &quot;$ loading...&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFFFD93D)&#10;                )&#10;            )&#10;        }&#10;    }&#10;&#10;    error?.let {&#10;        Spacer(Modifier.height(8.dp))&#10;        Text(&#10;            &quot;ERR: $it&quot;,&#10;            color = Color(0xFFFF6B6B),&#10;            style = MaterialTheme.typography.bodySmall.copy(&#10;                fontFamily = FontFamily.Monospace&#10;            )&#10;        )&#10;    }&#10;&#10;    // === MENÚS DESPLEGABLES DE SPOTIFY ===&#10;    android.util.Log.d(&#10;        &quot;SearchMainView&quot;,&#10;        &quot;Renderizando vista principal - showSpotifyResults=$showSpotifyResults, spotifyResults!=null=${spotifyResults != null}&quot;&#10;    )&#10;    if (showSpotifyResults &amp;&amp; spotifyResults != null) {&#10;        SpotifySearchResultsView(&#10;            results = spotifyResults,&#10;            onAlbumSelected = onAlbumSelected,&#10;            onPlaylistSelected = onPlaylistSelected,&#10;            onTrackSelectedFromSearch = { track, allTracks, selectedIndex -&gt;&#10;                // Convertir tracks de Spotify a TrackEntity y crear playlist temporal&#10;                val trackEntities = allTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                    TrackEntity(&#10;                        id = &quot;spotify_search_${spotifyTrack.id}_$index&quot;,&#10;                        playlistId = &quot;spotify_search_${System.currentTimeMillis()}&quot;,&#10;                        spotifyTrackId = spotifyTrack.id,&#10;                        name = spotifyTrack.name,&#10;                        artists = spotifyTrack.getArtistNames(),&#10;                        youtubeVideoId = null, // Se buscará dinámicamente&#10;                        audioUrl = null,&#10;                        position = index,&#10;                        lastSyncTime = System.currentTimeMillis()&#10;                    )&#10;                }&#10;&#10;                // Establecer playlist en el PlayerViewModel&#10;                playerViewModel?.setCurrentPlaylist(trackEntities, selectedIndex)&#10;&#10;                // Cargar el track seleccionado&#10;                val selectedTrackEntity = trackEntities[selectedIndex]&#10;                coroutineScope.launch {&#10;                    try {&#10;                        playerViewModel?.loadAudioFromTrack(selectedTrackEntity)&#10;                        Log.d(&#10;                            &quot;SpotifySearch&quot;,&#10;                            &quot; Track Spotify como playlist: ${track.name} (${selectedIndex + 1}/${allTracks.size})&quot;&#10;                        )&#10;                    } catch (e: Exception) {&#10;                        Log.e(&quot;SpotifySearch&quot;, &quot;Error al reproducir track de Spotify&quot;, e)&#10;                    }&#10;                }&#10;            },&#10;            onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;            playerViewModel = playerViewModel,&#10;            coroutineScope = coroutineScope&#10;        )&#10;    }&#10;&#10;    // === RESULTADOS DE YOUTUBE ===&#10;    if (results.isNotEmpty()) {&#10;        YouTubeSearchResultsView(&#10;            results = results,&#10;            onVideoSelected = onVideoSelected,&#10;            onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;            onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;            playerViewModel = playerViewModel,&#10;            coroutineScope = coroutineScope&#10;        )&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.plyr.ui&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyAuthEvent&#10;import com.plyr.database.PlaylistLocalRepository&#10;import com.plyr.database.PlaylistEntity&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.database.toSpotifyPlaylist&#10;import com.plyr.database.toSpotifyTrack&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.lifecycle.asFlow&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.runtime.Stable&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.layout.onSizeChanged&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.draw.clipToBounds&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.CoroutineScope&#10;import androidx.compose.ui.platform.LocalContext&#10;import com.plyr.network.SpotifyAlbum&#10;import com.plyr.network.SpotifySearchAllResponse&#10;import kotlinx.coroutines.GlobalScope&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.Job&#10;import com.plyr.service.YouTubeSearchManager&#10;import kotlinx.coroutines.Dispatchers&#10;import coil.compose.AsyncImage&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.ui.Alignment&#10;import com.plyr.network.SpotifyAlbumsSearchResult&#10;import com.plyr.network.SpotifyArtistsSearchResult&#10;import com.plyr.network.SpotifyPlaylistsSearchResult&#10;import com.plyr.network.SpotifyTracksSearchResult&#10;&#10;&#10;// Estados para navegación&#10;enum class Screen {&#10;    HOME,&#10;    SEARCH,&#10;    QUEUE,&#10;    CONFIG,&#10;    PLAYLISTS&#10;}&#10;&#10;@Stable&#10;data class MenuOption(val screen: Screen, val title: String)&#10;&#10;@Composable&#10;fun AudioListScreen(&#10;    context: Context,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onThemeChanged: (String) -&gt; Unit = {},&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    var currentScreen by remember { mutableStateOf(Screen.HOME) }&#10;    &#10;    // Handle back button - always go to HOME, never exit app&#10;    BackHandler(enabled = currentScreen != Screen.HOME) {&#10;        currentScreen = Screen.HOME&#10;    }&#10;    &#10;    when (currentScreen) {&#10;        Screen.HOME -&gt; HomeScreen(&#10;            context = context,&#10;            onNavigateToScreen = { screen -&gt; currentScreen = screen }&#10;        )&#10;        Screen.SEARCH -&gt; SearchScreen(&#10;            context = context,&#10;            onVideoSelected = onVideoSelected,&#10;            onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;            onBack = { currentScreen = Screen.HOME },&#10;            playerViewModel = playerViewModel&#10;        )&#10;        Screen.QUEUE -&gt; QueueScreen(&#10;            context = context,&#10;            onBack = { currentScreen = Screen.HOME },&#10;            playerViewModel = playerViewModel&#10;        )&#10;        Screen.CONFIG -&gt; ConfigScreen(&#10;            context = context,&#10;            onBack = { currentScreen = Screen.HOME },&#10;            onThemeChanged = onThemeChanged&#10;        )&#10;        Screen.PLAYLISTS -&gt; PlaylistsScreen(&#10;            context = context,&#10;            onBack = { currentScreen = Screen.HOME },&#10;            playerViewModel = playerViewModel&#10;        )&#10;    }&#10;}&#10;&#10;&#10;// Place this at the top level, outside of any other composable&#10;@Composable&#10;fun CreateSpotifyPlaylistScreen(&#10;    onBack: () -&gt; Unit,&#10;    onPlaylistCreated: () -&gt; Unit&#10;) {&#10;    var playlistName by remember { mutableStateOf(&quot;&quot;) }&#10;    var playlistDesc by remember { mutableStateOf(&quot;&quot;) }&#10;    var isPublic by remember { mutableStateOf(true) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    val context = LocalContext.current&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;$ create_playlist&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 20.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        OutlinedTextField(&#10;            value = playlistName,&#10;            onValueChange = { playlistName = it },&#10;            label = { Text(&quot;Playlist name&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = playlistDesc,&#10;            onValueChange = { playlistDesc = it },&#10;            label = { Text(&quot;Description (optional)&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            // Opción Public&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { isPublic = true }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;public&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (isPublic) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            // Opción Private&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { isPublic = false }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;private&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (!isPublic) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        Spacer(Modifier.height(16.dp))&#10;        Text(&#10;            text = if (isLoading) &quot;&lt;creating...&gt;&quot; else &quot;&lt;create&gt;&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 14.sp,&#10;                color = if (isLoading) Color(0xFFFFD93D) else Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable(enabled = !isLoading &amp;&amp; playlistName.isNotBlank()) {&#10;                    // Acción de crear playlist&#10;                    isLoading = true&#10;                    error = null&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        SpotifyRepository.createPlaylist(&#10;                            accessToken,&#10;                            playlistName,&#10;                            playlistDesc,&#10;                            isPublic&#10;                        ) { success, errMsg -&gt;&#10;                            isLoading = false&#10;                            if (success) onPlaylistCreated() else error = errMsg ?: &quot;Unknown error&quot;&#10;                        }&#10;                    } else {&#10;                        isLoading = false&#10;                        error = &quot;Spotify not connected&quot;&#10;                    }&#10;                }&#10;                .padding(8.dp)&#10;        )&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&quot;Error: $it&quot;, color = Color.Red)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    context: Context,&#10;    onNavigateToScreen: (Screen) -&gt; Unit&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var backPressedTime by remember { mutableStateOf(0L) }&#10;    var showExitMessage by remember { mutableStateOf(false) }&#10;    &#10;    // Handle double back press to exit&#10;    BackHandler {&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - backPressedTime &gt; 2000) {&#10;            backPressedTime = currentTime&#10;            showExitMessage = true&#10;            // Hide message after 2 seconds&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(2000)&#10;                showExitMessage = false&#10;            }&#10;        } else {&#10;            // Exit app&#10;            (context as? Activity)?.finish()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Terminal-style header&#10;        Text(&#10;            text = &quot;$ plyr_home&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Lista de opciones disponibles&#10;        val options = remember {&#10;            listOf(&#10;                MenuOption(Screen.SEARCH, &quot;&gt; search&quot;),&#10;                MenuOption(Screen.PLAYLISTS, &quot;&gt; playlists&quot;),&#10;                MenuOption(Screen.QUEUE, &quot;&gt; queue&quot;),&#10;                MenuOption(Screen.CONFIG, &quot;&gt; settings&quot;)&#10;            )&#10;        }&#10;        &#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                Text(&#10;                    text = option.title,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 20.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable {&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                            onNavigateToScreen(option.screen)&#10;                        }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Exit message&#10;        if (showExitMessage) {&#10;            Text(&#10;                text = &quot;&gt; Press back again to exit&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(top = 8.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SearchScreen(&#10;    context: Context,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var results by remember { mutableStateOf&lt;List&lt;AudioItem&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    &#10;    // Estados para resultados de Spotify&#10;    var spotifyResults by remember { mutableStateOf&lt;SpotifySearchAllResponse?&gt;(null) }&#10;    var showSpotifyResults by remember { mutableStateOf(false) }&#10;    &#10;    // Estados para paginación&#10;    var currentOffset by remember { mutableStateOf(0) }&#10;    var isLoadingMore by remember { mutableStateOf(false) }&#10;    var hasMoreResults by remember { mutableStateOf(true) }&#10;    val itemsPerPage = 10&#10;&#10;    // Estados para vista detallada de playlist/álbum&#10;    var selectedSpotifyPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedSpotifyAlbum by remember { mutableStateOf&lt;SpotifyAlbum?&gt;(null) }&#10;    var selectedItemTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    &#10;    // YouTube search manager para búsquedas locales&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Search function with pagination support&#10;    val performSearch: (String, Boolean) -&gt; Unit = { searchQuery, isLoadMore -&gt;&#10;        if (searchQuery.isNotBlank() &amp;&amp; (!isLoading || isLoadMore)) {&#10;            if (isLoadMore) {&#10;                isLoadingMore = true&#10;            } else {&#10;                isLoading = true&#10;                currentOffset = 0&#10;                results = emptyList()&#10;                spotifyResults = null&#10;                showSpotifyResults = false&#10;                hasMoreResults = true&#10;            }&#10;            error = null&#10;&#10;            coroutineScope.launch {&#10;                try {&#10;                    val searchEngine = Config.getSearchEngine(context)&#10;                    &#10;                    // Permitir override temporal con prefijos&#10;                    val (finalSearchEngine, finalQuery) = when {&#10;                        searchQuery.startsWith(&quot;yt:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;youtube&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        searchQuery.startsWith(&quot;sp:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;spotify&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        else -&gt; searchEngine to searchQuery&#10;                    }&#10;                    &#10;                    if (finalQuery.isEmpty()) {&#10;                        isLoading = false&#10;                        isLoadingMore = false&#10;                        error = &quot;Query vacía después de procesar prefijo&quot;&#10;                        return@launch&#10;                    }&#10;                    &#10;                    when (finalSearchEngine) {&#10;                        &quot;youtube&quot; -&gt; {&#10;                            // Search YouTube with detailed information&#10;                            val youtubeResults = youtubeSearchManager.searchYouTubeVideosDetailed(finalQuery)&#10;                            // Convert YouTube video info to AudioItem objects&#10;                            val newResults = youtubeResults.map { videoInfo -&gt;&#10;                                AudioItem(&#10;                                    title = videoInfo.title,&#10;                                    url = &quot;&quot;, // Use empty string for url, required by AudioItem&#10;                                    videoId = videoInfo.videoId,&#10;                                    channel = videoInfo.uploader,&#10;                                    duration = videoInfo.getFormattedDuration()&#10;                                )&#10;                            }&#10;&#10;                            if (isLoadMore) {&#10;                                results = results + newResults&#10;                            } else {&#10;                                results = newResults&#10;                            }&#10;&#10;                            hasMoreResults = newResults.size &gt;= itemsPerPage&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                        }&#10;                        &#10;                        &quot;spotify&quot; -&gt; {&#10;                            // Search Spotify with pagination&#10;                            if (Config.isSpotifyConnected(context)) {&#10;                                val accessToken = Config.getSpotifyAccessToken(context)&#10;                                if (accessToken != null) {&#10;                                    Log.d(&quot;SearchScreen&quot;, &quot; Iniciando búsqueda en Spotify: '$finalQuery'&quot;)&#10;                                    SpotifyRepository.searchAllWithPagination(accessToken, finalQuery) { searchResults: SpotifySearchAllResponse?, searchError: String? -&gt;&#10;                                        // Asegurar que las actualizaciones se ejecuten en el hilo principal&#10;                                        android.os.Handler(android.os.Looper.getMainLooper()).post {&#10;                                            if (searchError != null) {&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                error = &quot;Error searching Spotify: $searchError&quot;&#10;                                                Log.e(&quot;SearchScreen&quot;, &quot;Error searching Spotify: $searchError&quot;)&#10;                                            } else if (searchResults != null) {&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Resultados actualizados: ${searchResults.tracks.items.size} tracks, ${searchResults.albums.items.size} albums, ${searchResults.artists.items.size} artists, ${searchResults.playlists.items.size} playlists&quot;)&#10;&#10;                                                if (isLoadMore &amp;&amp; spotifyResults != null) {&#10;                                                    // Combinar resultados existentes con nuevos&#10;                                                    val combinedResults = SpotifySearchAllResponse(&#10;                                                        tracks = SpotifyTracksSearchResult(&#10;                                                            items = spotifyResults!!.tracks.items + searchResults.tracks.items,&#10;                                                            total = searchResults.tracks.total,&#10;                                                            limit = searchResults.tracks.limit,&#10;                                                            offset = searchResults.tracks.offset,&#10;                                                            next = searchResults.tracks.next&#10;                                                        ),&#10;                                                        albums = SpotifyAlbumsSearchResult(&#10;                                                            items = spotifyResults!!.albums.items + searchResults.albums.items,&#10;                                                            total = searchResults.albums.total,&#10;                                                            limit = searchResults.albums.limit,&#10;                                                            offset = searchResults.albums.offset,&#10;                                                            next = searchResults.albums.next&#10;                                                        ),&#10;                                                        artists = SpotifyArtistsSearchResult(&#10;                                                            items = spotifyResults!!.artists.items + searchResults.artists.items,&#10;                                                            total = searchResults.artists.total,&#10;                                                            limit = searchResults.artists.limit,&#10;                                                            offset = searchResults.artists.offset,&#10;                                                            next = searchResults.artists.next&#10;                                                        ),&#10;                                                        playlists = SpotifyPlaylistsSearchResult(&#10;                                                            items = spotifyResults!!.playlists.items + searchResults.playlists.items,&#10;                                                            total = searchResults.playlists.total,&#10;                                                            limit = searchResults.playlists.limit,&#10;                                                            offset = searchResults.playlists.offset,&#10;                                                            next = searchResults.playlists.next&#10;                                                        )&#10;                                                    )&#10;                                                    spotifyResults = combinedResults&#10;                                                } else {&#10;                                                    spotifyResults = searchResults&#10;                                                }&#10;&#10;                                                // Para esta implementación, como searchAllWithPagination ya obtiene todos los resultados,&#10;                                                // no hay paginación manual adicional necesaria&#10;                                                hasMoreResults = false&#10;&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                showSpotifyResults = true&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot; Estado actualizado - showSpotifyResults=$showSpotifyResults&quot;)&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                } else {&#10;                                    isLoading = false&#10;                                    isLoadingMore = false&#10;                                    error = &quot;Token de Spotify no disponible&quot;&#10;                                }&#10;                            } else {&#10;                                isLoading = false&#10;                                isLoadingMore = false&#10;                                error = &quot;Spotify no está conectado&quot;&#10;                            }&#10;                        }&#10;                        &#10;                        else -&gt; {&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                            error = &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;&#10;                            Log.w(&quot;SearchScreen&quot;, &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;)&#10;                        }&#10;                    }&#10;                    &#10;                } catch (e: Exception) {&#10;                    isLoading = false&#10;                    isLoadingMore = false&#10;                    error = &quot;Error en búsqueda: ${e.message}&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;Error en búsqueda&quot;, e)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Funciones auxiliares para operaciones de Spotify&#10;    val saveSpotifyPlaylistToLibrary: () -&gt; Unit = {&#10;        coroutineScope.launch {&#10;            try {&#10;                selectedSpotifyPlaylist?.let { playlist -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando playlist en biblioteca de Spotify: ${playlist.name}&quot;)&#10;                        SpotifyRepository.followPlaylist(accessToken, playlist.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Playlist seguida exitosamente: ${playlist.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error siguiendo playlist: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;                selectedSpotifyAlbum?.let { album -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando álbum en biblioteca de Spotify: ${album.name}&quot;)&#10;                        SpotifyRepository.saveAlbum(accessToken, album.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Álbum guardado exitosamente: ${album.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error guardando álbum: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error guardando en biblioteca de Spotify&quot;, e)&#10;            }&#10;        }&#10;    }&#10;    &#10;    val loadSpotifyPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedSpotifyPlaylist = playlist&#10;        selectedSpotifyAlbum = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;        &#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks de la playlist: ${playlist.name}&quot;)&#10;                    SpotifyRepository.getPlaylistTracks(accessToken, playlist.id) { playlistTracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (playlistTracks != null) {&#10;                            // Convertir SpotifyPlaylistTrack a SpotifyTrack&#10;                            val tracks = playlistTracks.mapNotNull { it.track }&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para la playlist: ${playlist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks de la playlist: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de playlist: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks de la playlist: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando playlist tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;    &#10;    val loadSpotifyAlbumTracks: (SpotifyAlbum) -&gt; Unit = { album -&gt;&#10;        selectedSpotifyAlbum = album&#10;        selectedSpotifyPlaylist = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;        &#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks del álbum: ${album.name}&quot;)&#10;                    SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (tracks != null) {&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para el álbum: ${album.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks del álbum: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de álbum: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks del álbum: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando album tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        when {&#10;            selectedSpotifyPlaylist != null || selectedSpotifyAlbum != null -&gt; {&#10;                // Volver de la vista detallada a los resultados de búsqueda&#10;                selectedSpotifyPlaylist = null&#10;                selectedSpotifyAlbum = null&#10;                selectedItemTracks = emptyList()&#10;            }&#10;            else -&gt; onBack()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Mostrar vista detallada o búsqueda normal&#10;        when {&#10;            selectedSpotifyPlaylist != null -&gt; {&#10;                SpotifyPlaylistDetailView(&#10;                    playlist = selectedSpotifyPlaylist!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyPlaylist = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir playlist desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;                            &#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;                            &#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;                            &#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir playlist en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;                            &#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;                            &#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;                            &#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist aleatoria&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyAlbum != null -&gt; {&#10;                SpotifyAlbumDetailView(&#10;                    album = selectedSpotifyAlbum!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyAlbum = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir álbum desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;                            &#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;                            &#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;                            &#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir álbum en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;                            &#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;                            &#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;                            &#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum aleatorio&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            else -&gt; {&#10;                // Vista normal de búsqueda&#10;                SearchMainView(&#10;                    searchQuery = searchQuery,&#10;                    onSearchQueryChange = { searchQuery = it },&#10;                    results = results,&#10;                    spotifyResults = spotifyResults,&#10;                    showSpotifyResults = showSpotifyResults,&#10;                    isLoading = isLoading,&#10;                    error = error,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                    onAlbumSelected = loadSpotifyAlbumTracks,&#10;                    onPlaylistSelected = loadSpotifyPlaylistTracks,&#10;                    onSearchTriggered = performSearch,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun QueueScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_queue&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Contenido de la cola&#10;        if (playerViewModel != null) {&#10;            val queueState by playerViewModel.queueState.collectAsStateWithLifecycle()&#10;            val currentQueue = queueState.queue&#10;            &#10;            if (currentQueue.isNotEmpty()) {&#10;                // Header de la cola&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Current queue [${currentQueue.size}]&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFFFFD93D)&#10;                        )&#10;                    )&#10;                    &#10;                    // Botón para limpiar la cola&#10;                    TextButton(&#10;                        onClick = { &#10;                            playerViewModel.clearQueue()&#10;                            Log.d(&quot;QueueScreen&quot;, &quot;Cola limpiada por el usuario&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;clear&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(Modifier.height(16.dp))&#10;                &#10;                // Lista de tracks en la cola&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(&#10;                        count = currentQueue.size,&#10;                        key = { index -&gt; currentQueue[index].id }&#10;                    ) { index -&gt;&#10;                        val track = currentQueue[index]&#10;                        val isCurrentTrack = queueState.currentIndex == index&#10;                        &#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp, horizontal = 4.dp)&#10;                                .clickable {&#10;                                    coroutineScope.launch {&#10;                                        if (queueState.currentIndex != index) {&#10;                                            playerViewModel.playQueueFromIndex(index)&#10;                                        } else {&#10;                                            playerViewModel.resumeIfPaused()&#10;                                        }&#10;                                    }&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Iniciando cola desde índice: $index&quot;)&#10;                                },&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Indicador de posición y estado&#10;                            Text(&#10;                                text = if (isCurrentTrack) &quot;♪ &quot; else &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            // Nombre del track&#10;                            MarqueeText(&#10;                                text = track.name,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFFE0E0E0) else Color(0xFFBDC3C7)&#10;                                ),&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            &#10;                            // Botón para remover de la cola&#10;                            TextButton(&#10;                                onClick = { &#10;                                    playerViewModel.removeFromQueue(index)&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Track removido de la cola en índice: $index&quot;)&#10;                                },&#10;                                modifier = Modifier.padding(start = 8.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;×&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Estado vacío&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    verticalArrangement = Arrangement.Center,&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Queue is empty&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                    &#10;                    Text(&#10;                        text = &quot;Add tracks from search to start playing&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF7F8C8D)&#10;                        ),&#10;                        modifier = Modifier.padding(top = 8.dp)&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            // PlayerViewModel no disponible&#10;            Column(&#10;                modifier = Modifier.fillMaxSize(),&#10;                verticalArrangement = Arrangement.Center,&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Player not available&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Composable para texto marquee mejorado&#10;@Composable&#10;fun MarqueeText(&#10;    text: String,&#10;    style: TextStyle,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val density = LocalDensity.current&#10;    var textWidth by remember { mutableStateOf(0) }&#10;    var containerWidth by remember { mutableStateOf(0) }&#10;    val shouldAnimate = textWidth &gt; containerWidth &amp;&amp; containerWidth &gt; 0&#10;    &#10;    val infiniteTransition = rememberInfiniteTransition(label = &quot;marquee&quot;)&#10;    &#10;    val animatedOffset by infiniteTransition.animateFloat(&#10;        initialValue = 0f,&#10;        targetValue = if (shouldAnimate) -(textWidth - containerWidth).toFloat() else 0f,&#10;        animationSpec = infiniteRepeatable(&#10;            animation = tween(&#10;                durationMillis = if (shouldAnimate) maxOf(text.length * 100, 3000) else 0,&#10;                easing = LinearEasing,&#10;                delayMillis = 1500 // Pausa al inicio&#10;            ),&#10;            repeatMode = RepeatMode.Restart&#10;        ),&#10;        label = &quot;marquee_animation&quot;&#10;    )&#10;    &#10;    Box(&#10;        modifier = modifier&#10;            .clipToBounds()&#10;            .onSizeChanged { size -&gt;&#10;                containerWidth = size.width&#10;            }&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            style = style,&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Visible,&#10;            softWrap = false,&#10;            modifier = Modifier&#10;                .onSizeChanged { size -&gt;&#10;                    textWidth = size.width&#10;                }&#10;                .offset(x = with(density) { animatedOffset.toDp() })&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ConfigScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    onThemeChanged: (String) -&gt; Unit = {}&#10;) {&#10;    var selectedTheme by remember { mutableStateOf(Config.getTheme(context)) }&#10;    var selectedSearchEngine by remember { mutableStateOf(Config.getSearchEngine(context)) }&#10;    &#10;    // Estado para Spotify&#10;    var isSpotifyConnected by remember { mutableStateOf(Config.isSpotifyConnected(context)) }&#10;    var isConnecting by remember { mutableStateOf(false) }&#10;    var connectionMessage by remember { mutableStateOf(&quot;&quot;) }&#10;    &#10;    LaunchedEffect(selectedTheme) {&#10;        Config.setTheme(context, selectedTheme)&#10;        onThemeChanged(selectedTheme)&#10;    }&#10;    &#10;    LaunchedEffect(selectedSearchEngine) {&#10;        Config.setSearchEngine(context, selectedSearchEngine)&#10;    }&#10;    &#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_config&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        &#10;        // Selector de tema&#10;        Text(&#10;            text = &quot;&gt; theme&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                //color = MaterialTheme.colorScheme.secondary&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;        &#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Dark&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { &#10;                        selectedTheme = &quot;dark&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Text(&#10;                    text = &quot;dark&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedTheme == &quot;dark&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            &#10;            // Opción Light&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { &#10;                        selectedTheme = &quot;light&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedTheme == &quot;light&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Selector de motor de búsqueda&#10;        Text(&#10;            text = &quot;&gt; search_engine&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                //color = MaterialTheme.colorScheme.secondary&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;        &#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Spotify&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { &#10;                        selectedSearchEngine = &quot;spotify&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;spotify&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedSearchEngine == &quot;spotify&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color =MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            // Opción YouTube&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { &#10;                        selectedSearchEngine = &quot;youtube&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;youtube&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedSearchEngine == &quot;youtube&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(30.dp))&#10;        &#10;        // Información de uso&#10;        Column {&#10;            Text(&#10;                text = &quot;&gt; info&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    //color = MaterialTheme.colorScheme.secondary&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            &#10;            Text(&#10;                text = &quot;    ● don't pirate music!\n    ● Change engine with yt: / sp:&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                lineHeight = 18.sp&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;        &#10;        // Escuchar eventos de autenticación de Spotify&#10;        LaunchedEffect(Unit) {&#10;            SpotifyAuthEvent.setAuthCallback { success, message -&gt;&#10;                isConnecting = false&#10;                isSpotifyConnected = success&#10;                connectionMessage = message ?: if (success) &quot;connected&quot; else &quot;error&quot;&#10;            }&#10;        }&#10;        &#10;        // Limpiar callback al salir&#10;        DisposableEffect(Unit) {&#10;            onDispose {&#10;                SpotifyAuthEvent.clearCallback()&#10;            }&#10;        }&#10;        &#10;        // Status unificado de plyr y Spotify&#10;        Column {&#10;            Text(&#10;                text = &quot;&gt; sptfy_status&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    //color = MaterialTheme.colorScheme.secondary&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;&#10;            // Estado de Spotify (clickeable)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { &#10;                        if (isSpotifyConnected) {&#10;                            // Desconectar Spotify&#10;                            Config.clearSpotifyTokens(context)&#10;                            isSpotifyConnected = false&#10;                            connectionMessage = &quot;disconnected&quot;&#10;                        } else {&#10;                            // Verificar que las credenciales estén configuradas&#10;                            if (!Config.hasSpotifyCredentials(context)) {&#10;                                connectionMessage = &quot;credentials_required&quot;&#10;                            } else {&#10;                                // Conectar con Spotify&#10;                                isConnecting = true&#10;                                connectionMessage = &quot;opening_browser...&quot;&#10;                                try {&#10;                                    val success = SpotifyRepository.startOAuthFlow(context)&#10;                                    if (success) {&#10;                                        connectionMessage = &quot;check_browser&quot;&#10;                                    } else {&#10;                                        connectionMessage = &quot;error_starting_oauth&quot;&#10;                                        isConnecting = false&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    connectionMessage = &quot;error: ${e.message}&quot;&#10;                                    isConnecting = false&#10;                                }&#10;                            }&#10;                        }&#10;                        haptic.performHapticFeedback(HapticFeedbackType.LongPress)&#10;                    }&#10;                    .padding(vertical = 4.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;    ● client:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Estado de conexión&#10;                    Text(&#10;                        text = when {&#10;                            connectionMessage == &quot;credentials_required&quot; -&gt; &quot;configure credentials first&quot;&#10;                            connectionMessage.isNotEmpty() -&gt; connectionMessage&#10;                            isSpotifyConnected &amp;&amp; Config.hasSpotifyCredentials(context) -&gt; &quot;connected&quot;&#10;                            Config.hasSpotifyCredentials(context) -&gt; &quot;disconnected&quot;&#10;                            else -&gt; &quot;credentials required&quot;&#10;                        },&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = when {&#10;                                connectionMessage == &quot;credentials_required&quot; -&gt; Color(0xFFE74C3C)&#10;                                !Config.hasSpotifyCredentials(context) -&gt; Color(0xFFE74C3C)&#10;                                isSpotifyConnected -&gt; Color(0xFF1DB954)&#10;                                else -&gt; Color(0xFF95A5A6)&#10;                            }&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Configuración de API de Spotify&#10;        SpotifyApiConfigSection(context = context)&#10;&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PlaylistsScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var dragOffsetX by remember { mutableStateOf(0f) }&#10;    &#10;    // Repositorio local y manager de búsqueda&#10;    val localRepository = remember { PlaylistLocalRepository(context) }&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Estado para las playlists y autenticación&#10;    val playlistsFromDB by localRepository.getAllPlaylistsLiveData().asFlow().collectAsStateWithLifecycle(initialValue = emptyList())&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var isSpotifyConnected by remember { mutableStateOf(Config.isSpotifyConnected(context)) }&#10;    var isSyncing by remember { mutableStateOf(false) }&#10;    var isEditing by remember { mutableStateOf(false) }&#10;    &#10;    // Convertir entidades a SpotifyPlaylist para compatibilidad con UI existente&#10;    val playlists = playlistsFromDB.map { it.toSpotifyPlaylist() }&#10;    &#10;    // Estado para mostrar tracks de una playlist&#10;    var selectedPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedPlaylistEntity by remember { mutableStateOf&lt;PlaylistEntity?&gt;(null) }&#10;    var playlistTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    var isSearchingYouTubeIds by remember { mutableStateOf(false) }&#10;    var showCreatePlaylistScreen by remember { mutableStateOf(false) }&#10;    &#10;    // Tracks observados desde la base de datos&#10;    val tracksFromDB by if (selectedPlaylistEntity != null) {&#10;        localRepository.getTracksByPlaylistLiveData(selectedPlaylistEntity!!.spotifyId)&#10;            .asFlow()&#10;            .collectAsStateWithLifecycle(initialValue = emptyList())&#10;    } else {&#10;        remember { mutableStateOf(emptyList&lt;TrackEntity&gt;()) }&#10;    }&#10;    &#10;    // Actualizar tracks cuando cambien en la DB&#10;    LaunchedEffect(tracksFromDB) {&#10;        if (selectedPlaylistEntity != null) {&#10;            playlistTracks = tracksFromDB.map { it.toSpotifyTrack() }&#10;        }&#10;    }&#10;    &#10;    // Función para cargar playlists con sincronización automática&#10;    val loadPlaylists = {&#10;        if (!isSpotifyConnected) {&#10;            error = &quot;Spotify no está conectado&quot;&#10;        } else {&#10;            isLoading = true&#10;            error = null&#10;            &#10;            // Usar corrutina para operaciones asíncronas&#10;            coroutineScope.launch {&#10;                try {&#10;                    val playlistEntities = localRepository.getPlaylistsWithAutoSync()&#10;                    isLoading = false&#10;                    // Las playlists se actualizan automáticamente a través del LiveData&#10;                } catch (e: Exception) {&#10;                    isLoading = false&#10;                    error = &quot;Error cargando playlists: ${e.message}&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Función para cargar tracks de una playlist&#10;    val loadPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedPlaylist = playlist&#10;        selectedPlaylistEntity = playlistsFromDB.find { it.spotifyId == playlist.id }&#10;        isLoadingTracks = true&#10;        &#10;        if (selectedPlaylistEntity == null) {&#10;            isLoadingTracks = false&#10;            error = &quot;Playlist no encontrada en base de datos local&quot;&#10;        } else {&#10;            // Usar corrutina para operaciones asíncronas&#10;            coroutineScope.launch {&#10;                try {&#10;                    val trackEntities = localRepository.getTracksWithAutoSync(playlist.id)&#10;                    isLoadingTracks = false&#10;                    // Los tracks se actualizan automáticamente a través del LiveData&#10;                    &#10;                    // NOTA: Ya no se necesita búsqueda masiva de YouTube IDs&#10;                    // Los IDs se obtienen automáticamente cuando el usuario hace click en cada canción&#10;                    Log.d(&quot;PlaylistScreen&quot;, &quot;✅ Tracks cargados para playlist: ${playlist.name}. IDs de YouTube se obtendrán bajo demanda.&quot;)&#10;                } catch (e: Exception) {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Error cargando tracks: ${e.message}&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Función para forzar sincronización completa&#10;    val forceSyncAll = {&#10;        if (!isSpotifyConnected) {&#10;            error = &quot;Spotify no está conectado&quot;&#10;        } else {&#10;            isSyncing = true&#10;            error = null&#10;            &#10;            coroutineScope.launch {&#10;                try {&#10;                    val success = localRepository.forceSyncAll()&#10;                    isSyncing = false&#10;                    if (!success) {&#10;                        error = &quot;Error en la sincronización&quot;&#10;                    }&#10;                } catch (e: Exception) {&#10;                    isSyncing = false&#10;                    error = &quot;Error en sincronización: ${e.message}&quot;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Cargar playlists al iniciar si está conectado&#10;    LaunchedEffect(isSpotifyConnected) {&#10;        if (isSpotifyConnected) {&#10;            loadPlaylists()&#10;        }&#10;    }&#10;    &#10;    // Cleanup del YouTubeSearchManager&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            youtubeSearchManager.cleanup()&#10;        }&#10;    }&#10;    &#10;    // Manejar botón de retroceso del sistema&#10;    BackHandler {&#10;        if (selectedPlaylist != null) {&#10;            selectedPlaylist = null&#10;            playlistTracks = emptyList()&#10;        } else {&#10;            onBack()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        if (showCreatePlaylistScreen) {&#10;            CreateSpotifyPlaylistScreen(&#10;                onBack = { showCreatePlaylistScreen = false },&#10;                onPlaylistCreated = { showCreatePlaylistScreen = false; loadPlaylists() }&#10;            )&#10;            return@Column&#10;        }&#10;        // Header&#10;        Text(&#10;            text = if (selectedPlaylist == null) &quot;$ plyr_lists&quot; else &quot;$ ${selectedPlaylist!!.name}&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Botón de sincronización manual (solo visible si está conectado y no es una playlist individual)&#10;        if (isSpotifyConnected &amp;&amp; selectedPlaylist == null) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Botón de sincronización&#10;                Text(&#10;                    text = if (isSyncing) &quot;&lt;syncing...&gt;&quot; else &quot;&lt;sync&gt;&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (isSyncing) Color(0xFFFFD93D) else Color(0xFF4ECDC4)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable(enabled = !isSyncing) { &#10;                            forceSyncAll()&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                        }&#10;                        .padding(8.dp)&#10;                )&#10;                // New button&#10;                Text(&#10;                    text = &quot;&lt;new&gt;&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF4ECDC4)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable(enabled = !isSyncing) {&#10;                            // Set state to show create playlist screen&#10;                            showCreatePlaylistScreen = true&#10;                        }&#10;                        .padding(8.dp)&#10;                )&#10;                &#10;                // Indicador de estado&#10;                Text(&#10;                    text = when {&#10;                        isSyncing -&gt; &quot;Sincronizando...&quot;&#10;                        playlists.isNotEmpty() -&gt; &quot;${playlists.size} playlists&quot;&#10;                        else -&gt; &quot;Sin datos locales&quot;&#10;                    },&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.align(Alignment.CenterVertically)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        &#10;        when {&#10;            !isSpotifyConnected -&gt; {&#10;                // Estado no conectado&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;● &quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFFFF6B6B)&#10;                        )&#10;                    )&#10;                    Text(&#10;                        text = &quot;$ spotify_not_connected&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 14.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Conecta tu cuenta en Config primero&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;            &#10;            selectedPlaylist != null -&gt; {&#10;                // Vista de tracks de playlist&#10;                if (isLoadingTracks) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;● &quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFFFD93D)&#10;                            )&#10;                        )&#10;                        Text(&#10;                            text = &quot;$ loading_tracks...&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 14.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Estados para los botones de control&#10;                    var isRandomizing by remember { mutableStateOf(false) }&#10;                    var isStarting by remember { mutableStateOf(false) }&#10;                    var randomJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;                    var startJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;                    &#10;                    // Función para parar todas las reproducciones&#10;                    fun stopAllPlayback() {&#10;                        isRandomizing = false&#10;                        isStarting = false&#10;                        randomJob?.cancel()&#10;                        startJob?.cancel()&#10;                        randomJob = null&#10;                        startJob = null&#10;                        // Cancelar espera de canción y pausar el reproductor&#10;                        playerViewModel?.cancelWaitForSong()&#10;                        playerViewModel?.pausePlayer()&#10;                    }&#10;                    &#10;                    &#10;                    // Función para randomización simplificada - solo reproduce un track aleatorio&#10;                    fun startRandomizing() {&#10;                        stopAllPlayback()&#10;                        isRandomizing = true&#10;                        &#10;                        if (playlistTracks.isNotEmpty() &amp;&amp; playerViewModel != null) {&#10;                            randomJob = GlobalScope.launch {&#10;                                val randomTrack = playlistTracks.random()&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == randomTrack.id }&#10;                                &#10;                                println(&quot;� RANDOM: ${randomTrack.getDisplayName()}&quot;)&#10;                                &#10;                                if (trackEntity != null &amp;&amp; playerViewModel != null) {&#10;                                    // Reproducir la canción usando PlayerViewModel&#10;                                    playerViewModel?.initializePlayer()&#10;                                    &#10;                                    // Establecer la playlist completa con el track aleatorio seleccionado&#10;                                    val currentTrackIndex = tracksFromDB.indexOf(trackEntity)&#10;                                    if (currentTrackIndex &gt;= 0) {&#10;                                        playerViewModel?.setCurrentPlaylist(tracksFromDB, currentTrackIndex)&#10;                                    }&#10;                                    &#10;                                    // Cargar y reproducir - PlayerViewModel manejará la navegación automática&#10;                                    playerViewModel?.loadAudioFromTrack(trackEntity)&#10;                                } else {&#10;                                    println(&quot;⚠️ TrackEntity no encontrado para: ${randomTrack.getDisplayName()}&quot;)&#10;                                }&#10;                                &#10;                                isRandomizing = false&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    // Función para reproducción ordenada simplificada - solo inicia desde el primer track&#10;                    fun startOrderedPlayback() {&#10;                        stopAllPlayback()&#10;                        isStarting = true&#10;                        &#10;                        if (playlistTracks.isNotEmpty() &amp;&amp; playerViewModel != null) {&#10;                            startJob = GlobalScope.launch {&#10;                                val firstTrack = playlistTracks.first()&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == firstTrack.id }&#10;                                &#10;                                println(&quot; START [${selectedPlaylist!!.name}]: ${firstTrack.getDisplayName()}&quot;)&#10;                                &#10;                                if (trackEntity != null &amp;&amp; playerViewModel != null) {&#10;                                    // Reproducir la canción usando PlayerViewModel&#10;                                    playerViewModel?.initializePlayer()&#10;                                    &#10;                                    // Establecer la playlist completa desde el inicio (índice 0)&#10;                                    val trackEntityIndex = tracksFromDB.indexOf(trackEntity)&#10;                                    if (trackEntityIndex &gt;= 0) {&#10;                                        playerViewModel?.setCurrentPlaylist(tracksFromDB, trackEntityIndex)&#10;                                    }&#10;                                    &#10;                                    // Cargar y reproducir - PlayerViewModel manejará la navegación automática&#10;                                    playerViewModel?.loadAudioFromTrack(trackEntity)&#10;                                } else {&#10;                                    println(&quot;⚠️ TrackEntity no encontrado para: ${firstTrack.getDisplayName()}&quot;)&#10;                                }&#10;                                &#10;                                isStarting = false&#10;                            }&#10;                        }&#10;                    }&#10;                    &#10;                    // Limpiar jobs al salir&#10;                    DisposableEffect(selectedPlaylist) {&#10;                        onDispose {&#10;                            randomJob?.cancel()&#10;                            startJob?.cancel()&#10;                        }&#10;                    }&#10;                    &#10;                    Column {&#10;                        // Botones de control&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(bottom = 16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            // Botón &lt;start&gt;&#10;                            Text(&#10;                                text = if (isStarting) &quot;&lt;stop&gt;&quot; else &quot;&lt;start&gt;&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 16.sp,&#10;                                    color = if (isStarting) Color(0xFFFF6B6B) else Color(0xFF4ECDC4)&#10;                                ),&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        if (isStarting) {&#10;                                            stopAllPlayback()&#10;                                        } else {&#10;                                            startOrderedPlayback()&#10;                                        }&#10;                                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                    }&#10;                                    .padding(8.dp)&#10;                            )&#10;                            &#10;                            // Botón &lt;rand&gt;&#10;                            Text(&#10;                                text = if (isRandomizing) &quot;&lt;stop&gt;&quot; else &quot;&lt;rand&gt;&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 16.sp,&#10;                                    color = if (isRandomizing) Color(0xFFFF6B6B) else Color(0xFFFFD93D)&#10;                                ),&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        if (isRandomizing) {&#10;                                            stopAllPlayback()&#10;                                        } else {&#10;                                            startRandomizing()&#10;                                        }&#10;                                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                    }&#10;                                    .padding(8.dp)&#10;                            )&#10;                            // Botón &lt;edit&gt;&#10;                            Text(&#10;                                text = if (isEditing) &quot;&lt;done&gt;&quot; else &quot;&lt;edit&gt;&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 16.sp,&#10;                                    color = if (isEditing) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        isEditing = !isEditing&#10;                                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                    }&#10;                                    .padding(8.dp)&#10;                            )&#10;                        }&#10;                        if (isEditing) {&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(vertical = 8.dp),&#10;                                horizontalAlignment = Alignment.CenterHorizontally&#10;                            ) {&#10;                                // Botón para añadir canción&#10;                                Text(&#10;                                    text = &quot;&lt;add song&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color(0xFF4ECDC4)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable { /* TODO: lógica para añadir canción */ }&#10;                                        .padding(8.dp)&#10;                                )&#10;                                // Botón para eliminar canción&#10;                                Text(&#10;                                    text = &quot;&lt;remove song&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color(0xFFFF6B6B)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable { /* TODO: lógica para eliminar canción */ }&#10;                                        .padding(8.dp)&#10;                                )&#10;                                // Cambiar título&#10;                                var newTitle by remember { mutableStateOf(selectedPlaylist?.name ?: &quot;&quot;) }&#10;                                OutlinedTextField(&#10;                                    value = newTitle,&#10;                                    onValueChange = { newTitle = it },&#10;                                    label = { Text(&quot;Playlist Title&quot;) },&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                )&#10;                                Text(&#10;                                    text = &quot;&lt;save title&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color(0xFF4ECDC4)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable { /* TODO: lógica para guardar título */ }&#10;                                        .padding(8.dp)&#10;                                )&#10;                                // Cambiar descripción&#10;                                var newDesc by remember { mutableStateOf(selectedPlaylist?.description ?: &quot;&quot;) }&#10;                                OutlinedTextField(&#10;                                    value = newDesc,&#10;                                    onValueChange = { newDesc = it },&#10;                                    label = { Text(&quot;Playlist Description&quot;) },&#10;                                    modifier = Modifier.fillMaxWidth()&#10;                                )&#10;                                Text(&#10;                                    text = &quot;&lt;save desc&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color(0xFF4ECDC4)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable { /* TODO: lógica para guardar descripción */ }&#10;                                        .padding(8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        // Lista de tracks&#10;                        LazyColumn(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            contentPadding = PaddingValues(bottom = 16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(playlistTracks.size) { index -&gt;&#10;                                val track = playlistTracks[index]&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == track.id }&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            // Create TrackEntity from SpotifyTrack and play&#10;                                            val trackEntity = TrackEntity(&#10;                                                id = &quot;spotify_${System.currentTimeMillis()}_${track.id}&quot;,&#10;                                                playlistId = &quot;spotify_playlist&quot;,&#10;                                                spotifyTrackId = track.id,&#10;                                                name = track.name,&#10;                                                artists = track.getArtistNames(),&#10;                                                youtubeVideoId = null, // Se buscará dinámicamente&#10;                                                audioUrl = null, // Se obtendrá dinámicamente&#10;                                                position = index,&#10;                                                lastSyncTime = System.currentTimeMillis()&#10;                                            )&#10;                                            &#10;                                            // Add to player queue and play&#10;                                            playerViewModel?.let { viewModel -&gt;&#10;                                                CoroutineScope(Dispatchers.Main).launch {&#10;                                                    try {&#10;                                                        // Create playlist from current tracks&#10;                                                        val playlistEntities = playlistTracks.mapIndexed { idx, spotifyTrack -&gt;&#10;                                                            TrackEntity(&#10;                                                                id = &quot;spotify_${System.currentTimeMillis()}_${spotifyTrack.id}_$idx&quot;,&#10;                                                                playlistId = &quot;spotify_playlist&quot;,&#10;                                                                spotifyTrackId = spotifyTrack.id,&#10;                                                                name = spotifyTrack.name,&#10;                                                                artists = spotifyTrack.getArtistNames(),&#10;                                                                youtubeVideoId = null,&#10;                                                                audioUrl = null,&#10;                                                                position = idx,&#10;                                                                lastSyncTime = System.currentTimeMillis()&#10;                                                            )&#10;                                                        }&#10;                                                        &#10;                                                        // Set current playlist and play from index&#10;                                                        viewModel.setCurrentPlaylist(playlistEntities, index)&#10;                                                        viewModel.loadAudioFromTrack(trackEntity)&#10;                                                    } catch (e: Exception) {&#10;                                                        Log.e(&quot;PlaylistScreen&quot;, &quot;Error playing track: ${e.message}&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                        .padding(8.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;${index + 1}. &quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        )&#10;                                    )&#10;                                    &#10;                                    Column(modifier = Modifier.weight(1f)) {&#10;                                        Text(&#10;                                            text = track.name,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFFE0E0E0)&#10;                                            ),&#10;                                            maxLines = 1,&#10;                                            overflow = TextOverflow.Ellipsis&#10;                                        )&#10;                                        &#10;                                        Text(&#10;                                            text = track.getArtistNames(),&#10;                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFF95A5A6)&#10;                                            ),&#10;                                            maxLines = 1,&#10;                                            overflow = TextOverflow.Ellipsis&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            &#10;            else -&gt; {&#10;                // Vista principal de playlists&#10;                if (isLoading || isSyncing) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (isSyncing) &quot;$ syncing_from_spotify...&quot; else &quot;$ loading_playlists...&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFFFD93D)&#10;                            )&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Estado cuando no está cargando ni sincronizando&#10;                    if (playlists.isEmpty()) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No playlists found&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    } else {&#10;                        // Grilla de portadas de playlists&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Adaptive(minSize = 150.dp),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            contentPadding = PaddingValues(bottom = 16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            items(playlists.size) { index -&gt;&#10;                                val playlist = playlists[index]&#10;                                val playlistEntity = playlistsFromDB.find { it.spotifyId == playlist.id }&#10;&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            selectedPlaylist = playlist&#10;                                            loadPlaylistTracks(playlist)&#10;                                        },&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                ) {&#10;                                    // Portada de la playlist&#10;                                    AsyncImage(&#10;                                        model = playlistEntity?.imageUrl,&#10;                                        contentDescription = &quot;Portada de ${playlist.name}&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(150.dp)&#10;                                            .clip(RoundedCornerShape(8.dp)),&#10;                                        placeholder = null,&#10;                                        error = null,&#10;                                        fallback = null&#10;                                    )&#10;&#10;                                    // Nombre de la playlist (opcional, se puede quitar si solo quieres las portadas)&#10;                                    Text(&#10;                                        text = playlist.name,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFE0E0E0)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 8.dp),&#10;                                        maxLines = 2,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotifyApiConfigSection(context: Context) {&#10;    var isExpanded by remember { mutableStateOf(false) }&#10;    var clientId by remember { mutableStateOf(Config.getSpotifyClientId(context) ?: &quot;&quot;) }&#10;    var clientSecret by remember { mutableStateOf(Config.getSpotifyClientSecret(context) ?: &quot;&quot;) }&#10;    val haptic = LocalHapticFeedback.current&#10;    &#10;    Column {&#10;        // Campo principal de API - similar al formato del cliente&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { &#10;                    isExpanded = !isExpanded&#10;                    haptic.performHapticFeedback(HapticFeedbackType.LongPress)&#10;                }&#10;                .padding(vertical = 4.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;    ● api:&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                )&#10;            )&#10;            &#10;            Text(&#10;                text = if (Config.hasSpotifyCredentials(context)) &quot;configured&quot; else &quot;not_configured&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 12.sp,&#10;                    color = if (Config.hasSpotifyCredentials(context)) Color(0xFF1DB954) else Color(0xFFE74C3C)&#10;                )&#10;            )&#10;        }&#10;        &#10;        // Desplegable con campos de configuración&#10;        if (isExpanded) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(start = 16.dp, top = 8.dp)&#10;            ) {&#10;                // Campos de entrada&#10;                Text(&#10;                    text = &quot;      client_id:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = clientId,&#10;                    onValueChange = { &#10;                        clientId = it&#10;                        Config.setSpotifyClientId(context, it)&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 8.dp),&#10;                    textStyle = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp&#10;                    ),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = Color(0xFF1DB954),&#10;                        unfocusedBorderColor = Color(0xFF95A5A6),&#10;                        focusedTextColor = Color(0xFFECF0F1),&#10;                        unfocusedTextColor = Color(0xFFBDC3C7)&#10;                    ),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;enter your spotify client id&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF7F8C8D)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;                &#10;                Text(&#10;                    text = &quot;      client_secret:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;                &#10;                OutlinedTextField(&#10;                    value = clientSecret,&#10;                    onValueChange = { &#10;                        clientSecret = it&#10;                        Config.setSpotifyClientSecret(context, it)&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp),&#10;                    textStyle = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp&#10;                    ),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = Color(0xFF1DB954),&#10;                        unfocusedBorderColor = Color(0xFF95A5A6),&#10;                        focusedTextColor = Color(0xFFECF0F1),&#10;                        unfocusedTextColor = Color(0xFFBDC3C7)&#10;                    ),&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;enter your spotify client secret&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF7F8C8D)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;                &#10;                // Explicación detallada&#10;                Column(&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;      &gt; how to get spotify api credentials:&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 11.sp,&#10;                            color = Color(0xFF3498DB)&#10;                        ),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;                    &#10;                    val instructions = listOf(&#10;                        &quot;1. go to https://developer.spotify.com/dashboard&quot;,&#10;                        &quot;2. log in with your spotify account&quot;,&#10;                        &quot;3. click 'create app'&quot;,&#10;                        &quot;4. fill app name (e.g., 'plyr mobile')&quot;,&#10;                        &quot;5. set redirect uri: 'plyr://spotify/callback'&quot;,&#10;                        &quot;6. select 'mobile' and 'web api'&quot;,&#10;                        &quot;7. click 'save'&quot;,&#10;                        &quot;8. copy client id and client secret&quot;,&#10;                        &quot;9. paste them in the fields above&quot;&#10;                    )&#10;                    &#10;                    instructions.forEach { instruction -&gt;&#10;                        Text(&#10;                            text = &quot;        $instruction&quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 10.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.padding(bottom = 2.dp)&#10;                        )&#10;                    }&#10;                    &#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    &#10;                    Text(&#10;                        text = &quot;      note: these credentials are stored locally&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF7F8C8D)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotifyPlaylistDetailView(&#10;    playlist: SpotifyPlaylist,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onBack: () -&gt; Unit,&#10;    onStart: () -&gt; Unit,&#10;    onRandom: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header con botón de retroceso&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;&lt;&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { onBack() }&#10;                    .padding(end = 8.dp)&#10;            )&#10;            Text(&#10;                text = &quot;$ ${playlist.name}&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.weight(1f),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;        &#10;        // Información de la playlist&#10;        playlist.description?.let { description -&gt;&#10;            Text(&#10;                text = description,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp),&#10;                maxLines = 2,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;        Text(&#10;            text = &quot;Tracks: ${playlist.getTrackCount()}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color(0xFF95A5A6)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Botones de acción&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;&#10;            ActionButton(&#10;                text = &quot;&lt;start&gt;&quot;,&#10;                color = Color(0xFF4ECDC4),&#10;                onClick = onStart,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;rand&gt;&quot;,&#10;                color = Color(0xFFFFD93D),&#10;                onClick = onRandom,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;save&gt;&quot;,&#10;                color = Color(0xFF7FB069),&#10;                onClick = onSave,&#10;                enabled = true&#10;            )&#10;        }&#10;        &#10;        // Estados de carga y error&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        &#10;        error?.let {&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;        }&#10;        &#10;        // Lista de tracks&#10;        if (tracks.isNotEmpty()) {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentPadding = PaddingValues(bottom = 16.dp)&#10;            ) {&#10;                items(tracks.size) { index -&gt;&#10;                    val track = tracks[index]&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                // Reproducir track específico&#10;                                Log.d(&quot;SpotifyPlaylist&quot;, &quot; Track seleccionado: ${track.name}&quot;)&#10;                                &#10;                                playerViewModel?.let { viewModel -&gt;&#10;                                    // Convertir todos los tracks de la playlist a TrackEntity&#10;                                    val trackEntities = tracks.mapIndexed { trackIndex, spotifyTrack -&gt;&#10;                                        TrackEntity(&#10;                                            id = &quot;spotify_${playlist.id}_${spotifyTrack.id}&quot;,&#10;                                            playlistId = playlist.id,&#10;                                            spotifyTrackId = spotifyTrack.id,&#10;                                            name = spotifyTrack.name,&#10;                                            artists = spotifyTrack.getArtistNames(),&#10;                                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                                            audioUrl = null,&#10;                                            position = trackIndex,&#10;                                            lastSyncTime = System.currentTimeMillis()&#10;                                        )&#10;                                    }&#10;                                    &#10;                                    // Establecer la playlist completa y comenzar desde el track seleccionado&#10;                                    viewModel.setCurrentPlaylist(trackEntities, index)&#10;                                    &#10;                                    // Buscar y reproducir el track seleccionado&#10;                                    val selectedTrackEntity = trackEntities[index]&#10;                                    coroutineScope.launch {&#10;                                        try {&#10;                                            viewModel.loadAudioFromTrack(selectedTrackEntity)&#10;                                            Log.d(&quot;SpotifyPlaylist&quot;, &quot; Reproduciendo track ${index + 1}/${trackEntities.size}: ${selectedTrackEntity.name}&quot;)&#10;                                        } catch (e: Exception) {&#10;                                            Log.e(&quot;SpotifyPlaylist&quot;, &quot;Error al reproducir track de playlist&quot;, e)&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                            .padding(vertical = 4.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;                        &#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = track.name ?: &quot;Sin título&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                            Text(&#10;                                text = track.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                        Text(&#10;                            text = track.getDurationText(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SpotifyAlbumDetailView(&#10;    album: SpotifyAlbum,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onBack: () -&gt; Unit,&#10;    onStart: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope,&#10;    onRandom: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header con botón de retroceso&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;&lt;&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { onBack() }&#10;                    .padding(end = 8.dp)&#10;            )&#10;            Text(&#10;                text = &quot;$ ${album.name}&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.weight(1f),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;        &#10;        // Información del álbum&#10;        Text(&#10;            text = &quot;Artist: ${album.getArtistNames()}&quot;,&#10;            style = MaterialTheme.typography.bodySmall.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color(0xFF95A5A6)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 4.dp),&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Ellipsis&#10;        )&#10;        &#10;        album.release_date?.let { releaseDate -&gt;&#10;            Text(&#10;                text = &quot;Released: $releaseDate&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 4.dp)&#10;            )&#10;        }&#10;        &#10;        Text(&#10;            text = &quot;Tracks: ${album.total_tracks ?: tracks.size}&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color(0xFF95A5A6)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Botones de acción&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            ActionButton(&#10;                text = &quot;&lt;start&gt;&quot;,&#10;                color = Color(0xFF4ECDC4),&#10;                onClick = onStart,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;save&gt;&quot;,&#10;                color = Color(0xFF7FB069),&#10;                onClick = onSave,&#10;                enabled = true&#10;            )&#10;        }&#10;        &#10;        // Estados de carga y error&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;        &#10;        error?.let {&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;        }&#10;        &#10;        // Lista de tracks&#10;        if (tracks.isNotEmpty()) {&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentPadding = PaddingValues(bottom = 16.dp)&#10;            ) {&#10;                items(tracks.size) { index -&gt;&#10;                    val track = tracks[index]&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                // Reproducir track específico&#10;                                Log.d(&quot;SpotifyAlbum&quot;, &quot; Track seleccionado: ${track.name}&quot;)&#10;                                &#10;                                playerViewModel?.let { viewModel -&gt;&#10;                                    // Convertir todos los tracks del álbum a TrackEntity&#10;                                    val trackEntities = tracks.mapIndexed { trackIndex, spotifyTrack -&gt;&#10;                                        TrackEntity(&#10;                                            id = &quot;spotify_${album.id}_${spotifyTrack.id}&quot;,&#10;                                            playlistId = album.id,&#10;                                            spotifyTrackId = spotifyTrack.id,&#10;                                            name = spotifyTrack.name,&#10;                                            artists = spotifyTrack.getArtistNames(),&#10;                                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                                            audioUrl = null,&#10;                                            position = trackIndex,&#10;                                            lastSyncTime = System.currentTimeMillis()&#10;                                        )&#10;                                    }&#10;                                    &#10;                                    // Establecer la playlist completa y comenzar desde el track seleccionado&#10;                                    viewModel.setCurrentPlaylist(trackEntities, index)&#10;                                    &#10;                                    // Buscar y reproducir el track seleccionado&#10;                                    val selectedTrackEntity = trackEntities[index]&#10;                                    coroutineScope.launch {&#10;                                        try {&#10;                                            viewModel.loadAudioFromTrack(selectedTrackEntity)&#10;                                            Log.d(&quot;SpotifyAlbum&quot;, &quot; Reproduciendo track ${index + 1}/${trackEntities.size}: ${selectedTrackEntity.name}&quot;)&#10;                                        } catch (e: Exception) {&#10;                                            Log.e(&quot;SpotifyAlbum&quot;, &quot;Error al reproducir track de álbum&quot;, e)&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                            .padding(vertical = 4.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = track.name ?: &quot;Sin título&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                            Text(&#10;                                text = track.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;                        Text(&#10;                            text = track.getDurationText(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ActionButton(&#10;    text: String,&#10;    color: Color,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    Text(&#10;        text = text,&#10;        style = MaterialTheme.typography.bodyMedium.copy(&#10;            fontFamily = FontFamily.Monospace,&#10;            fontSize = 16.sp,&#10;            color = if (enabled) color else Color(0xFF95A5A6)&#10;        ),&#10;        modifier = Modifier&#10;            .clickable(enabled = enabled) { onClick() }&#10;            .padding(8.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;fun SpotifySearchResultsView(&#10;    results: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onTrackSelectedFromSearch: (SpotifyTrack, List&lt;SpotifyTrack&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (results.tracks.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ tracks [${results.tracks.items.size}]&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // Changed from LazyColumn to Column for better scroll behavior&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;            ) {&#10;                results.tracks.items.forEachIndexed { index, track -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                onTrackSelectedFromSearch(track, results.tracks.items, index)&#10;                            }&#10;                            .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = track.name ?: &quot;Unknown Track&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                            Text(&#10;                                text = track.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                        }&#10;&#10;                        Text(&#10;                            text = track.getDurationText(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (results.albums.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ albums [${results.albums.items.size}]&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            LazyRow(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(horizontal = 8.dp)&#10;            ) {&#10;                items(results.albums.items.size) { index -&gt;&#10;                    val album = results.albums.items[index]&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .width(120.dp)&#10;                            .clickable { onAlbumSelected(album) },&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        AsyncImage(&#10;                            model = album.getImageUrl(),&#10;                            contentDescription = &quot;Album cover&quot;,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                        &#10;                        Text(&#10;                            text = album.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            modifier = Modifier.padding(top = 4.dp),&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;                        &#10;                        Text(&#10;                            text = album.getArtistNames(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (results.playlists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ playlists [${results.playlists.items.size}]&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            LazyRow(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(horizontal = 8.dp)&#10;            ) {&#10;                items(results.playlists.items.size) { index -&gt;&#10;                    val playlist = results.playlists.items[index]&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .width(120.dp)&#10;                            .clickable { onPlaylistSelected(playlist) },&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        AsyncImage(&#10;                            model = playlist.getImageUrl(),&#10;                            contentDescription = &quot;Playlist cover&quot;,&#10;                            modifier = Modifier&#10;                                .size(120.dp)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                        &#10;                        Text(&#10;                            text = playlist.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            modifier = Modifier.padding(top = 4.dp),&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;                        &#10;                        Text(&#10;                            text = &quot;${playlist.getTrackCount()} tracks&quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Artists section (optional)&#10;        if (results.artists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ artists [${results.artists.items.size}]&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            LazyRow(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                contentPadding = PaddingValues(horizontal = 8.dp)&#10;            ) {&#10;                items(results.artists.items.size) { index -&gt;&#10;                    val artist = results.artists.items[index]&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .width(100.dp)&#10;                            .clickable { /* TODO: Handle artist selection */ },&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        AsyncImage(&#10;                            model = artist.getImageUrl(),&#10;                            contentDescription = &quot;Artist image&quot;,&#10;                            modifier = Modifier&#10;                                .size(100.dp)&#10;                                .clip(RoundedCornerShape(50.dp))&#10;                        )&#10;                        &#10;                        Text(&#10;                            text = artist.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            modifier = Modifier.padding(top = 4.dp),&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun YouTubeSearchResultsView(&#10;    results: List&lt;AudioItem&gt;,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;$ youtube_results [${results.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp, top = 16.dp)&#10;        )&#10;&#10;        // Changed from LazyColumn to Column for better scroll behavior&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            results.forEachIndexed { index, item -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable {&#10;                            onVideoSelectedFromSearch(item.videoId, item.title, results, index)&#10;                        }&#10;                        .padding(8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${index + 1}. &quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        modifier = Modifier.width(32.dp)&#10;                    )&#10;                    &#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = item.title,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        &#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween&#10;                        ) {&#10;                            Text(&#10;                                text = item.channel ?: &quot;Unknown Channel&quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.weight(1f),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                            &#10;                            item.duration?.let { duration -&gt;&#10;                                Text(&#10;                                    text = duration,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search field with clear button and enter action&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            label = {&#10;                Text(&#10;                    &quot;&gt; search_audio&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                if (searchQuery.isNotEmpty()) {&#10;                    IconButton(onClick = {&#10;                        onSearchQueryChange(&quot;&quot;)&#10;                    }) {&#10;                        Text(&#10;                            text = &quot;x&quot;,&#10;                            style = MaterialTheme.typography.titleLarge.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 18.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    if (searchQuery.isNotBlank() &amp;&amp; !isLoading) {&#10;                        onSearchTriggered(searchQuery, false)&#10;                    }&#10;                }&#10;            ),&#10;            enabled = !isLoading,&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;                focusedLabelColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedLabelColor = MaterialTheme.colorScheme.secondary,&#10;                focusedTextColor = MaterialTheme.colorScheme.onSurface,&#10;                unfocusedTextColor = MaterialTheme.colorScheme.onSurface&#10;            ),&#10;            textStyle = MaterialTheme.typography.bodyLarge.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp&#10;            )&#10;        )&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                )&#10;            )&#10;        }&#10;&#10;        // === MENÚS DESPLEGABLES DE SPOTIFY ===&#10;        android.util.Log.d(&#10;            &quot;SearchMainView&quot;,&#10;            &quot;Renderizando vista principal - showSpotifyResults=$showSpotifyResults, spotifyResults!=null=${spotifyResults != null}&quot;&#10;        )&#10;        if (showSpotifyResults &amp;&amp; spotifyResults != null) {&#10;            CollapsibleSpotifySearchResultsView(&#10;                results = spotifyResults,&#10;                onAlbumSelected = onAlbumSelected,&#10;                onPlaylistSelected = onPlaylistSelected,&#10;                onTrackSelectedFromSearch = { track, allTracks, selectedIndex -&gt;&#10;                    // Convertir tracks de Spotify a TrackEntity y crear playlist temporal&#10;                    val trackEntities = allTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                        TrackEntity(&#10;                            id = &quot;spotify_search_${spotifyTrack.id}_$index&quot;,&#10;                            playlistId = &quot;spotify_search_${System.currentTimeMillis()}&quot;,&#10;                            spotifyTrackId = spotifyTrack.id,&#10;                            name = spotifyTrack.name,&#10;                            artists = spotifyTrack.getArtistNames(),&#10;                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                            audioUrl = null,&#10;                            position = index,&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Establecer playlist en el PlayerViewModel&#10;                    playerViewModel?.setCurrentPlaylist(trackEntities, selectedIndex)&#10;&#10;                    // Cargar el track seleccionado&#10;                    val selectedTrackEntity = trackEntities[selectedIndex]&#10;                    coroutineScope.launch {&#10;                        try {&#10;                            playerViewModel?.loadAudioFromTrack(selectedTrackEntity)&#10;                            Log.d(&#10;                                &quot;SpotifySearch&quot;,&#10;                                &quot; Track Spotify como playlist: ${track.name} (${selectedIndex + 1}/${allTracks.size})&quot;&#10;                            )&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;SpotifySearch&quot;, &quot;Error al reproducir track de Spotify&quot;, e)&#10;                        }&#10;                    }&#10;                },&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;&#10;        // === RESULTADOS DE YOUTUBE ===&#10;        if (results.isNotEmpty()) {&#10;            CollapsibleYouTubeSearchResultsView(&#10;                results = results,&#10;                onVideoSelected = onVideoSelected,&#10;                onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CollapsibleSpotifySearchResultsView(&#10;    results: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onTrackSelectedFromSearch: (SpotifyTrack, List&lt;SpotifyTrack&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var tracksExpanded by remember { mutableStateOf(true) }&#10;    var albumsExpanded by remember { mutableStateOf(true) }&#10;    var playlistsExpanded by remember { mutableStateOf(true) }&#10;    var artistsExpanded by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (results.tracks.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ tracks [${results.tracks.items.size}] ${if (tracksExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { tracksExpanded = !tracksExpanded }&#10;                    .padding(bottom = 8.dp)&#10;            )&#10;            &#10;            if (tracksExpanded) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    results.tracks.items.take(5).forEachIndexed { index, track -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    onTrackSelectedFromSearch(track, results.tracks.items, index)&#10;                                }&#10;                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                Text(&#10;                                    text = track.name ?: &quot;Unknown Track&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFFE0E0E0)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                                Text(&#10;                                    text = track.getArtistNames(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                            }&#10;                            &#10;                            Text(&#10;                                text = track.getDurationText(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Albums section&#10;        if (results.albums.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ albums [${results.albums.items.size}] ${if (albumsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { albumsExpanded = !albumsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;            &#10;            if (albumsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.albums.items.size) { index -&gt;&#10;                        val album = results.albums.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onAlbumSelected(album) },&#10;                            horizontalAlignment = Alignment.CenterHorizontales&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = album.getImageUrl(),&#10;                                contentDescription = &quot;Album cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;                            &#10;                            Text(&#10;                                text = album.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                            &#10;                            Text(&#10;                                text = album.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Playlists section&#10;        if (results.playlists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ playlists [${results.playlists.items.size}] ${if (playlistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { playlistsExpanded = !playlistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;            &#10;            if (playlistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.playlists.items.size) { index -&gt;&#10;                        val playlist = results.playlists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onPlaylistSelected(playlist) },&#10;                            horizontalAlignment = Alignment.CenterHorizontales&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = playlist.getImageUrl(),&#10;                                contentDescription = &quot;Playlist cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;                            &#10;                            Text(&#10;                                text = playlist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                            &#10;                            Text(&#10;                                text = &quot;${playlist.getTrackCount()} tracks&quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        &#10;        // Artists section&#10;        if (results.artists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ artists [${results.artists.items.size}] ${if (artistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { artistsExpanded = !artistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;            &#10;            if (artistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.artists.items.size) { index -&gt;&#10;                        val artist = results.artists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(100.dp)&#10;                                .clickable { /* TODO: Handle artist selection */ },&#10;                            horizontalAlignment = Alignment.CenterHorizontales&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = artist.getImageUrl(),&#10;                                contentDescription = &quot;Artist image&quot;,&#10;                                modifier = Modifier&#10;                                    .size(100.dp)&#10;                                    .clip(RoundedCornerShape(50.dp))&#10;                            )&#10;                            &#10;                            Text(&#10;                                text = artist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CollapsibleYouTubeSearchResultsView(&#10;    results: List&lt;AudioItem&gt;,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var expanded by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;$ youtube_results [${results.size}] ${if (expanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable { expanded = !expanded }&#10;                .padding(bottom = 8.dp, top = 16.dp)&#10;        )&#10;        &#10;        if (expanded) {&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                results.take(5).forEachIndexed { index, item -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                onVideoSelectedFromSearch(item.videoId, item.title, results, index)&#10;                            }&#10;                            .padding(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;                        &#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = item.title,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;                            &#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&#10;                                    text = item.channel ?: &quot;Unknown Channel&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.weight(1f),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                                &#10;                                item.duration?.let { duration -&gt;&#10;                                    Text(&#10;                                        text = duration,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;&#10;/**&#10; * Extensiones para integrar PlayerViewModel con notificaciones de música&#10; * &#10; * Estas extensiones facilitan el uso del sistema de notificaciones&#10; * sin modificar directamente el PlayerViewModel existente.&#10; */&#10;&#10;/**&#10; * Inicializa el manager de notificaciones&#10; */&#10;fun PlayerViewModel.initializeNotifications(context: Context): MusicNotificationManager {&#10;    return MusicNotificationManager(context).apply {&#10;        startService()&#10;    }&#10;}&#10;&#10;/**&#10; * Reproduce un track con notificación&#10; */&#10;fun PlayerViewModel.playWithNotification(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity,&#10;    onAudioUrlReady: (String) -&gt; Unit&#10;) {&#10;    // Actualizar la información del track en la notificación&#10;    notificationManager.updateSongInfo(track)&#10;    &#10;    // Tu lógica existente de reproducción aquí&#10;    // Cuando tengas la URL de audio, llamar:&#10;    // onAudioUrlReady(audioUrl)&#10;}&#10;&#10;/**&#10; * Actualiza la notificación cuando cambia el track&#10; */&#10;fun PlayerViewModel.updateNotificationTrack(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity?&#10;) {&#10;    track?.let {&#10;        notificationManager.updateSongInfo(it.name, it.artists)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>