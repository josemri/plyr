<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt" />
              <option name="updatedContent" value="package com.plyr.examples&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de integración del sistema de notificaciones de música&#10; * &#10; * Este archivo muestra cómo implementar las notificaciones en tu MainActivity.&#10; * Copia este código a tu MainActivity existente.&#10; */&#10;class NotificationIntegrationExample {&#10;    &#10;    // En tu MainActivity, agrega estas propiedades:&#10;    private lateinit var notificationManager: MusicNotificationManager&#10;    private lateinit var playerViewModel: PlayerViewModel&#10;    &#10;    // Launcher para pedir permisos de notificación (Android 13+)&#10;    private val notificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Permiso concedido, continuar con la inicialización&#10;            initializeNotificationSystem()&#10;        } else {&#10;            // Permiso denegado, manejar el caso apropiadamente&#10;            // Puedes mostrar un mensaje al usuario explicando por qué necesitas el permiso&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Llama este método en onCreate() de tu MainActivity&#10;     */&#10;    fun setupNotificationSystem(activity: ComponentActivity, viewModel: PlayerViewModel) {&#10;        playerViewModel = viewModel&#10;        &#10;        // Verificar y pedir permisos de notificación para Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            when {&#10;                ContextCompat.checkSelfPermission(&#10;                    activity,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10;                    // Permiso ya concedido&#10;                    initializeNotificationSystem()&#10;                }&#10;                else -&gt; {&#10;                    // Pedir permiso&#10;                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                }&#10;            }&#10;        } else {&#10;            // Android 12 y menores no necesitan permiso explícito&#10;            initializeNotificationSystem()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicializa el sistema de notificaciones&#10;     */&#10;    private fun initializeNotificationSystem() {&#10;        notificationManager = MusicNotificationManager(this)&#10;        notificationManager.startService()&#10;        &#10;        // Configurar listeners para actualizar notificación cuando cambie el track&#10;        setupNotificationListeners()&#10;    }&#10;    &#10;    /**&#10;     * Configura los listeners para sincronizar el PlayerViewModel con las notificaciones&#10;     */&#10;    private fun setupNotificationListeners() {&#10;        // Observar cambios en el track actual&#10;        playerViewModel.currentTrack.observe(this) { track -&gt;&#10;            track?.let {&#10;                notificationManager.updateSongInfo(it.name, it.artists)&#10;            }&#10;        }&#10;        &#10;        // Observar cambios en el título actual&#10;        playerViewModel.currentTitle.observe(this) { title -&gt;&#10;            title?.let {&#10;                // Si tienes información del artista disponible&#10;                val artist = &quot;Artista Desconocido&quot; // Reemplaza con la fuente real del artista&#10;                notificationManager.updateSongInfo(it, artist)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo de cómo reproducir una canción con notificación&#10;     */&#10;    fun playTrackWithNotification(audioUrl: String, title: String, artist: String) {&#10;        lifecycleScope.launch {&#10;            // Actualizar información en la notificación&#10;            notificationManager.updateSongInfo(title, artist)&#10;            &#10;            // Reproducir el audio en el servicio de notificación&#10;            notificationManager.playAudio(audioUrl, title, artist)&#10;            &#10;            // También reproducir en tu PlayerViewModel existente&#10;            // playerViewModel.playAudio(audioUrl) // Tu método existente&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Limpieza en onDestroy()&#10;     */&#10;    fun cleanupNotificationSystem() {&#10;        if (::notificationManager.isInitialized) {&#10;            notificationManager.stopService()&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * INTEGRACIÓN COMPLETA EN TU MAINACTIVITY:&#10; * &#10; * class MainActivity : ComponentActivity() {&#10; *     private lateinit var notificationManager: MusicNotificationManager&#10; *     private lateinit var playerViewModel: PlayerViewModel&#10; *     &#10; *     // Launcher para permisos de notificación&#10; *     private val notificationPermissionLauncher = registerForActivityResult(&#10; *         ActivityResultContracts.RequestPermission()&#10; *     ) { isGranted -&gt;&#10; *         if (isGranted) {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onCreate(savedInstanceState: Bundle?) {&#10; *         super.onCreate(savedInstanceState)&#10; *         &#10; *         // Tu código existente...&#10; *         playerViewModel = ViewModelProvider(this)[PlayerViewModel::class.java]&#10; *         &#10; *         // Configurar notificaciones&#10; *         setupNotificationSystem()&#10; *         &#10; *         // Tu código de Compose...&#10; *     }&#10; *     &#10; *     private fun setupNotificationSystem() {&#10; *         if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10; *             when {&#10; *                 ContextCompat.checkSelfPermission(&#10; *                     this, Manifest.permission.POST_NOTIFICATIONS&#10; *                 ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10; *                     initializeNotificationSystem()&#10; *                 }&#10; *                 else -&gt; {&#10; *                     notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10; *                 }&#10; *             }&#10; *         } else {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     private fun initializeNotificationSystem() {&#10; *         notificationManager = MusicNotificationManager(this)&#10; *         notificationManager.startService()&#10; *         &#10; *         // Observar cambios en el track actual&#10; *         playerViewModel.currentTrack.observe(this) { track -&gt;&#10; *             track?.let {&#10; *                 notificationManager.updateSongInfo(it.name, it.artists)&#10; *             }&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onDestroy() {&#10; *         super.onDestroy()&#10; *         if (::notificationManager.isInitialized) {&#10; *             notificationManager.stopService()&#10; *         }&#10; *     }&#10; * }&#10; */" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.IBinder&#10;import android.util.Log&#10;import com.plyr.database.TrackEntity&#10;&#10;/**&#10; * MusicNotificationManager - Clase helper para gestionar la notificación de música&#10; * &#10; * Esta clase actúa como puente entre tu PlayerViewModel y el MusicService,&#10; * facilitando el control de la notificación sin tener que manejar directamente&#10; * el service binding en el ViewModel.&#10; */&#10;class MusicNotificationManager(private val context: Context) {&#10;    &#10;    private var musicService: MusicService? = null&#10;    private var isBound = false&#10;    &#10;    companion object {&#10;        private const val TAG = &quot;MusicNotificationManager&quot;&#10;    }&#10;    &#10;    /**&#10;     * Conexión con el servicio de música&#10;     */&#10;    private val serviceConnection = object : ServiceConnection {&#10;        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {&#10;            Log.d(TAG, &quot;Service connected&quot;)&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            isBound = true&#10;        }&#10;        &#10;        override fun onServiceDisconnected(name: ComponentName?) {&#10;            Log.d(TAG, &quot;Service disconnected&quot;)&#10;            musicService = null&#10;            isBound = false&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicia el servicio y se conecta a él&#10;     */&#10;    fun startService() {&#10;        Log.d(TAG, &quot;Starting MusicService&quot;)&#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.startService(serviceIntent)&#10;        context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;    }&#10;    &#10;    /**&#10;     * Para el servicio y se desconecta&#10;     */&#10;    fun stopService() {&#10;        Log.d(TAG, &quot;Stopping MusicService&quot;)&#10;        if (isBound) {&#10;            context.unbindService(serviceConnection)&#10;            isBound = false&#10;        }&#10;        &#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.stopService(serviceIntent)&#10;        musicService = null&#10;    }&#10;    &#10;    /**&#10;     * Inicia la reproducción de audio con notificación&#10;     */&#10;    fun playAudio(audioUrl: String, title: String, artist: String) {&#10;        Log.d(TAG, &quot;Playing audio: $title by $artist&quot;)&#10;        &#10;        if (!isBound) {&#10;            // Si no está conectado, iniciar el servicio con los datos&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;AUDIO_URL&quot;, audioUrl)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;            context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;        } else {&#10;            // Si ya está conectado, usar el servicio directamente&#10;            musicService?.updateSongInfo(title, artist)&#10;            musicService?.playAudio(audioUrl)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza la información de la canción en la notificación&#10;     */&#10;    fun updateSongInfo(title: String, artist: String) {&#10;        Log.d(TAG, &quot;Updating song info: $title by $artist&quot;)&#10;        &#10;        if (isBound &amp;&amp; musicService != null) {&#10;            musicService?.updateSongInfo(title, artist)&#10;        } else {&#10;            // Si no está conectado, enviar intent de actualización&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;UPDATE_INFO&quot;, true)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza usando un TrackEntity&#10;     */&#10;    fun updateSongInfo(track: TrackEntity) {&#10;        updateSongInfo(track.name, track.artists)&#10;    }&#10;    &#10;    /**&#10;     * Pausa/reanuda la reproducción desde la notificación&#10;     */&#10;    fun togglePlayPause() {&#10;        musicService?.togglePlayPause()&#10;    }&#10;    &#10;    /**&#10;     * Para completamente la reproducción&#10;     */&#10;    fun stopPlayback() {&#10;        musicService?.stopPlayback()&#10;    }&#10;    &#10;    /**&#10;     * Verifica si está reproduciendo&#10;     */&#10;    fun isPlaying(): Boolean {&#10;        return musicService?.isPlaying() ?: false&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el servicio está conectado&#10;     */&#10;    fun isServiceConnected(): Boolean {&#10;        return isBound &amp;&amp; musicService != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/SongListItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/SongListItem.kt" />
              <option name="originalContent" value="package com.plyr.ui.components&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.background&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.utils.Config&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;import com.plyr.ui.theme.PlyrSpacing&#10;import com.plyr.ui.theme.PlyrTextStyles&#10;&#10;// Data class para unificar los datos de la canción&#10;data class Song(&#10;    val number: Int,&#10;    val title: String,&#10;    val artist: String,&#10;    val spotifyId: String? = null,&#10;    val youtubeId: String? = null,&#10;    val spotifyUrl: String? = null&#10;)&#10;&#10;@Composable&#10;fun SongListItem(&#10;    song: Song,&#10;    trackEntities: List&lt;TrackEntity&gt;,&#10;    index: Int,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope,&#10;    modifier: Modifier = Modifier,&#10;    isSelected: Boolean = false&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val context = LocalContext.current&#10;    var showPopup by remember { mutableStateOf(false) }&#10;    var showShareDialog by remember { mutableStateOf(false) }&#10;    var showPlaylistDialog by remember { mutableStateOf(false) }&#10;    var showFetchInfoDialog by remember { mutableStateOf(false) }&#10;    var userPlaylists by remember { mutableStateOf&lt;List&lt;SpotifyPlaylist&gt;&gt;(emptyList()) }&#10;    var isLoadingPlaylists by remember { mutableStateOf(false) }&#10;    var addToPlaylistError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var addToPlaylistSuccess by remember { mutableStateOf(false) }&#10;    var isLoadingTrackInfo by remember { mutableStateOf(false) }&#10;    var fetchedTrackInfo by remember { mutableStateOf&lt;SpotifyTrack?&gt;(null) }&#10;    var fetchInfoError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    Row(&#10;        modifier = modifier&#10;            .clickable {&#10;                haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                playerViewModel?.let { viewModel -&gt;&#10;                    if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#10;                        viewModel.setCurrentPlaylist(trackEntities, index)&#10;                        val selectedTrackEntity = trackEntities[index]&#10;                        coroutineScope.launch {&#10;                            try {&#10;                                viewModel.loadAudioFromTrack(selectedTrackEntity)&#10;                                Log.d(&quot;SongListItem&quot;, &quot; Reproduciendo track ${index + 1}/${trackEntities.size}: ${selectedTrackEntity.name}&quot;)&#10;                            } catch (e: Exception) {&#10;                                Log.e(&quot;SongListItem&quot;, &quot;Error al reproducir track&quot;, e)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            .fillMaxWidth()&#10;            .height(32.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Track number&#10;        Text(&#10;            text = song.number.toString(),&#10;            style = PlyrTextStyles.trackArtist(),&#10;            modifier = Modifier.padding(end = PlyrSpacing.small)&#10;        )&#10;        // Song title and artist&#10;        Column(&#10;            modifier = Modifier.weight(1f),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = song.title,&#10;                style = if (isSelected)&#10;                    PlyrTextStyles.selectableOption(true)&#10;                else&#10;                    PlyrTextStyles.trackTitle(),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Text(&#10;                text = song.artist,&#10;                style = PlyrTextStyles.trackArtist(),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis,&#10;                modifier = Modifier.padding(top = 0.dp)&#10;            )&#10;        }&#10;        IconButton(onClick = {&#10;            showPopup = true&#10;        }, modifier = Modifier.size(32.dp)) {&#10;            Text(&#10;                text = &quot;*&quot;, style = PlyrTextStyles.menuOption(),&#10;                color = Color(0xFF3FFFEF)&#10;            )&#10;        }&#10;    }&#10;&#10;    if (showPopup) {&#10;        Dialog(onDismissRequest = { showPopup = false }) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .background(Color(0xFF181818))&#10;                    .padding(24.dp)&#10;            ) {&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    val options = listOf(&#10;                        &quot;add to queue&quot;,&#10;                        &quot;add to playlist&quot;,&#10;                        &quot;share&quot;,&#10;                        &quot;fetch info&quot;,&#10;                        &quot;download&quot;,&#10;                        &quot;delete&quot;&#10;                    )&#10;                    options.forEach { option -&gt;&#10;                        Text(&#10;                            text = option,&#10;                            color = Color(0xFF3FFFEF),&#10;                            fontWeight = FontWeight.Normal,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    when (option) {&#10;                                        &quot;share&quot; -&gt; {&#10;                                            showShareDialog = true&#10;                                            showPopup = false&#10;                                        }&#10;                                        &quot;add to playlist&quot; -&gt; {&#10;                                            // Verificar que la canción tenga Spotify ID&#10;                                            if (song.spotifyId != null &amp;&amp; Config.isSpotifyConnected(context)) {&#10;                                                showPopup = false&#10;                                                showPlaylistDialog = true&#10;                                                isLoadingPlaylists = true&#10;                                                addToPlaylistError = null&#10;&#10;                                                // Cargar playlists del usuario&#10;                                                val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                if (accessToken != null) {&#10;                                                    SpotifyRepository.getUserPlaylists(accessToken) { playlists, error -&gt;&#10;                                                        isLoadingPlaylists = false&#10;                                                        if (playlists != null) {&#10;                                                            userPlaylists = playlists&#10;                                                        } else {&#10;                                                            addToPlaylistError = error ?: &quot;Error cargando playlists&quot;&#10;                                                        }&#10;                                                    }&#10;                                                } else {&#10;                                                    isLoadingPlaylists = false&#10;                                                    addToPlaylistError = &quot;Token de Spotify no disponible&quot;&#10;                                                }&#10;                                            } else {&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;No se puede añadir a playlist: sin Spotify ID o no conectado&quot;)&#10;                                                showPopup = false&#10;                                            }&#10;                                        }&#10;                                        &quot;fetch info&quot; -&gt; {&#10;                                            showPopup = false&#10;                                            showFetchInfoDialog = true&#10;                                            isLoadingTrackInfo = true&#10;                                            fetchInfoError = null&#10;&#10;                                            // Obtener información de la canción&#10;                                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                                            if (accessToken != null &amp;&amp; song.spotifyId != null) {&#10;                                                SpotifyRepository.getTrackInfo(accessToken, song.spotifyId) { trackInfo, error -&gt;&#10;                                                    isLoadingTrackInfo = false&#10;                                                    if (trackInfo != null) {&#10;                                                        fetchedTrackInfo = trackInfo&#10;                                                    } else {&#10;                                                        fetchInfoError = error ?: &quot;Error fetching track info&quot;&#10;                                                    }&#10;                                                }&#10;                                            } else {&#10;                                                isLoadingTrackInfo = false&#10;                                                fetchInfoError = &quot;Token de Spotify no disponible&quot;&#10;                                            }&#10;                                        }&#10;                                        else -&gt; {&#10;                                            Log.d(&quot;SongListItemPopup&quot;, option)&#10;                                            showPopup = false&#10;                                        }&#10;                                    }&#10;                                }&#10;                                .padding(vertical = 4.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Diálogo de selección de playlist&#10;    if (showPlaylistDialog) {&#10;        Dialog(onDismissRequest = {&#10;            showPlaylistDialog = false&#10;            addToPlaylistSuccess = false&#10;            addToPlaylistError = null&#10;        }) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .background(Color(0xFF181818))&#10;                    .padding(24.dp)&#10;                    .fillMaxWidth(0.9f)&#10;            ) {&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Título&#10;                    Text(&#10;                        text = &quot;$ add to playlist&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color(0xFF4ECDC4)&#10;                        )&#10;                    )&#10;&#10;                    // Info de la canción&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = song.title,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                color = Color.White&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = song.artist,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                color = Color(0xFF888888)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;&#10;                    Divider(color = Color(0xFF333333))&#10;&#10;                    // Contenido del diálogo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(300.dp)&#10;                    ) {&#10;                        when {&#10;                            isLoadingPlaylists -&gt; {&#10;                                // Estado de carga&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(color = Color(0xFF4ECDC4))&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;loading playlists...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            addToPlaylistSuccess -&gt; {&#10;                                // Éxito&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✓&quot;,&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;Track added successfully!&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            addToPlaylistError != null -&gt; {&#10;                                // Error&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✗&quot;,&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = addToPlaylistError ?: &quot;Error&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        ),&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                            userPlaylists.isEmpty() -&gt; {&#10;                                // Sin playlists&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;No playlists found&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            else -&gt; {&#10;                                // Lista de playlists&#10;                                LazyColumn(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    items(userPlaylists) { playlist -&gt;&#10;                                        Row(&#10;                                            modifier = Modifier&#10;                                                .fillMaxWidth()&#10;                                                .clip(RoundedCornerShape(8.dp))&#10;                                                .clickable {&#10;                                                    // Añadir la canción a la playlist&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null &amp;&amp; song.spotifyId != null) {&#10;                                                        isLoadingPlaylists = true&#10;                                                        SpotifyRepository.addTrackToPlaylist(&#10;                                                            accessToken,&#10;                                                            playlist.id,&#10;                                                            song.spotifyId&#10;                                                        ) { success, error -&gt;&#10;                                                            isLoadingPlaylists = false&#10;                                                            if (success) {&#10;                                                                addToPlaylistSuccess = true&#10;                                                                Log.d(&quot;SongListItem&quot;, &quot;✓ Canción añadida a '${playlist.name}'&quot;)&#10;                                                                // Cerrar el diálogo después de 1.5 segundos&#10;                                                                coroutineScope.launch {&#10;                                                                    kotlinx.coroutines.delay(1500)&#10;                                                                    showPlaylistDialog = false&#10;                                                                    addToPlaylistSuccess = false&#10;                                                                }&#10;                                                            } else {&#10;                                                                addToPlaylistError = error&#10;                                                                Log.e(&quot;SongListItem&quot;, &quot;Error añadiendo canción: $error&quot;)&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                                .background(Color(0xFF252525))&#10;                                                .padding(12.dp),&#10;                                            verticalAlignment = Alignment.CenterVertically&#10;                                        ) {&#10;                                            Column(&#10;                                                modifier = Modifier.weight(1f)&#10;                                            ) {&#10;                                                Text(&#10;                                                    text = playlist.name,&#10;                                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                        color = Color.White&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                                playlist.description?.let { desc -&gt;&#10;                                                    if (desc.isNotBlank()) {&#10;                                                        Text(&#10;                                                            text = desc,&#10;                                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                                color = Color(0xFF888888)&#10;                                                            ),&#10;                                                            maxLines = 1,&#10;                                                            overflow = TextOverflow.Ellipsis&#10;                                                        )&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                            Text(&#10;                                                text = &quot;&gt;&quot;,&#10;                                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                                    color = Color(0xFF4ECDC4)&#10;                                                )&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Botón cerrar&#10;                    if (!isLoadingPlaylists) {&#10;                        TextButton(&#10;                            onClick = {&#10;                                showPlaylistDialog = false&#10;                                addToPlaylistSuccess = false&#10;                                addToPlaylistError = null&#10;                            }&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;close&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    color = Color(0xFF888888)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showShareDialog) {&#10;        ShareDialog(&#10;            item = ShareableItem(&#10;                spotifyId = song.spotifyId,&#10;                spotifyUrl = song.spotifyUrl,&#10;                youtubeId = song.youtubeId,&#10;                title = song.title,&#10;                artist = song.artist,&#10;                type = ShareType.TRACK&#10;            ),&#10;            onDismiss = { showShareDialog = false }&#10;        )&#10;    }&#10;&#10;    // Diálogo de información de la canción&#10;    if (showFetchInfoDialog) {&#10;        Dialog(onDismissRequest = { showFetchInfoDialog = false }) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .background(Color(0xFF181818))&#10;                    .padding(24.dp)&#10;                    .fillMaxWidth(0.9f)&#10;            ) {&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Título&#10;                    Text(&#10;                        text = &quot;Track info&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color(0xFF4ECDC4)&#10;                        )&#10;                    )&#10;&#10;                    // Info de la canción&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = song.title,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                color = Color.White&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = song.artist,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                color = Color(0xFF888888)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;&#10;                    Divider(color = Color(0xFF333333))&#10;&#10;                    // Contenido del diálogo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(300.dp)&#10;                    ) {&#10;                        when {&#10;                            isLoadingTrackInfo -&gt; {&#10;                                // Estado de carga&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(color = Color(0xFF4ECDC4))&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;loading track info...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            fetchInfoError != null -&gt; {&#10;                                // Error&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✗&quot;,&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = fetchInfoError ?: &quot;Error&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        ),&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                            fetchedTrackInfo != null -&gt; {&#10;                                // Mostrar información de la canción&#10;                                val trackInfo = fetchedTrackInfo // Local variable for smart cast&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.Start,&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;Track ID: ${trackInfo?.id}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Name: ${trackInfo?.name}&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Artist(s): ${trackInfo?.artists?.joinToString(&quot;, &quot;) { it.name }}&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;                                    trackInfo?.album?.let { album -&gt;&#10;                                        Text(&#10;                                            text = &quot;Album: ${album.name}&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                color = Color.White&#10;                                            )&#10;                                        )&#10;                                        album.releaseDate?.let { date -&gt;&#10;                                            Text(&#10;                                                text = &quot;Release date: $date&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                                    color = Color(0xFF888888)&#10;                                                )&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                    Text(&#10;                                        text = &quot;Duration: ${&#10;                                            trackInfo?.durationMs?.let { ms -&gt; &#10;                                            val minutes = ms / 60000&#10;                                            val seconds = String.format(&quot;%02d&quot;, (ms % 60000) / 1000)&#10;                                            &quot;$minutes:$seconds&quot;&#10;                                        } ?: &quot;N/A&quot;}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Botón cerrar&#10;                    if (!isLoadingTrackInfo) {&#10;                        TextButton(&#10;                            onClick = {&#10;                                showFetchInfoDialog = false&#10;                                isLoadingTrackInfo = false&#10;                                fetchInfoError = null&#10;                            }&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;close&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    color = Color(0xFF888888)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui.components&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.background&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.utils.Config&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;import com.plyr.ui.theme.PlyrSpacing&#10;import com.plyr.ui.theme.PlyrTextStyles&#10;&#10;// Data class para unificar los datos de la canción&#10;data class Song(&#10;    val number: Int,&#10;    val title: String,&#10;    val artist: String,&#10;    val spotifyId: String? = null,&#10;    val youtubeId: String? = null,&#10;    val spotifyUrl: String? = null&#10;)&#10;&#10;@Composable&#10;fun SongListItem(&#10;    song: Song,&#10;    trackEntities: List&lt;TrackEntity&gt;,&#10;    index: Int,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope,&#10;    modifier: Modifier = Modifier,&#10;    isSelected: Boolean = false&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val context = LocalContext.current&#10;    var showPopup by remember { mutableStateOf(false) }&#10;    var showShareDialog by remember { mutableStateOf(false) }&#10;    var showPlaylistDialog by remember { mutableStateOf(false) }&#10;    var showFetchInfoDialog by remember { mutableStateOf(false) }&#10;    var userPlaylists by remember { mutableStateOf&lt;List&lt;SpotifyPlaylist&gt;&gt;(emptyList()) }&#10;    var isLoadingPlaylists by remember { mutableStateOf(false) }&#10;    var addToPlaylistError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var addToPlaylistSuccess by remember { mutableStateOf(false) }&#10;    var isLoadingTrackInfo by remember { mutableStateOf(false) }&#10;    var fetchedTrackInfo by remember { mutableStateOf&lt;SpotifyTrack?&gt;(null) }&#10;    var fetchInfoError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    Row(&#10;        modifier = modifier&#10;            .clickable {&#10;                haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                playerViewModel?.let { viewModel -&gt;&#10;                    if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#10;                        viewModel.setCurrentPlaylist(trackEntities, index)&#10;                        val selectedTrackEntity = trackEntities[index]&#10;                        coroutineScope.launch {&#10;                            try {&#10;                                viewModel.loadAudioFromTrack(selectedTrackEntity)&#10;                                Log.d(&quot;SongListItem&quot;, &quot; Reproduciendo track ${index + 1}/${trackEntities.size}: ${selectedTrackEntity.name}&quot;)&#10;                            } catch (e: Exception) {&#10;                                Log.e(&quot;SongListItem&quot;, &quot;Error al reproducir track&quot;, e)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            .fillMaxWidth()&#10;            .height(32.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Track number&#10;        Text(&#10;            text = song.number.toString(),&#10;            style = PlyrTextStyles.trackArtist(),&#10;            modifier = Modifier.padding(end = PlyrSpacing.small)&#10;        )&#10;        // Song title and artist&#10;        Column(&#10;            modifier = Modifier.weight(1f),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = song.title,&#10;                style = if (isSelected)&#10;                    PlyrTextStyles.selectableOption(true)&#10;                else&#10;                    PlyrTextStyles.trackTitle(),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Text(&#10;                text = song.artist,&#10;                style = PlyrTextStyles.trackArtist(),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis,&#10;                modifier = Modifier.padding(top = 0.dp)&#10;            )&#10;        }&#10;        IconButton(onClick = {&#10;            showPopup = true&#10;        }, modifier = Modifier.size(32.dp)) {&#10;            Text(&#10;                text = &quot;*&quot;, style = PlyrTextStyles.menuOption(),&#10;                color = Color(0xFF3FFFEF)&#10;            )&#10;        }&#10;    }&#10;&#10;    if (showPopup) {&#10;        Dialog(onDismissRequest = { showPopup = false }) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .background(Color(0xFF181818))&#10;                    .padding(24.dp)&#10;            ) {&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    val options = listOf(&#10;                        &quot;add to queue&quot;,&#10;                        &quot;add to playlist&quot;,&#10;                        &quot;share&quot;,&#10;                        &quot;fetch info&quot;,&#10;                        &quot;download&quot;,&#10;                        &quot;delete&quot;&#10;                    )&#10;                    options.forEach { option -&gt;&#10;                        Text(&#10;                            text = option,&#10;                            color = Color(0xFF3FFFEF),&#10;                            fontWeight = FontWeight.Normal,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    when (option) {&#10;                                        &quot;share&quot; -&gt; {&#10;                                            showShareDialog = true&#10;                                            showPopup = false&#10;                                        }&#10;                                        &quot;add to queue&quot; -&gt; {&#10;                                            showPopup = false&#10;                                            playerViewModel?.let { viewModel -&gt;&#10;                                                if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#10;                                                    val trackToAdd = trackEntities[index]&#10;                                                    viewModel.addToQueue(trackToAdd)&#10;                                                    Log.d(&quot;SongListItem&quot;, &quot;✓ Track added to queue: ${trackToAdd.name}&quot;)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                        &quot;add to playlist&quot; -&gt; {&#10;                                            // Verificar que la canción tenga Spotify ID&#10;                                            if (song.spotifyId != null &amp;&amp; Config.isSpotifyConnected(context)) {&#10;                                                showPopup = false&#10;                                                showPlaylistDialog = true&#10;                                                isLoadingPlaylists = true&#10;                                                addToPlaylistError = null&#10;&#10;                                                // Cargar playlists del usuario&#10;                                                val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                if (accessToken != null) {&#10;                                                    SpotifyRepository.getUserPlaylists(accessToken) { playlists, error -&gt;&#10;                                                        isLoadingPlaylists = false&#10;                                                        if (playlists != null) {&#10;                                                            userPlaylists = playlists&#10;                                                        } else {&#10;                                                            addToPlaylistError = error ?: &quot;Error cargando playlists&quot;&#10;                                                        }&#10;                                                    }&#10;                                                } else {&#10;                                                    isLoadingPlaylists = false&#10;                                                    addToPlaylistError = &quot;Token de Spotify no disponible&quot;&#10;                                                }&#10;                                            } else {&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;No se puede añadir a playlist: sin Spotify ID o no conectado&quot;)&#10;                                                showPopup = false&#10;                                            }&#10;                                        }&#10;                                        &quot;fetch info&quot; -&gt; {&#10;                                            showPopup = false&#10;                                            showFetchInfoDialog = true&#10;                                            isLoadingTrackInfo = true&#10;                                            fetchInfoError = null&#10;&#10;                                            // Obtener información de la canción&#10;                                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                                            if (accessToken != null &amp;&amp; song.spotifyId != null) {&#10;                                                SpotifyRepository.getTrackInfo(accessToken, song.spotifyId) { trackInfo, error -&gt;&#10;                                                    isLoadingTrackInfo = false&#10;                                                    if (trackInfo != null) {&#10;                                                        fetchedTrackInfo = trackInfo&#10;                                                    } else {&#10;                                                        fetchInfoError = error ?: &quot;Error fetching track info&quot;&#10;                                                    }&#10;                                                }&#10;                                            } else {&#10;                                                isLoadingTrackInfo = false&#10;                                                fetchInfoError = &quot;Token de Spotify no disponible&quot;&#10;                                            }&#10;                                        }&#10;                                        else -&gt; {&#10;                                            Log.d(&quot;SongListItemPopup&quot;, option)&#10;                                            showPopup = false&#10;                                        }&#10;                                    }&#10;                                }&#10;                                .padding(vertical = 4.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Diálogo de selección de playlist&#10;    if (showPlaylistDialog) {&#10;        Dialog(onDismissRequest = {&#10;            showPlaylistDialog = false&#10;            addToPlaylistSuccess = false&#10;            addToPlaylistError = null&#10;        }) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .background(Color(0xFF181818))&#10;                    .padding(24.dp)&#10;                    .fillMaxWidth(0.9f)&#10;            ) {&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Título&#10;                    Text(&#10;                        text = &quot;$ add to playlist&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color(0xFF4ECDC4)&#10;                        )&#10;                    )&#10;&#10;                    // Info de la canción&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = song.title,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                color = Color.White&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = song.artist,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                color = Color(0xFF888888)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;&#10;                    Divider(color = Color(0xFF333333))&#10;&#10;                    // Contenido del diálogo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(300.dp)&#10;                    ) {&#10;                        when {&#10;                            isLoadingPlaylists -&gt; {&#10;                                // Estado de carga&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(color = Color(0xFF4ECDC4))&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;loading playlists...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            addToPlaylistSuccess -&gt; {&#10;                                // Éxito&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✓&quot;,&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;Track added successfully!&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            addToPlaylistError != null -&gt; {&#10;                                // Error&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✗&quot;,&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = addToPlaylistError ?: &quot;Error&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        ),&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                            userPlaylists.isEmpty() -&gt; {&#10;                                // Sin playlists&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;No playlists found&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            else -&gt; {&#10;                                // Lista de playlists&#10;                                LazyColumn(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    items(userPlaylists) { playlist -&gt;&#10;                                        Row(&#10;                                            modifier = Modifier&#10;                                                .fillMaxWidth()&#10;                                                .clip(RoundedCornerShape(8.dp))&#10;                                                .clickable {&#10;                                                    // Añadir la canción a la playlist&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null &amp;&amp; song.spotifyId != null) {&#10;                                                        isLoadingPlaylists = true&#10;                                                        SpotifyRepository.addTrackToPlaylist(&#10;                                                            accessToken,&#10;                                                            playlist.id,&#10;                                                            song.spotifyId&#10;                                                        ) { success, error -&gt;&#10;                                                            isLoadingPlaylists = false&#10;                                                            if (success) {&#10;                                                                addToPlaylistSuccess = true&#10;                                                                Log.d(&quot;SongListItem&quot;, &quot;✓ Canción añadida a '${playlist.name}'&quot;)&#10;                                                                // Cerrar el diálogo después de 1.5 segundos&#10;                                                                coroutineScope.launch {&#10;                                                                    kotlinx.coroutines.delay(1500)&#10;                                                                    showPlaylistDialog = false&#10;                                                                    addToPlaylistSuccess = false&#10;                                                                }&#10;                                                            } else {&#10;                                                                addToPlaylistError = error&#10;                                                                Log.e(&quot;SongListItem&quot;, &quot;Error añadiendo canción: $error&quot;)&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                                .background(Color(0xFF252525))&#10;                                                .padding(12.dp),&#10;                                            verticalAlignment = Alignment.CenterVertically&#10;                                        ) {&#10;                                            Column(&#10;                                                modifier = Modifier.weight(1f)&#10;                                            ) {&#10;                                                Text(&#10;                                                    text = playlist.name,&#10;                                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                        color = Color.White&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                                playlist.description?.let { desc -&gt;&#10;                                                    if (desc.isNotBlank()) {&#10;                                                        Text(&#10;                                                            text = desc,&#10;                                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                                color = Color(0xFF888888)&#10;                                                            ),&#10;                                                            maxLines = 1,&#10;                                                            overflow = TextOverflow.Ellipsis&#10;                                                        )&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                            Text(&#10;                                                text = &quot;&gt;&quot;,&#10;                                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                                    color = Color(0xFF4ECDC4)&#10;                                                )&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Botón cerrar&#10;                    if (!isLoadingPlaylists) {&#10;                        TextButton(&#10;                            onClick = {&#10;                                showPlaylistDialog = false&#10;                                addToPlaylistSuccess = false&#10;                                addToPlaylistError = null&#10;                            }&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;close&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    color = Color(0xFF888888)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showShareDialog) {&#10;        ShareDialog(&#10;            item = ShareableItem(&#10;                spotifyId = song.spotifyId,&#10;                spotifyUrl = song.spotifyUrl,&#10;                youtubeId = song.youtubeId,&#10;                title = song.title,&#10;                artist = song.artist,&#10;                type = ShareType.TRACK&#10;            ),&#10;            onDismiss = { showShareDialog = false }&#10;        )&#10;    }&#10;&#10;    // Diálogo de información de la canción&#10;    if (showFetchInfoDialog) {&#10;        Dialog(onDismissRequest = { showFetchInfoDialog = false }) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .background(Color(0xFF181818))&#10;                    .padding(24.dp)&#10;                    .fillMaxWidth(0.9f)&#10;            ) {&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Título&#10;                    Text(&#10;                        text = &quot;Track info&quot;,&#10;                        style = MaterialTheme.typography.titleLarge.copy(&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color(0xFF4ECDC4)&#10;                        )&#10;                    )&#10;&#10;                    // Info de la canción&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = song.title,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                color = Color.White&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = song.artist,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                color = Color(0xFF888888)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;&#10;                    Divider(color = Color(0xFF333333))&#10;&#10;                    // Contenido del diálogo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(300.dp)&#10;                    ) {&#10;                        when {&#10;                            isLoadingTrackInfo -&gt; {&#10;                                // Estado de carga&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(color = Color(0xFF4ECDC4))&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;loading track info...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            fetchInfoError != null -&gt; {&#10;                                // Error&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✗&quot;,&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = fetchInfoError ?: &quot;Error&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        ),&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                            fetchedTrackInfo != null -&gt; {&#10;                                // Mostrar información de la canción&#10;                                val trackInfo = fetchedTrackInfo // Local variable for smart cast&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.Start,&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;Track ID: ${trackInfo?.id}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Name: ${trackInfo?.name}&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Artist(s): ${trackInfo?.artists?.joinToString(&quot;, &quot;) { it.name }}&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;                                    trackInfo?.album?.let { album -&gt;&#10;                                        Text(&#10;                                            text = &quot;Album: ${album.name}&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                color = Color.White&#10;                                            )&#10;                                        )&#10;                                        album.releaseDate?.let { date -&gt;&#10;                                            Text(&#10;                                                text = &quot;Release date: $date&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                                    color = Color(0xFF888888)&#10;                                                )&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                    Text(&#10;                                        text = &quot;Duration: ${&#10;                                            trackInfo?.durationMs?.let { ms -&gt; &#10;                                            val minutes = ms / 60000&#10;                                            val seconds = String.format(&quot;%02d&quot;, (ms % 60000) / 1000)&#10;                                            &quot;$minutes:$seconds&quot;&#10;                                        } ?: &quot;N/A&quot;}&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Botón cerrar&#10;                    if (!isLoadingTrackInfo) {&#10;                        TextButton(&#10;                            onClick = {&#10;                                showFetchInfoDialog = false&#10;                                isLoadingTrackInfo = false&#10;                                fetchInfoError = null&#10;                            }&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;close&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    color = Color(0xFF888888)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.navigation&#10;&#10;import androidx.compose.runtime.Stable&#10;&#10;// Estados para navegación&#10;enum class Screen {&#10;    HOME,&#10;    SEARCH,&#10;    QUEUE,&#10;    CONFIG,&#10;    PLAYLISTS&#10;}&#10;&#10;@Stable&#10;data class MenuOption(val screen: Screen, val title: String)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.ui.navigation.MenuOption&#10;import com.plyr.ui.navigation.Screen&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    context: Context,&#10;    onNavigateToScreen: (Screen) -&gt; Unit&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var backPressedTime by remember { mutableStateOf(0L) }&#10;    var showExitMessage by remember { mutableStateOf(false) }&#10;    &#10;    // Handle double back press to exit&#10;    BackHandler {&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - backPressedTime &gt; 2000) {&#10;            backPressedTime = currentTime&#10;            showExitMessage = true&#10;            // Hide message after 2 seconds&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(2000)&#10;                showExitMessage = false&#10;            }&#10;        } else {&#10;            // Exit app&#10;            (context as? Activity)?.finish()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Terminal-style header&#10;        Text(&#10;            text = &quot;$ plyr_home&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Lista de opciones disponibles&#10;        val options = remember {&#10;            listOf(&#10;                MenuOption(Screen.SEARCH, &quot;&gt; search&quot;),&#10;                MenuOption(Screen.PLAYLISTS, &quot;&gt; playlists&quot;),&#10;                MenuOption(Screen.QUEUE, &quot;&gt; queue&quot;),&#10;                MenuOption(Screen.CONFIG, &quot;&gt; settings&quot;)&#10;            )&#10;        }&#10;        &#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                Text(&#10;                    text = option.title,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 20.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable {&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                            onNavigateToScreen(option.screen)&#10;                        }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Exit message&#10;        if (showExitMessage) {&#10;            Text(&#10;                text = &quot;&gt; Press back again to exit&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(top = 8.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun QueueScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_queue&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Queue content&#10;        if (playerViewModel != null) {&#10;            val queueState by playerViewModel.queueState.collectAsStateWithLifecycle()&#10;            val currentQueue = queueState.queue&#10;            &#10;            if (currentQueue.isNotEmpty()) {&#10;                // Queue header&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Current queue [${currentQueue.size}]&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFFFFD93D)&#10;                        )&#10;                    )&#10;                    &#10;                    // Clear queue button&#10;                    TextButton(&#10;                        onClick = { &#10;                            playerViewModel.clearQueue()&#10;                            Log.d(&quot;QueueScreen&quot;, &quot;Queue cleared by user&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;clear&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(Modifier.height(16.dp))&#10;                &#10;                // Queue track list&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(&#10;                        count = currentQueue.size,&#10;                        key = { index -&gt; currentQueue[index].id }&#10;                    ) { index -&gt;&#10;                        val track = currentQueue[index]&#10;                        val isCurrentTrack = queueState.currentIndex == index&#10;                        &#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp, horizontal = 4.dp)&#10;                                .clickable {&#10;                                    coroutineScope.launch {&#10;                                        if (queueState.currentIndex != index) {&#10;                                            playerViewModel.playQueueFromIndex(index)&#10;                                        } else {&#10;                                            playerViewModel.resumeIfPaused()&#10;                                        }&#10;                                    }&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Starting queue from index: $index&quot;)&#10;                                },&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Position and status indicator&#10;                            Text(&#10;                                text = if (isCurrentTrack) &quot;♪ &quot; else &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            // Track name&#10;                            MarqueeText(&#10;                                text = track.name,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFFE0E0E0) else Color(0xFFBDC3C7)&#10;                                ),&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            &#10;                            // Remove from queue button&#10;                            TextButton(&#10;                                onClick = { &#10;                                    playerViewModel.removeFromQueue(index)&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Removed track from queue at index: $index&quot;)&#10;                                }&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;×&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Empty queue message&#10;                Text(&#10;                    text = &quot;Queue is empty&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(32.dp)&#10;                )&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Player not available&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;&#10;/**&#10; * Extensiones para integrar PlayerViewModel con notificaciones de música&#10; * &#10; * Estas extensiones facilitan el uso del sistema de notificaciones&#10; * sin modificar directamente el PlayerViewModel existente.&#10; */&#10;&#10;/**&#10; * Inicializa el manager de notificaciones&#10; */&#10;fun PlayerViewModel.initializeNotifications(context: Context): MusicNotificationManager {&#10;    return MusicNotificationManager(context).apply {&#10;        startService()&#10;    }&#10;}&#10;&#10;/**&#10; * Reproduce un track con notificación&#10; */&#10;fun PlayerViewModel.playWithNotification(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity,&#10;    onAudioUrlReady: (String) -&gt; Unit&#10;) {&#10;    // Actualizar la información del track en la notificación&#10;    notificationManager.updateSongInfo(track)&#10;    &#10;    // Tu lógica existente de reproducción aquí&#10;    // Cuando tengas la URL de audio, llamar:&#10;    // onAudioUrlReady(audioUrl)&#10;}&#10;&#10;/**&#10; * Actualiza la notificación cuando cambia el track&#10; */&#10;fun PlayerViewModel.updateNotificationTrack(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity?&#10;) {&#10;    track?.let {&#10;        notificationManager.updateSongInfo(it.name, it.artists)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/viewmodel/PlayerViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/viewmodel/PlayerViewModel.kt" />
              <option name="originalContent" value="package com.plyr.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.media3.common.MediaItem&#10;import androidx.media3.common.Player&#10;import androidx.media3.common.PlaybackException&#10;import androidx.media3.common.AudioAttributes&#10;import androidx.media3.common.C&#10;import androidx.media3.exoplayer.ExoPlayer&#10;import com.plyr.network.YouTubeManager&#10;import com.plyr.utils.Config&#10;import com.plyr.database.TrackEntity&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import androidx.annotation.OptIn&#10;import androidx.media3.common.util.UnstableApi&#10;&#10;class PlayerViewModel(application: Application) : AndroidViewModel(application) {&#10;    private var _exoPlayer: ExoPlayer? = null&#10;    val exoPlayer: ExoPlayer? get() = _exoPlayer&#10;&#10;    private val _isLoading = MutableLiveData(false)&#10;    val isLoading: LiveData&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; = _error&#10;&#10;    private val _currentTitle = MutableLiveData&lt;String?&gt;()&#10;    val currentTitle: LiveData&lt;String?&gt; = _currentTitle&#10;&#10;    private val _currentPlaylist = MutableLiveData&lt;List&lt;TrackEntity&gt;?&gt;()&#10;    val currentPlaylist: LiveData&lt;List&lt;TrackEntity&gt;?&gt; = _currentPlaylist&#10;&#10;    private val _currentTrackIndex = MutableLiveData&lt;Int&gt;()&#10;    val currentTrackIndex: LiveData&lt;Int&gt; = _currentTrackIndex&#10;&#10;    private val _currentTrack = MutableLiveData&lt;TrackEntity?&gt;()&#10;    val currentTrack: LiveData&lt;TrackEntity?&gt; = _currentTrack&#10;&#10;    var onMediaSessionUpdate: ((ExoPlayer) -&gt; Unit)? = null&#10;&#10;    private var loadingJobsActive = false&#10;&#10;    fun initializePlayer() {&#10;        if (_exoPlayer == null) {&#10;            _exoPlayer = buildPlayer()&#10;        }&#10;    }&#10;&#10;    @OptIn(UnstableApi::class)&#10;    private fun buildPlayer(): ExoPlayer =&#10;        ExoPlayer.Builder(getApplication())&#10;            .setSeekBackIncrementMs(10_000)&#10;            .setSeekForwardIncrementMs(10_000)&#10;            .setHandleAudioBecomingNoisy(true)&#10;            .setAudioAttributes(&#10;                AudioAttributes.Builder()&#10;                    .setUsage(C.USAGE_MEDIA)&#10;                    .setContentType(C.AUDIO_CONTENT_TYPE_MUSIC)&#10;                    .build(),&#10;                true&#10;            )&#10;            .build().apply {&#10;                repeatMode = when (Config.getRepeatMode(getApplication())) {&#10;                    Config.REPEAT_MODE_ONE -&gt; Player.REPEAT_MODE_ONE&#10;                    Config.REPEAT_MODE_ALL -&gt; Player.REPEAT_MODE_ALL&#10;                    else -&gt; Player.REPEAT_MODE_OFF&#10;                }&#10;&#10;                addListener(object : Player.Listener {&#10;                    override fun onPlaybackStateChanged(playbackState: Int) {&#10;                        _isLoading.postValue(playbackState == Player.STATE_BUFFERING)&#10;                    }&#10;&#10;                    override fun onPlayerError(error: PlaybackException) {&#10;                        _isLoading.postValue(false)&#10;                        _error.postValue(&quot;Error: ${error.message}&quot;)&#10;                    }&#10;&#10;                    override fun onMediaItemTransition(mediaItem: MediaItem?, reason: Int) {&#10;                        updateCurrentTrackFromPlayer()&#10;                        onMediaSessionUpdate?.invoke(this@apply)&#10;                    }&#10;                })&#10;            }&#10;&#10;    suspend fun loadAudioFromTrack(track: TrackEntity): Boolean = withContext(Dispatchers.Main) {&#10;        try {&#10;            _isLoading.postValue(true)&#10;            _error.postValue(null)&#10;            _currentTitle.postValue(&quot;${track.name} - ${track.artists}&quot;)&#10;&#10;            val audioUrl = withContext(Dispatchers.IO) {&#10;                val videoId = track.youtubeVideoId ?: YouTubeManager.searchVideoId(&quot;${track.name} ${track.artists}&quot;)&#10;                videoId?.let { YouTubeManager.getAudioUrl(it) }&#10;            }&#10;&#10;            if (audioUrl == null) {&#10;                _isLoading.postValue(false)&#10;                _error.postValue(&quot;No se pudo obtener audio&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            initializePlayer()&#10;            _exoPlayer?.let { player -&gt;&#10;                player.setMediaItem(createMediaItem(track, audioUrl))&#10;                player.prepare()&#10;                player.play()&#10;                _isLoading.postValue(false)&#10;                onMediaSessionUpdate?.invoke(player)&#10;&#10;                // Iniciar carga concurrente de las siguientes canciones&#10;                startLoadingRemainingTracks()&#10;                true&#10;            } ?: false&#10;        } catch (e: Exception) {&#10;            _isLoading.postValue(false)&#10;            _error.postValue(&quot;Error: ${e.message}&quot;)&#10;            false&#10;        }&#10;    }&#10;&#10;    private fun createMediaItem(track: TrackEntity, audioUrl: String) =&#10;        MediaItem.Builder()&#10;            .setUri(audioUrl)&#10;            .setMediaId(track.id)&#10;            .setMediaMetadata(&#10;                androidx.media3.common.MediaMetadata.Builder()&#10;                    .setTitle(track.name)&#10;                    .setArtist(track.artists)&#10;                    .build()&#10;            )&#10;            .build()&#10;&#10;    private fun startLoadingRemainingTracks() {&#10;        if (loadingJobsActive) return&#10;        loadingJobsActive = true&#10;&#10;        val playlist = _currentPlaylist.value ?: return&#10;        val currentIndex = _currentTrackIndex.value ?: return&#10;&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            for (i in currentIndex + 1 until playlist.size) {&#10;                val track = playlist[i]&#10;                try {&#10;                    val videoId = track.youtubeVideoId ?: YouTubeManager.searchVideoId(&quot;${track.name} ${track.artists}&quot;) ?: continue&#10;                    val audioUrl = YouTubeManager.getAudioUrl(videoId) ?: continue&#10;&#10;                    withContext(Dispatchers.Main) {&#10;                        _exoPlayer?.addMediaItem(createMediaItem(track, audioUrl))&#10;                    }&#10;                } catch (_: Exception) {&#10;                    // Continuar con la siguiente canción si hay error&#10;                }&#10;            }&#10;            loadingJobsActive = false&#10;        }&#10;    }&#10;&#10;    private fun updateCurrentTrackFromPlayer() {&#10;        val player = _exoPlayer ?: return&#10;        val playlist = _currentPlaylist.value ?: return&#10;&#10;        val currentMediaId = player.currentMediaItem?.mediaId ?: return&#10;        val newIndex = playlist.indexOfFirst { it.id == currentMediaId }&#10;&#10;        if (newIndex &gt;= 0) {&#10;            _currentTrackIndex.postValue(newIndex)&#10;            _currentTrack.postValue(playlist[newIndex])&#10;            _currentTitle.postValue(&quot;${playlist[newIndex].name} - ${playlist[newIndex].artists}&quot;)&#10;        }&#10;    }&#10;&#10;    fun pausePlayer() = _exoPlayer?.pause()&#10;&#10;    fun playPlayer() = _exoPlayer?.play()&#10;&#10;    fun setCurrentPlaylist(playlist: List&lt;TrackEntity&gt;, startIndex: Int = 0) {&#10;        _currentPlaylist.postValue(playlist)&#10;        val validIndex = startIndex.coerceIn(0, playlist.size - 1)&#10;        _currentTrackIndex.postValue(validIndex)&#10;        if (playlist.isNotEmpty() &amp;&amp; validIndex in playlist.indices) {&#10;            _currentTrack.postValue(playlist[validIndex])&#10;        }&#10;    }&#10;&#10;    fun navigateToNext() {&#10;        _exoPlayer?.seekToNextMediaItem()&#10;    }&#10;&#10;    fun navigateToPrevious() {&#10;        _exoPlayer?.seekToPreviousMediaItem()&#10;    }&#10;&#10;    fun updateRepeatMode() {&#10;        _exoPlayer?.repeatMode = when (Config.getRepeatMode(getApplication())) {&#10;            Config.REPEAT_MODE_ONE -&gt; Player.REPEAT_MODE_ONE&#10;            Config.REPEAT_MODE_ALL -&gt; Player.REPEAT_MODE_ALL&#10;            else -&gt; Player.REPEAT_MODE_OFF&#10;        }&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        _exoPlayer?.release()&#10;        _exoPlayer = null&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.viewmodel&#10;&#10;import android.app.Application&#10;import androidx.lifecycle.AndroidViewModel&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.MutableLiveData&#10;import androidx.lifecycle.viewModelScope&#10;import androidx.media3.common.MediaItem&#10;import androidx.media3.common.Player&#10;import androidx.media3.common.PlaybackException&#10;import androidx.media3.common.AudioAttributes&#10;import androidx.media3.common.C&#10;import androidx.media3.exoplayer.ExoPlayer&#10;import com.plyr.network.YouTubeManager&#10;import com.plyr.utils.Config&#10;import com.plyr.database.TrackEntity&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import androidx.annotation.OptIn&#10;import androidx.media3.common.util.UnstableApi&#10;&#10;class PlayerViewModel(application: Application) : AndroidViewModel(application) {&#10;    private var _exoPlayer: ExoPlayer? = null&#10;    val exoPlayer: ExoPlayer? get() = _exoPlayer&#10;&#10;    private val _isLoading = MutableLiveData(false)&#10;    val isLoading: LiveData&lt;Boolean&gt; = _isLoading&#10;&#10;    private val _error = MutableLiveData&lt;String?&gt;()&#10;    val error: LiveData&lt;String?&gt; = _error&#10;&#10;    private val _currentTitle = MutableLiveData&lt;String?&gt;()&#10;    val currentTitle: LiveData&lt;String?&gt; = _currentTitle&#10;&#10;    private val _currentPlaylist = MutableLiveData&lt;List&lt;TrackEntity&gt;?&gt;()&#10;    val currentPlaylist: LiveData&lt;List&lt;TrackEntity&gt;?&gt; = _currentPlaylist&#10;&#10;    private val _currentTrackIndex = MutableLiveData&lt;Int&gt;()&#10;    val currentTrackIndex: LiveData&lt;Int&gt; = _currentTrackIndex&#10;&#10;    private val _currentTrack = MutableLiveData&lt;TrackEntity?&gt;()&#10;    val currentTrack: LiveData&lt;TrackEntity?&gt; = _currentTrack&#10;&#10;    // Queue management&#10;    private val _queueTracks = MutableLiveData&lt;List&lt;TrackEntity&gt;&gt;(emptyList())&#10;    val queueTracks: LiveData&lt;List&lt;TrackEntity&gt;&gt; = _queueTracks&#10;&#10;    var onMediaSessionUpdate: ((ExoPlayer) -&gt; Unit)? = null&#10;&#10;    private var loadingJobsActive = false&#10;&#10;    fun initializePlayer() {&#10;        if (_exoPlayer == null) {&#10;            _exoPlayer = buildPlayer()&#10;        }&#10;    }&#10;&#10;    @OptIn(UnstableApi::class)&#10;    private fun buildPlayer(): ExoPlayer =&#10;        ExoPlayer.Builder(getApplication())&#10;            .setSeekBackIncrementMs(10_000)&#10;            .setSeekForwardIncrementMs(10_000)&#10;            .setHandleAudioBecomingNoisy(true)&#10;            .setAudioAttributes(&#10;                AudioAttributes.Builder()&#10;                    .setUsage(C.USAGE_MEDIA)&#10;                    .setContentType(C.AUDIO_CONTENT_TYPE_MUSIC)&#10;                    .build(),&#10;                true&#10;            )&#10;            .build().apply {&#10;                repeatMode = when (Config.getRepeatMode(getApplication())) {&#10;                    Config.REPEAT_MODE_ONE -&gt; Player.REPEAT_MODE_ONE&#10;                    Config.REPEAT_MODE_ALL -&gt; Player.REPEAT_MODE_ALL&#10;                    else -&gt; Player.REPEAT_MODE_OFF&#10;                }&#10;&#10;                addListener(object : Player.Listener {&#10;                    override fun onPlaybackStateChanged(playbackState: Int) {&#10;                        _isLoading.postValue(playbackState == Player.STATE_BUFFERING)&#10;                    }&#10;&#10;                    override fun onPlayerError(error: PlaybackException) {&#10;                        _isLoading.postValue(false)&#10;                        _error.postValue(&quot;Error: ${error.message}&quot;)&#10;                    }&#10;&#10;                    override fun onMediaItemTransition(mediaItem: MediaItem?, reason: Int) {&#10;                        updateCurrentTrackFromPlayer()&#10;                        onMediaSessionUpdate?.invoke(this@apply)&#10;                    }&#10;                })&#10;            }&#10;&#10;    suspend fun loadAudioFromTrack(track: TrackEntity): Boolean = withContext(Dispatchers.Main) {&#10;        try {&#10;            _isLoading.postValue(true)&#10;            _error.postValue(null)&#10;            _currentTitle.postValue(&quot;${track.name} - ${track.artists}&quot;)&#10;&#10;            val audioUrl = withContext(Dispatchers.IO) {&#10;                val videoId = track.youtubeVideoId ?: YouTubeManager.searchVideoId(&quot;${track.name} ${track.artists}&quot;)&#10;                videoId?.let { YouTubeManager.getAudioUrl(it) }&#10;            }&#10;&#10;            if (audioUrl == null) {&#10;                _isLoading.postValue(false)&#10;                _error.postValue(&quot;No se pudo obtener audio&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            initializePlayer()&#10;            _exoPlayer?.let { player -&gt;&#10;                player.setMediaItem(createMediaItem(track, audioUrl))&#10;                player.prepare()&#10;                player.play()&#10;                _isLoading.postValue(false)&#10;                onMediaSessionUpdate?.invoke(player)&#10;&#10;                // Iniciar carga concurrente de las siguientes canciones&#10;                startLoadingRemainingTracks()&#10;                true&#10;            } ?: false&#10;        } catch (e: Exception) {&#10;            _isLoading.postValue(false)&#10;            _error.postValue(&quot;Error: ${e.message}&quot;)&#10;            false&#10;        }&#10;    }&#10;&#10;    private fun createMediaItem(track: TrackEntity, audioUrl: String) =&#10;        MediaItem.Builder()&#10;            .setUri(audioUrl)&#10;            .setMediaId(track.id)&#10;            .setMediaMetadata(&#10;                androidx.media3.common.MediaMetadata.Builder()&#10;                    .setTitle(track.name)&#10;                    .setArtist(track.artists)&#10;                    .build()&#10;            )&#10;            .build()&#10;&#10;    private fun startLoadingRemainingTracks() {&#10;        if (loadingJobsActive) return&#10;        loadingJobsActive = true&#10;&#10;        val playlist = _currentPlaylist.value ?: return&#10;        val currentIndex = _currentTrackIndex.value ?: return&#10;&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            for (i in currentIndex + 1 until playlist.size) {&#10;                val track = playlist[i]&#10;                try {&#10;                    val videoId = track.youtubeVideoId ?: YouTubeManager.searchVideoId(&quot;${track.name} ${track.artists}&quot;) ?: continue&#10;                    val audioUrl = YouTubeManager.getAudioUrl(videoId) ?: continue&#10;&#10;                    withContext(Dispatchers.Main) {&#10;                        _exoPlayer?.addMediaItem(createMediaItem(track, audioUrl))&#10;                    }&#10;                } catch (_: Exception) {&#10;                    // Continuar con la siguiente canción si hay error&#10;                }&#10;            }&#10;            loadingJobsActive = false&#10;        }&#10;    }&#10;&#10;    private fun updateCurrentTrackFromPlayer() {&#10;        val player = _exoPlayer ?: return&#10;        val playlist = _currentPlaylist.value ?: return&#10;&#10;        val currentMediaId = player.currentMediaItem?.mediaId ?: return&#10;        val newIndex = playlist.indexOfFirst { it.id == currentMediaId }&#10;&#10;        if (newIndex &gt;= 0) {&#10;            _currentTrackIndex.postValue(newIndex)&#10;            _currentTrack.postValue(playlist[newIndex])&#10;            _currentTitle.postValue(&quot;${playlist[newIndex].name} - ${playlist[newIndex].artists}&quot;)&#10;        }&#10;    }&#10;&#10;    fun pausePlayer() = _exoPlayer?.pause()&#10;&#10;    fun playPlayer() = _exoPlayer?.play()&#10;&#10;    fun setCurrentPlaylist(playlist: List&lt;TrackEntity&gt;, startIndex: Int = 0) {&#10;        _currentPlaylist.postValue(playlist)&#10;        val validIndex = startIndex.coerceIn(0, playlist.size - 1)&#10;        _currentTrackIndex.postValue(validIndex)&#10;        if (playlist.isNotEmpty() &amp;&amp; validIndex in playlist.indices) {&#10;            _currentTrack.postValue(playlist[validIndex])&#10;        }&#10;    }&#10;&#10;    fun navigateToNext() {&#10;        _exoPlayer?.seekToNextMediaItem()&#10;    }&#10;&#10;    fun navigateToPrevious() {&#10;        _exoPlayer?.seekToPreviousMediaItem()&#10;    }&#10;&#10;    fun updateRepeatMode() {&#10;        _exoPlayer?.repeatMode = when (Config.getRepeatMode(getApplication())) {&#10;            Config.REPEAT_MODE_ONE -&gt; Player.REPEAT_MODE_ONE&#10;            Config.REPEAT_MODE_ALL -&gt; Player.REPEAT_MODE_ALL&#10;            else -&gt; Player.REPEAT_MODE_OFF&#10;        }&#10;    }&#10;&#10;    // Queue functionality&#10;    fun addToQueue(track: TrackEntity) {&#10;        // Añadir a la lista interna de queue&#10;        val updatedQueue = _queueTracks.value?.toMutableList() ?: mutableListOf()&#10;        updatedQueue.add(track)&#10;        _queueTracks.postValue(updatedQueue)&#10;        &#10;        // Añadir también a la playlist actual para que se muestre en QueueScreen&#10;        val currentPlaylist = _currentPlaylist.value?.toMutableList() ?: mutableListOf()&#10;        currentPlaylist.add(track)&#10;        _currentPlaylist.postValue(currentPlaylist)&#10;        &#10;        // Cargar el audio del track en el reproductor de forma asíncrona&#10;        viewModelScope.launch(Dispatchers.IO) {&#10;            try {&#10;                val videoId = track.youtubeVideoId ?: YouTubeManager.searchVideoId(&quot;${track.name} ${track.artists}&quot;)&#10;                val audioUrl = videoId?.let { YouTubeManager.getAudioUrl(it) }&#10;                &#10;                if (audioUrl != null) {&#10;                    withContext(Dispatchers.Main) {&#10;                        _exoPlayer?.addMediaItem(createMediaItem(track, audioUrl))&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                android.util.Log.e(&quot;PlayerViewModel&quot;, &quot;Error loading track to queue: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun playNextInQueue() {&#10;        val nextTrack = _queueTracks.value?.firstOrNull() ?: return&#10;        removeFromQueue(nextTrack)&#10;    }&#10;&#10;    private fun removeFromQueue(track: TrackEntity) {&#10;        val updatedQueue = _queueTracks.value?.toMutableList() ?: return&#10;        updatedQueue.remove(track)&#10;        _queueTracks.postValue(updatedQueue)&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        _exoPlayer?.release()&#10;        _exoPlayer = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>