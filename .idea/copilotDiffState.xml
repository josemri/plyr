<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt" />
              <option name="updatedContent" value="package com.plyr.examples&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de integración del sistema de notificaciones de música&#10; * &#10; * Este archivo muestra cómo implementar las notificaciones en tu MainActivity.&#10; * Copia este código a tu MainActivity existente.&#10; */&#10;class NotificationIntegrationExample {&#10;    &#10;    // En tu MainActivity, agrega estas propiedades:&#10;    private lateinit var notificationManager: MusicNotificationManager&#10;    private lateinit var playerViewModel: PlayerViewModel&#10;    &#10;    // Launcher para pedir permisos de notificación (Android 13+)&#10;    private val notificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Permiso concedido, continuar con la inicialización&#10;            initializeNotificationSystem()&#10;        } else {&#10;            // Permiso denegado, manejar el caso apropiadamente&#10;            // Puedes mostrar un mensaje al usuario explicando por qué necesitas el permiso&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Llama este método en onCreate() de tu MainActivity&#10;     */&#10;    fun setupNotificationSystem(activity: ComponentActivity, viewModel: PlayerViewModel) {&#10;        playerViewModel = viewModel&#10;        &#10;        // Verificar y pedir permisos de notificación para Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            when {&#10;                ContextCompat.checkSelfPermission(&#10;                    activity,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10;                    // Permiso ya concedido&#10;                    initializeNotificationSystem()&#10;                }&#10;                else -&gt; {&#10;                    // Pedir permiso&#10;                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                }&#10;            }&#10;        } else {&#10;            // Android 12 y menores no necesitan permiso explícito&#10;            initializeNotificationSystem()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicializa el sistema de notificaciones&#10;     */&#10;    private fun initializeNotificationSystem() {&#10;        notificationManager = MusicNotificationManager(this)&#10;        notificationManager.startService()&#10;        &#10;        // Configurar listeners para actualizar notificación cuando cambie el track&#10;        setupNotificationListeners()&#10;    }&#10;    &#10;    /**&#10;     * Configura los listeners para sincronizar el PlayerViewModel con las notificaciones&#10;     */&#10;    private fun setupNotificationListeners() {&#10;        // Observar cambios en el track actual&#10;        playerViewModel.currentTrack.observe(this) { track -&gt;&#10;            track?.let {&#10;                notificationManager.updateSongInfo(it.name, it.artists)&#10;            }&#10;        }&#10;        &#10;        // Observar cambios en el título actual&#10;        playerViewModel.currentTitle.observe(this) { title -&gt;&#10;            title?.let {&#10;                // Si tienes información del artista disponible&#10;                val artist = &quot;Artista Desconocido&quot; // Reemplaza con la fuente real del artista&#10;                notificationManager.updateSongInfo(it, artist)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo de cómo reproducir una canción con notificación&#10;     */&#10;    fun playTrackWithNotification(audioUrl: String, title: String, artist: String) {&#10;        lifecycleScope.launch {&#10;            // Actualizar información en la notificación&#10;            notificationManager.updateSongInfo(title, artist)&#10;            &#10;            // Reproducir el audio en el servicio de notificación&#10;            notificationManager.playAudio(audioUrl, title, artist)&#10;            &#10;            // También reproducir en tu PlayerViewModel existente&#10;            // playerViewModel.playAudio(audioUrl) // Tu método existente&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Limpieza en onDestroy()&#10;     */&#10;    fun cleanupNotificationSystem() {&#10;        if (::notificationManager.isInitialized) {&#10;            notificationManager.stopService()&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * INTEGRACIÓN COMPLETA EN TU MAINACTIVITY:&#10; * &#10; * class MainActivity : ComponentActivity() {&#10; *     private lateinit var notificationManager: MusicNotificationManager&#10; *     private lateinit var playerViewModel: PlayerViewModel&#10; *     &#10; *     // Launcher para permisos de notificación&#10; *     private val notificationPermissionLauncher = registerForActivityResult(&#10; *         ActivityResultContracts.RequestPermission()&#10; *     ) { isGranted -&gt;&#10; *         if (isGranted) {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onCreate(savedInstanceState: Bundle?) {&#10; *         super.onCreate(savedInstanceState)&#10; *         &#10; *         // Tu código existente...&#10; *         playerViewModel = ViewModelProvider(this)[PlayerViewModel::class.java]&#10; *         &#10; *         // Configurar notificaciones&#10; *         setupNotificationSystem()&#10; *         &#10; *         // Tu código de Compose...&#10; *     }&#10; *     &#10; *     private fun setupNotificationSystem() {&#10; *         if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10; *             when {&#10; *                 ContextCompat.checkSelfPermission(&#10; *                     this, Manifest.permission.POST_NOTIFICATIONS&#10; *                 ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10; *                     initializeNotificationSystem()&#10; *                 }&#10; *                 else -&gt; {&#10; *                     notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10; *                 }&#10; *             }&#10; *         } else {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     private fun initializeNotificationSystem() {&#10; *         notificationManager = MusicNotificationManager(this)&#10; *         notificationManager.startService()&#10; *         &#10; *         // Observar cambios en el track actual&#10; *         playerViewModel.currentTrack.observe(this) { track -&gt;&#10; *             track?.let {&#10; *                 notificationManager.updateSongInfo(it.name, it.artists)&#10; *             }&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onDestroy() {&#10; *         super.onDestroy()&#10; *         if (::notificationManager.isInitialized) {&#10; *             notificationManager.stopService()&#10; *         }&#10; *     }&#10; * }&#10; */" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/network/SpotifyRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/network/SpotifyRepository.kt" />
              <option name="originalContent" value="package com.plyr.network&#10;&#10;import android.annotation.SuppressLint&#10;import com.google.gson.Gson&#10;import com.google.gson.annotations.SerializedName&#10;import okhttp3.*&#10;import okhttp3.MediaType.Companion.toMediaType&#10;import okhttp3.RequestBody.Companion.toRequestBody&#10;import java.io.IOException&#10;import android.util.Base64&#10;import android.content.Context&#10;import com.plyr.utils.Config&#10;import androidx.core.net.toUri&#10;&#10;object SpotifyRepository {&#10;    &#10;    private val client = OkHttpClient()&#10;    private val gson = Gson()&#10;    &#10;    // URLs de Spotify&#10;    private const val AUTH_URL = &quot;https://accounts.spotify.com/authorize&quot;&#10;    private const val TOKEN_URL = &quot;https://accounts.spotify.com/api/token&quot;&#10;    private const val API_BASE_URL = &quot;https://api.spotify.com/v1&quot;&#10;    &#10;    // Generar URL de autorización&#10;    fun getAuthorizationUrl(context: Context): String? {&#10;        val clientId = Config.getSpotifyClientId(context)&#10;        return if (clientId != null) {&#10;            &quot;$AUTH_URL?client_id=$clientId&amp;response_type=code&amp;redirect_uri=${Config.SPOTIFY_REDIRECT_URI}&amp;scope=${Config.SPOTIFY_SCOPES.replace(&quot; &quot;, &quot;%20&quot;)}&quot;&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Iniciar flujo OAuth (abrir browser)&#10;    @SuppressLint(&quot;UseKtx&quot;)&#10;    fun startOAuthFlow(context: Context): Boolean {&#10;        val authUrl = getAuthorizationUrl(context)&#10;        return if (authUrl != null) {&#10;            val intent = android.content.Intent(android.content.Intent.ACTION_VIEW, authUrl.toUri())&#10;            context.startActivity(intent)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;    &#10;    // Intercambiar código de autorización por tokens&#10;    fun exchangeCodeForTokens(context: Context, authCode: String, callback: (SpotifyTokens?, String?) -&gt; Unit) {&#10;        if (!Config.hasSpotifyCredentials(context)) {&#10;            callback(null, &quot;Spotify credentials not configured&quot;)&#10;            return&#10;        }&#10;        &#10;        val authHeader = createBasicAuthHeader(context)&#10;        val formBody = FormBody.Builder()&#10;            .add(&quot;grant_type&quot;, &quot;authorization_code&quot;)&#10;            .add(&quot;code&quot;, authCode)&#10;            .add(&quot;redirect_uri&quot;, Config.SPOTIFY_REDIRECT_URI)&#10;            .build()&#10;        &#10;        val request = Request.Builder()&#10;            .url(TOKEN_URL)&#10;            .addHeader(&quot;Authorization&quot;, authHeader)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)&#10;            .post(formBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val tokens = gson.fromJson(body, SpotifyTokens::class.java)&#10;                        callback(tokens, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing tokens: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Renovar access token usando refresh token&#10;    fun refreshAccessToken(context: Context, refreshToken: String, callback: (String?, String?) -&gt; Unit) {&#10;        if (!Config.hasSpotifyCredentials(context)) {&#10;            callback(null, &quot;Spotify credentials not configured&quot;)&#10;            return&#10;        }&#10;        &#10;        val authHeader = createBasicAuthHeader(context)&#10;        val formBody = FormBody.Builder()&#10;            .add(&quot;grant_type&quot;, &quot;refresh_token&quot;)&#10;            .add(&quot;refresh_token&quot;, refreshToken)&#10;            .build()&#10;        &#10;        val request = Request.Builder()&#10;            .url(TOKEN_URL)&#10;            .addHeader(&quot;Authorization&quot;, authHeader)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)&#10;            .post(formBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val tokens = gson.fromJson(body, SpotifyTokens::class.java)&#10;                        callback(tokens.accessToken, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing token: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener playlists del usuario con paginación (versión original para compatibilidad)&#10;    fun getUserPlaylists(accessToken: String, callback: (List&lt;SpotifyPlaylist&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allPlaylists = mutableListOf&lt;SpotifyPlaylist&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/me/playlists?limit=$maxLimit&amp;offset=$offset&amp;fields=items(id,name,description,tracks(total),images)&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User playlists response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val playlistResponse = gson.fromJson(body, SpotifyPlaylistResponse::class.java)&#10;                            &#10;                            // Debug: log tracks data for cada playlist&#10;                            playlistResponse.items.forEachIndexed { index, playlist -&gt;&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist $index - '${playlist.name}': tracks=${playlist.tracks}, tracks.total=${playlist.tracks?.total}&quot;)&#10;                            }&#10;                            &#10;                            // Acumular resultados&#10;                            allPlaylists.addAll(playlistResponse.items)&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${playlistResponse.items.size} playlists, total accumulated: ${allPlaylists.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allPlaylists.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMorePlaylists = playlistResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMorePlaylists &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next playlists page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlists pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlists pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final playlists count: ${allPlaylists.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing playlists: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener tracks de un álbum con paginación&#10;    fun getAlbumTracks(accessToken: String, albumId: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allTracks = mutableListOf&lt;SpotifyTrack&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/albums/$albumId/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val tracksResponse = gson.fromJson(body, SpotifyTracksSearchResultRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(tracksResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracksResponse.items.filterNotNull().size} tracks, total accumulated: ${allTracks.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = tracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next album tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final album tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing album tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener tracks de una playlist con paginación&#10;    fun getPlaylistTracks(accessToken: String, playlistId: String, callback: (List&lt;SpotifyPlaylistTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allTracks = mutableListOf&lt;SpotifyPlaylistTrack&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val tracksResponse = gson.fromJson(body, SpotifyPlaylistTracksResponseRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(tracksResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracksResponse.items.filterNotNull().size} tracks, total accumulated: ${allTracks.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = tracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next playlist tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final playlist tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing playlist tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener álbumes de un artista con paginación&#10;    fun getArtistAlbums(accessToken: String, artistId: String, callback: (List&lt;SpotifyAlbum&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allAlbums = mutableListOf&lt;SpotifyAlbum&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/artists/$artistId/albums?include_groups=album,single&amp;limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val albumsResponse = gson.fromJson(body, SpotifyAlbumsSearchResultRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allAlbums.addAll(albumsResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${albumsResponse.items.filterNotNull().size} albums, total accumulated: ${allAlbums.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allAlbums.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreAlbums = albumsResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreAlbums &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next artist albums page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final artist albums count: ${allAlbums.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing artist albums: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Buscar todo tipo de contenido en Spotify (canciones, álbumes, artistas, playlists)&#10;    fun searchAll(accessToken: String, query: String, callback: (SpotifySearchAllResponse?, String?) -&gt; Unit) {&#10;        val encodedQuery = java.net.URLEncoder.encode(query, &quot;UTF-8&quot;)&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/search?q=$encodedQuery&amp;type=track,album,artist,playlist&amp;limit=50&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Search all response: $body&quot;)&#10;                        val searchResponse = gson.fromJson(body, SpotifySearchAllResponse::class.java)&#10;                        callback(searchResponse, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing search results: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Seguir una playlist en Spotify&#10;    fun followPlaylist(accessToken: String, playlistId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/playlists/$playlistId/followers&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(&quot;{}&quot;.toRequestBody(&quot;application/json&quot;.toMediaType()))&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Dejar de seguir (eliminar) una playlist en Spotify&#10;    fun unfollowPlaylist(accessToken: String, playlistId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/playlists/$playlistId/followers&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .delete()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Añadir una canción a una playlist en Spotify&#10;    fun addTrackToPlaylist(accessToken: String, playlistId: String, trackId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val jsonBody = gson.toJson(mapOf(&quot;uris&quot; to listOf(&quot;spotify:track:$trackId&quot;)))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .post(requestBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Eliminar una canción de una playlist en Spotify&#10;    fun removeTrackFromPlaylist(accessToken: String, playlistId: String, trackId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val jsonBody = gson.toJson(mapOf(&quot;tracks&quot; to listOf(mapOf(&quot;uri&quot; to &quot;spotify:track:$trackId&quot;))))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .delete(requestBody)&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Buscar todo tipo de contenido en Spotify con paginación automática&#10;    fun searchAllWithPagination(accessToken: String, query: String, callback: (SpotifySearchAllResponse?, String?) -&gt; Unit) {&#10;        // Por ahora, usar la función searchAll existente que ya maneja los resultados&#10;        searchAll(accessToken, query, callback)&#10;    }&#10;&#10;    // Guardar álbum en la biblioteca del usuario&#10;    fun saveAlbum(accessToken: String, albumId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val jsonBody = gson.toJson(mapOf(&quot;ids&quot; to listOf(albumId)))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me/albums&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(requestBody)&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Crear una nueva playlist en Spotify&#10;    fun createPlaylist(accessToken: String, name: String, description: String, isPublic: Boolean, trackIds: List&lt;String&gt; = emptyList(), callback: (Boolean, String?) -&gt; Unit) {&#10;        // Primero necesitamos obtener el ID del usuario&#10;        getUserProfile(accessToken) { userId, error -&gt;&#10;            if (userId != null) {&#10;                val playlistData = mapOf(&#10;                    &quot;name&quot; to name,&#10;                    &quot;description&quot; to description,&#10;                    &quot;public&quot; to isPublic&#10;                )&#10;                val jsonBody = gson.toJson(playlistData)&#10;                val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;                val request = Request.Builder()&#10;                    .url(&quot;$API_BASE_URL/users/$userId/playlists&quot;)&#10;                    .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                    .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                    .post(requestBody)&#10;                    .build()&#10;&#10;                client.newCall(request).enqueue(object : Callback {&#10;                    override fun onFailure(call: Call, e: IOException) {&#10;                        callback(false, &quot;Error de red: ${e.message}&quot;)&#10;                    }&#10;&#10;                    override fun onResponse(call: Call, response: Response) {&#10;                        val body = response.body.string()&#10;                        if (response.isSuccessful) {&#10;                            // Si hay canciones para añadir, las añadimos ahora&#10;                            if (trackIds.isNotEmpty()) {&#10;                                try {&#10;                                    val createdPlaylist = gson.fromJson(body, SpotifyPlaylist::class.java)&#10;                                    // Añadir las canciones a la playlist recién creada&#10;                                    addTracksToPlaylist(accessToken, createdPlaylist.id, trackIds) { success, errorMsg -&gt;&#10;                                        if (success) {&#10;                                            callback(true, null)&#10;                                        } else {&#10;                                            callback(false, &quot;Playlist creada pero error añadiendo canciones: $errorMsg&quot;)&#10;                                        }&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    callback(false, &quot;Error procesando playlist creada: ${e.message}&quot;)&#10;                                }&#10;                            } else {&#10;                                callback(true, null)&#10;                            }&#10;                        } else {&#10;                            callback(false, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                        }&#10;                    }&#10;                })&#10;            } else {&#10;                callback(false, error ?: &quot;Error obteniendo perfil de usuario&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Añadir múltiples canciones a una playlist&#10;    fun addTracksToPlaylist(accessToken: String, playlistId: String, trackIds: List&lt;String&gt;, callback: (Boolean, String?) -&gt; Unit) {&#10;        val uris = trackIds.map { &quot;spotify:track:$it&quot; }&#10;        val jsonBody = gson.toJson(mapOf(&quot;uris&quot; to uris))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .post(requestBody)&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener el perfil del usuario (necesario para crear playlists)&#10;    private fun getUserProfile(accessToken: String, callback: (String?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val userProfile = gson.fromJson(body, SpotifyUserProfile::class.java)&#10;                        callback(userProfile.id, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing user profile: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun createBasicAuthHeader(context: Context): String {&#10;        val credentials = &quot;${Config.getSpotifyClientId(context)}:${Config.getSpotifyClientSecret(context)}&quot;&#10;        val encodedCredentials = Base64.encodeToString(credentials.toByteArray(), Base64.NO_WRAP)&#10;        return &quot;Basic $encodedCredentials&quot;&#10;    }&#10;&#10;    // Obtener un track por ID&#10;    fun getTrack(accessToken: String, trackId: String, callback: (SpotifyTrack?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/tracks/$trackId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val track = gson.fromJson(body, SpotifyTrack::class.java)&#10;                        callback(track, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing track: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener información detallada de un track (incluye información del álbum)&#10;    fun getTrackInfo(accessToken: String, trackId: String, callback: (SpotifyTrack?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/tracks/$trackId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Track info response: $body&quot;)&#10;                        val track = gson.fromJson(body, SpotifyTrack::class.java)&#10;                        callback(track, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing track info: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener una playlist por ID&#10;    fun getPlaylist(accessToken: String, playlistId: String, callback: (SpotifyPlaylist?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/playlists/$playlistId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val playlist = gson.fromJson(body, SpotifyPlaylist::class.java)&#10;                        callback(playlist, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing playlist: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener un álbum por ID&#10;    fun getAlbum(accessToken: String, albumId: String, callback: (SpotifyAlbum?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/albums/$albumId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val album = gson.fromJson(body, SpotifyAlbum::class.java)&#10;                        callback(album, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing album: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener un artista por ID&#10;    fun getArtist(accessToken: String, artistId: String, callback: (SpotifyArtistFull?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/artists/$artistId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val artist = gson.fromJson(body, SpotifyArtistFull::class.java)&#10;                        callback(artist, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing artist: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener canciones favoritas del usuario (Liked Songs) con paginación&#10;    fun getUserSavedTracks(accessToken: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allTracks = mutableListOf&lt;SpotifyTrack&gt;()&#10;        var pageCount = 0&#10;&#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/me/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;&#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;&#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User saved tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val savedTracksResponse = gson.fromJson(body, SpotifySavedTracksResponse::class.java)&#10;&#10;                            // Extraer los tracks de los items y filtrar nulls&#10;                            val tracks = savedTracksResponse.items.mapNotNull { it.track }&#10;                            allTracks.addAll(tracks)&#10;                            pageCount++&#10;&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracks.size} saved tracks, total accumulated: ${allTracks.size}&quot;)&#10;&#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;&#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = savedTracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;&#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next saved tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Saved tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Saved tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final saved tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing saved tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;&#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;&#10;    // Añadir una canción a Liked Songs (favoritos del usuario)&#10;    fun saveTrack(accessToken: String, trackId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me/tracks?ids=$trackId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(&quot;{}&quot;.toRequestBody(&quot;application/json&quot;.toMediaType()))&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;✓ Track añadido a Liked Songs: $trackId&quot;)&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    android.util.Log.e(&quot;SpotifyRepository&quot;, &quot;Error añadiendo a Liked Songs: ${response.code} - $errorBody&quot;)&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Quitar una canción de Liked Songs (favoritos del usuario)&#10;    fun removeTrack(accessToken: String, trackId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val jsonBody = gson.toJson(mapOf(&quot;ids&quot; to listOf(trackId)))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me/tracks&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .delete(requestBody)&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;✓ Track eliminado de Liked Songs: $trackId&quot;)&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    android.util.Log.e(&quot;SpotifyRepository&quot;, &quot;Error eliminando de Liked Songs: ${response.code} - $errorBody&quot;)&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Verificar si una canción está en Liked Songs&#10;    fun checkSavedTrack(accessToken: String, trackId: String, callback: (Boolean?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me/tracks/contains?ids=$trackId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val result = gson.fromJson(body, Array&lt;Boolean&gt;::class.java)&#10;                        callback(result.firstOrNull() ?: false, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing response: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener álbumes guardados del usuario (con paginación)&#10;    fun getUserSavedAlbums(accessToken: String, callback: (List&lt;SpotifyAlbum&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allAlbums = mutableListOf&lt;SpotifyAlbum&gt;()&#10;        var pageCount = 0&#10;&#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/me/albums?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;&#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;&#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User saved albums response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val savedAlbumsResponse = gson.fromJson(body, SpotifySavedAlbumsResponse::class.java)&#10;&#10;                            // Extraer los álbumes de los items y filtrar nulls&#10;                            val albums = savedAlbumsResponse.items.mapNotNull { it.album }&#10;                            allAlbums.addAll(albums)&#10;                            pageCount++&#10;&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${albums.size} saved albums, total accumulated: ${allAlbums.size}&quot;)&#10;&#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allAlbums.toList(), null)&#10;&#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreAlbums = savedAlbumsResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;&#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreAlbums &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next saved albums page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Saved albums pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Saved albums pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final saved albums count: ${allAlbums.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing saved albums: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;&#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;&#10;    // Obtener artistas seguidos del usuario (con paginación)&#10;    fun getUserFollowedArtists(accessToken: String, callback: (List&lt;SpotifyArtistFull&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allArtists = mutableListOf&lt;SpotifyArtistFull&gt;()&#10;        var pageCount = 0&#10;&#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(after: String? = null) {&#10;            val url = if (after != null) {&#10;                &quot;$API_BASE_URL/me/following?type=artist&amp;limit=$maxLimit&amp;after=$after&quot;&#10;            } else {&#10;                &quot;$API_BASE_URL/me/following?type=artist&amp;limit=$maxLimit&quot;&#10;            }&#10;&#10;            val request = Request.Builder()&#10;                .url(url)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;&#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;&#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User followed artists response (after=$after): ${body.take(200)}...&quot;)&#10;                            val followedArtistsResponse = gson.fromJson(body, SpotifyFollowedArtistsResponse::class.java)&#10;&#10;                            // Extraer los artistas&#10;                            val artists = followedArtistsResponse.artists.items&#10;                            allArtists.addAll(artists)&#10;                            pageCount++&#10;&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${artists.size} followed artists, total accumulated: ${allArtists.size}&quot;)&#10;&#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allArtists.toList(), null)&#10;&#10;                            // Verificar si hay más páginas que cargar&#10;                            val nextCursor = followedArtistsResponse.artists.cursors?.after&#10;                            val hasMoreArtists = nextCursor != null &amp;&amp; artists.size == maxLimit&#10;&#10;                            // Si hay más contenido, continuar paginando&#10;                            if (hasMoreArtists) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next followed artists page: after=$nextCursor&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextCursor)&#10;                                }, 200)&#10;                            } else {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Followed artists pagination completed: no more results available&quot;)&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final followed artists count: ${allArtists.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing followed artists: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;&#10;        // Iniciar la paginación&#10;        fetchPage(null)&#10;    }&#10;}&#10;&#10;&#10;// Data classes para Spotify API&#10;data class SpotifyTokens(&#10;    @SerializedName(&quot;access_token&quot;) val accessToken: String,&#10;    @SerializedName(&quot;token_type&quot;) val tokenType: String,&#10;    @SerializedName(&quot;scope&quot;) val scope: String,&#10;    @SerializedName(&quot;expires_in&quot;) val expiresIn: Int,&#10;    @SerializedName(&quot;refresh_token&quot;) val refreshToken: String?&#10;)&#10;&#10;data class SpotifyPlaylistResponse(&#10;    val items: List&lt;SpotifyPlaylist&gt;&#10;)&#10;&#10;data class SpotifyPlaylist(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String?,&#10;    val tracks: SpotifyPlaylistTracks?,&#10;    val images: List&lt;SpotifyImage&gt;?&#10;) {&#10;&#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyPlaylistTracks(&#10;    val href: String?,&#10;    val total: Int&#10;)&#10;&#10;data class SpotifyImage(&#10;    val url: String,&#10;    val height: Int?,&#10;    val width: Int?&#10;)&#10;&#10;data class SpotifyTrack(&#10;    val id: String,&#10;    val name: String,&#10;    val artists: List&lt;SpotifyArtist&gt;,&#10;    @SerializedName(&quot;duration_ms&quot;) val durationMs: Int? = null,&#10;    val album: SpotifyAlbumSimple? = null&#10;) {&#10;    fun getArtistNames(): String {&#10;        return artists.joinToString(&quot;, &quot;) { it.name }&#10;    }&#10;    &#10;    fun getDisplayName(): String {&#10;        return &quot;$name - ${getArtistNames()}&quot;&#10;    }&#10;&#10;}&#10;&#10;// Simplified album info for track details&#10;data class SpotifyAlbumSimple(&#10;    val id: String,&#10;    val name: String,&#10;    @SerializedName(&quot;release_date&quot;) val releaseDate: String? = null,&#10;    val images: List&lt;SpotifyImage&gt;? = null&#10;)&#10;&#10;data class SpotifySearchAllResponse(&#10;    val tracks: SpotifyTracksSearchResult,&#10;    val albums: SpotifyAlbumsSearchResult,&#10;    val artists: SpotifyArtistsSearchResult,&#10;    val playlists: SpotifyPlaylistsSearchResult&#10;)&#10;&#10;data class SpotifyTracksSearchResult(&#10;    val items: List&lt;SpotifyTrack&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbumsSearchResult(&#10;    val items: List&lt;SpotifyAlbum&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyArtistsSearchResult(&#10;    val items: List&lt;SpotifyArtistFull&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistsSearchResult(&#10;    val items: List&lt;SpotifyPlaylist?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbum(&#10;    val id: String,&#10;    val name: String,&#10;    val artists: List&lt;SpotifyArtist&gt;,&#10;    val images: List&lt;SpotifyImage&gt;?,&#10;    @SerializedName(&quot;release_date&quot;) val releasedate: String? = null,&#10;    @SerializedName(&quot;total_tracks&quot;) val totaltracks: Int? = null&#10;) {&#10;    fun getArtistNames(): String {&#10;        return artists.joinToString(&quot;, &quot;) { it.name }&#10;    }&#10;&#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyArtistFull(&#10;    val id: String,&#10;    val name: String,&#10;    val images: List&lt;SpotifyImage&gt;?,&#10;    val followers: SpotifyFollowers?,&#10;    val genres: List&lt;String&gt;?&#10;) {&#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;&#10;}&#10;&#10;data class SpotifyFollowers(&#10;    val total: Int&#10;)&#10;&#10;data class SpotifyArtist(&#10;    val name: String&#10;)&#10;&#10;data class SpotifyPlaylistTracksResponseRaw(&#10;    val items: List&lt;SpotifyPlaylistTrack?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistTrack(&#10;    val track: SpotifyTrack?&#10;)&#10;&#10;// Data classes auxiliares para parsing (con nullable items)&#10;data class SpotifyTracksSearchResultRaw(&#10;    val items: List&lt;SpotifyTrack?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbumsSearchResultRaw(&#10;    val items: List&lt;SpotifyAlbum?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;// Data class para perfil de usuario de Spotify&#10;data class SpotifyUserProfile(&#10;    val id: String,&#10;    @SerializedName(&quot;display_name&quot;) val displayName: String?,&#10;    val email: String?,&#10;    val images: List&lt;SpotifyImage&gt;?&#10;)&#10;&#10;data class SpotifySavedTracksResponse(&#10;    val items: List&lt;SpotifySavedTrackItem&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifySavedTrackItem(&#10;    val track: SpotifyTrack?&#10;)&#10;&#10;data class SpotifySavedAlbumsResponse(&#10;    val items: List&lt;SpotifySavedAlbumItem&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifySavedAlbumItem(&#10;    val album: SpotifyAlbum?,&#10;    @SerializedName(&quot;added_at&quot;) val addedAt: String?&#10;)&#10;&#10;data class SpotifyFollowedArtistsResponse(&#10;    val artists: SpotifyArtistsPage&#10;)&#10;&#10;data class SpotifyArtistsPage(&#10;    val items: List&lt;SpotifyArtistFull&gt;,&#10;    val total: Int,&#10;    val limit: Int,&#10;    val offset: Int,&#10;    val cursors: SpotifyCursors&#10;)&#10;&#10;data class SpotifyCursors(&#10;    val before: String?,&#10;    val after: String?&#10;)&#10;" />
              <option name="updatedContent" value="package com.plyr.network&#10;&#10;import android.annotation.SuppressLint&#10;import com.google.gson.Gson&#10;import com.google.gson.annotations.SerializedName&#10;import okhttp3.*&#10;import okhttp3.MediaType.Companion.toMediaType&#10;import okhttp3.RequestBody.Companion.toRequestBody&#10;import java.io.IOException&#10;import android.util.Base64&#10;import android.content.Context&#10;import com.plyr.utils.Config&#10;import androidx.core.net.toUri&#10;&#10;object SpotifyRepository {&#10;    &#10;    private val client = OkHttpClient()&#10;    private val gson = Gson()&#10;    &#10;    // URLs de Spotify&#10;    private const val AUTH_URL = &quot;https://accounts.spotify.com/authorize&quot;&#10;    private const val TOKEN_URL = &quot;https://accounts.spotify.com/api/token&quot;&#10;    private const val API_BASE_URL = &quot;https://api.spotify.com/v1&quot;&#10;    &#10;    // Generar URL de autorización&#10;    fun getAuthorizationUrl(context: Context): String? {&#10;        val clientId = Config.getSpotifyClientId(context)&#10;        return if (clientId != null) {&#10;            &quot;$AUTH_URL?client_id=$clientId&amp;response_type=code&amp;redirect_uri=${Config.SPOTIFY_REDIRECT_URI}&amp;scope=${Config.SPOTIFY_SCOPES.replace(&quot; &quot;, &quot;%20&quot;)}&quot;&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Iniciar flujo OAuth (abrir browser)&#10;    @SuppressLint(&quot;UseKtx&quot;)&#10;    fun startOAuthFlow(context: Context): Boolean {&#10;        val authUrl = getAuthorizationUrl(context)&#10;        return if (authUrl != null) {&#10;            val intent = android.content.Intent(android.content.Intent.ACTION_VIEW, authUrl.toUri())&#10;            context.startActivity(intent)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;    &#10;    // Intercambiar código de autorización por tokens&#10;    fun exchangeCodeForTokens(context: Context, authCode: String, callback: (SpotifyTokens?, String?) -&gt; Unit) {&#10;        if (!Config.hasSpotifyCredentials(context)) {&#10;            callback(null, &quot;Spotify credentials not configured&quot;)&#10;            return&#10;        }&#10;        &#10;        val authHeader = createBasicAuthHeader(context)&#10;        val formBody = FormBody.Builder()&#10;            .add(&quot;grant_type&quot;, &quot;authorization_code&quot;)&#10;            .add(&quot;code&quot;, authCode)&#10;            .add(&quot;redirect_uri&quot;, Config.SPOTIFY_REDIRECT_URI)&#10;            .build()&#10;        &#10;        val request = Request.Builder()&#10;            .url(TOKEN_URL)&#10;            .addHeader(&quot;Authorization&quot;, authHeader)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)&#10;            .post(formBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val tokens = gson.fromJson(body, SpotifyTokens::class.java)&#10;                        callback(tokens, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing tokens: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Renovar access token usando refresh token&#10;    fun refreshAccessToken(context: Context, refreshToken: String, callback: (String?, String?) -&gt; Unit) {&#10;        if (!Config.hasSpotifyCredentials(context)) {&#10;            callback(null, &quot;Spotify credentials not configured&quot;)&#10;            return&#10;        }&#10;        &#10;        val authHeader = createBasicAuthHeader(context)&#10;        val formBody = FormBody.Builder()&#10;            .add(&quot;grant_type&quot;, &quot;refresh_token&quot;)&#10;            .add(&quot;refresh_token&quot;, refreshToken)&#10;            .build()&#10;        &#10;        val request = Request.Builder()&#10;            .url(TOKEN_URL)&#10;            .addHeader(&quot;Authorization&quot;, authHeader)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)&#10;            .post(formBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val tokens = gson.fromJson(body, SpotifyTokens::class.java)&#10;                        callback(tokens.accessToken, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing token: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener playlists del usuario con paginación (versión original para compatibilidad)&#10;    fun getUserPlaylists(accessToken: String, callback: (List&lt;SpotifyPlaylist&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allPlaylists = mutableListOf&lt;SpotifyPlaylist&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/me/playlists?limit=$maxLimit&amp;offset=$offset&amp;fields=items(id,name,description,tracks(total),images)&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User playlists response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val playlistResponse = gson.fromJson(body, SpotifyPlaylistResponse::class.java)&#10;                            &#10;                            // Debug: log tracks data for cada playlist&#10;                            playlistResponse.items.forEachIndexed { index, playlist -&gt;&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist $index - '${playlist.name}': tracks=${playlist.tracks}, tracks.total=${playlist.tracks?.total}&quot;)&#10;                            }&#10;                            &#10;                            // Acumular resultados&#10;                            allPlaylists.addAll(playlistResponse.items)&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${playlistResponse.items.size} playlists, total accumulated: ${allPlaylists.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allPlaylists.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMorePlaylists = playlistResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMorePlaylists &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next playlists page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlists pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlists pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final playlists count: ${allPlaylists.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing playlists: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener tracks de un álbum con paginación&#10;    fun getAlbumTracks(accessToken: String, albumId: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allTracks = mutableListOf&lt;SpotifyTrack&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/albums/$albumId/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val tracksResponse = gson.fromJson(body, SpotifyTracksSearchResultRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(tracksResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracksResponse.items.filterNotNull().size} tracks, total accumulated: ${allTracks.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = tracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next album tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final album tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing album tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener tracks de una playlist con paginación&#10;    fun getPlaylistTracks(accessToken: String, playlistId: String, callback: (List&lt;SpotifyPlaylistTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allTracks = mutableListOf&lt;SpotifyPlaylistTrack&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val tracksResponse = gson.fromJson(body, SpotifyPlaylistTracksResponseRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(tracksResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracksResponse.items.filterNotNull().size} tracks, total accumulated: ${allTracks.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = tracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next playlist tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final playlist tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing playlist tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener álbumes de un artista con paginación&#10;    fun getArtistAlbums(accessToken: String, artistId: String, callback: (List&lt;SpotifyAlbum&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allAlbums = mutableListOf&lt;SpotifyAlbum&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/artists/$artistId/albums?include_groups=album,single&amp;limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val albumsResponse = gson.fromJson(body, SpotifyAlbumsSearchResultRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allAlbums.addAll(albumsResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${albumsResponse.items.filterNotNull().size} albums, total accumulated: ${allAlbums.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allAlbums.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreAlbums = albumsResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreAlbums &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next artist albums page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final artist albums count: ${allAlbums.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing artist albums: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Buscar todo tipo de contenido en Spotify (canciones, álbumes, artistas, playlists)&#10;    fun searchAll(accessToken: String, query: String, callback: (SpotifySearchAllResponse?, String?) -&gt; Unit) {&#10;        val encodedQuery = java.net.URLEncoder.encode(query, &quot;UTF-8&quot;)&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/search?q=$encodedQuery&amp;type=track,album,artist,playlist&amp;limit=50&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Search all response: $body&quot;)&#10;                        val searchResponse = gson.fromJson(body, SpotifySearchAllResponse::class.java)&#10;                        callback(searchResponse, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing search results: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Seguir una playlist en Spotify&#10;    fun followPlaylist(accessToken: String, playlistId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/playlists/$playlistId/followers&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(&quot;{}&quot;.toRequestBody(&quot;application/json&quot;.toMediaType()))&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Dejar de seguir (eliminar) una playlist en Spotify&#10;    fun unfollowPlaylist(accessToken: String, playlistId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/playlists/$playlistId/followers&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .delete()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Añadir una canción a una playlist en Spotify&#10;    fun addTrackToPlaylist(accessToken: String, playlistId: String, trackId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val jsonBody = gson.toJson(mapOf(&quot;uris&quot; to listOf(&quot;spotify:track:$trackId&quot;)))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .post(requestBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Eliminar una canción de una playlist en Spotify&#10;    fun removeTrackFromPlaylist(accessToken: String, playlistId: String, trackId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val jsonBody = gson.toJson(mapOf(&quot;tracks&quot; to listOf(mapOf(&quot;uri&quot; to &quot;spotify:track:$trackId&quot;))))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .delete(requestBody)&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Buscar todo tipo de contenido en Spotify con paginación automática&#10;    fun searchAllWithPagination(accessToken: String, query: String, callback: (SpotifySearchAllResponse?, String?) -&gt; Unit) {&#10;        // Por ahora, usar la función searchAll existente que ya maneja los resultados&#10;        searchAll(accessToken, query, callback)&#10;    }&#10;&#10;    // Guardar álbum en la biblioteca del usuario&#10;    fun saveAlbum(accessToken: String, albumId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val jsonBody = gson.toJson(mapOf(&quot;ids&quot; to listOf(albumId)))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me/albums&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(requestBody)&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Crear una nueva playlist en Spotify&#10;    fun createPlaylist(accessToken: String, name: String, description: String, isPublic: Boolean, trackIds: List&lt;String&gt; = emptyList(), callback: (Boolean, String?) -&gt; Unit) {&#10;        // Primero necesitamos obtener el ID del usuario&#10;        getUserProfile(accessToken) { userId, error -&gt;&#10;            if (userId != null) {&#10;                val playlistData = mapOf(&#10;                    &quot;name&quot; to name,&#10;                    &quot;description&quot; to description,&#10;                    &quot;public&quot; to isPublic&#10;                )&#10;                val jsonBody = gson.toJson(playlistData)&#10;                val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;                val request = Request.Builder()&#10;                    .url(&quot;$API_BASE_URL/users/$userId/playlists&quot;)&#10;                    .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                    .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                    .post(requestBody)&#10;                    .build()&#10;&#10;                client.newCall(request).enqueue(object : Callback {&#10;                    override fun onFailure(call: Call, e: IOException) {&#10;                        callback(false, &quot;Error de red: ${e.message}&quot;)&#10;                    }&#10;&#10;                    override fun onResponse(call: Call, response: Response) {&#10;                        val body = response.body.string()&#10;                        if (response.isSuccessful) {&#10;                            // Si hay canciones para añadir, las añadimos ahora&#10;                            if (trackIds.isNotEmpty()) {&#10;                                try {&#10;                                    val createdPlaylist = gson.fromJson(body, SpotifyPlaylist::class.java)&#10;                                    // Añadir las canciones a la playlist recién creada&#10;                                    addTracksToPlaylist(accessToken, createdPlaylist.id, trackIds) { success, errorMsg -&gt;&#10;                                        if (success) {&#10;                                            callback(true, null)&#10;                                        } else {&#10;                                            callback(false, &quot;Playlist creada pero error añadiendo canciones: $errorMsg&quot;)&#10;                                        }&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    callback(false, &quot;Error procesando playlist creada: ${e.message}&quot;)&#10;                                }&#10;                            } else {&#10;                                callback(true, null)&#10;                            }&#10;                        } else {&#10;                            callback(false, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                        }&#10;                    }&#10;                })&#10;            } else {&#10;                callback(false, error ?: &quot;Error obteniendo perfil de usuario&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Añadir múltiples canciones a una playlist&#10;    fun addTracksToPlaylist(accessToken: String, playlistId: String, trackIds: List&lt;String&gt;, callback: (Boolean, String?) -&gt; Unit) {&#10;        val uris = trackIds.map { &quot;spotify:track:$it&quot; }&#10;        val jsonBody = gson.toJson(mapOf(&quot;uris&quot; to uris))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .post(requestBody)&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener el perfil del usuario (necesario para crear playlists)&#10;    private fun getUserProfile(accessToken: String, callback: (String?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val userProfile = gson.fromJson(body, SpotifyUserProfile::class.java)&#10;                        callback(userProfile.id, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing user profile: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun createBasicAuthHeader(context: Context): String {&#10;        val credentials = &quot;${Config.getSpotifyClientId(context)}:${Config.getSpotifyClientSecret(context)}&quot;&#10;        val encodedCredentials = Base64.encodeToString(credentials.toByteArray(), Base64.NO_WRAP)&#10;        return &quot;Basic $encodedCredentials&quot;&#10;    }&#10;&#10;    // Obtener un track por ID&#10;    fun getTrack(accessToken: String, trackId: String, callback: (SpotifyTrack?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/tracks/$trackId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val track = gson.fromJson(body, SpotifyTrack::class.java)&#10;                        callback(track, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing track: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener información detallada de un track (incluye información del álbum)&#10;    fun getTrackInfo(accessToken: String, trackId: String, callback: (SpotifyTrack?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/tracks/$trackId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Track info response: $body&quot;)&#10;                        val track = gson.fromJson(body, SpotifyTrack::class.java)&#10;                        callback(track, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing track info: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener una playlist por ID&#10;    fun getPlaylist(accessToken: String, playlistId: String, callback: (SpotifyPlaylist?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/playlists/$playlistId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val playlist = gson.fromJson(body, SpotifyPlaylist::class.java)&#10;                        callback(playlist, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing playlist: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener un álbum por ID&#10;    fun getAlbum(accessToken: String, albumId: String, callback: (SpotifyAlbum?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/albums/$albumId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val album = gson.fromJson(body, SpotifyAlbum::class.java)&#10;                        callback(album, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing album: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener un artista por ID&#10;    fun getArtist(accessToken: String, artistId: String, callback: (SpotifyArtistFull?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/artists/$artistId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val artist = gson.fromJson(body, SpotifyArtistFull::class.java)&#10;                        callback(artist, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing artist: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener los top tracks de un artista&#10;    fun getArtistTopTracks(accessToken: String, artistId: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/artists/$artistId/top-tracks?market=US&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist top tracks response: ${body.take(200)}...&quot;)&#10;                        val topTracksResponse = gson.fromJson(body, SpotifyArtistTopTracksResponse::class.java)&#10;                        callback(topTracksResponse.tracks, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing artist top tracks: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener canciones favoritas del usuario (Liked Songs) con paginación&#10;    fun getUserSavedTracks(accessToken: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allTracks = mutableListOf&lt;SpotifyTrack&gt;()&#10;        var pageCount = 0&#10;&#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/me/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;&#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;&#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User saved tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val savedTracksResponse = gson.fromJson(body, SpotifySavedTracksResponse::class.java)&#10;&#10;                            // Extraer los tracks de los items y filtrar nulls&#10;                            val tracks = savedTracksResponse.items.mapNotNull { it.track }&#10;                            allTracks.addAll(tracks)&#10;                            pageCount++&#10;&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracks.size} saved tracks, total accumulated: ${allTracks.size}&quot;)&#10;&#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;&#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = savedTracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;&#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next saved tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Saved tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Saved tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final saved tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing saved tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;&#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;&#10;    // Añadir una canción a Liked Songs (favoritos del usuario)&#10;    fun saveTrack(accessToken: String, trackId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me/tracks?ids=$trackId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(&quot;{}&quot;.toRequestBody(&quot;application/json&quot;.toMediaType()))&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;✓ Track añadido a Liked Songs: $trackId&quot;)&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    android.util.Log.e(&quot;SpotifyRepository&quot;, &quot;Error añadiendo a Liked Songs: ${response.code} - $errorBody&quot;)&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Quitar una canción de Liked Songs (favoritos del usuario)&#10;    fun removeTrack(accessToken: String, trackId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val jsonBody = gson.toJson(mapOf(&quot;ids&quot; to listOf(trackId)))&#10;        val requestBody = jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType())&#10;&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me/tracks&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .delete(requestBody)&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;✓ Track eliminado de Liked Songs: $trackId&quot;)&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body.string()&#10;                    android.util.Log.e(&quot;SpotifyRepository&quot;, &quot;Error eliminando de Liked Songs: ${response.code} - $errorBody&quot;)&#10;                    callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Verificar si una canción está en Liked Songs&#10;    fun checkSavedTrack(accessToken: String, trackId: String, callback: (Boolean?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/me/tracks/contains?ids=$trackId&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body.string()&#10;                if (response.isSuccessful) {&#10;                    try {&#10;                        val result = gson.fromJson(body, Array&lt;Boolean&gt;::class.java)&#10;                        callback(result.firstOrNull() ?: false, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing response: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Obtener álbumes guardados del usuario (con paginación)&#10;    fun getUserSavedAlbums(accessToken: String, callback: (List&lt;SpotifyAlbum&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allAlbums = mutableListOf&lt;SpotifyAlbum&gt;()&#10;        var pageCount = 0&#10;&#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/me/albums?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;&#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;&#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User saved albums response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val savedAlbumsResponse = gson.fromJson(body, SpotifySavedAlbumsResponse::class.java)&#10;&#10;                            // Extraer los álbumes de los items y filtrar nulls&#10;                            val albums = savedAlbumsResponse.items.mapNotNull { it.album }&#10;                            allAlbums.addAll(albums)&#10;                            pageCount++&#10;&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${albums.size} saved albums, total accumulated: ${allAlbums.size}&quot;)&#10;&#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allAlbums.toList(), null)&#10;&#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreAlbums = savedAlbumsResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;&#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreAlbums &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next saved albums page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Saved albums pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Saved albums pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final saved albums count: ${allAlbums.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing saved albums: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;&#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;&#10;    // Obtener artistas seguidos del usuario (con paginación)&#10;    fun getUserFollowedArtists(accessToken: String, callback: (List&lt;SpotifyArtistFull&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        val allArtists = mutableListOf&lt;SpotifyArtistFull&gt;()&#10;        var pageCount = 0&#10;&#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(after: String? = null) {&#10;            val url = if (after != null) {&#10;                &quot;$API_BASE_URL/me/following?type=artist&amp;limit=$maxLimit&amp;after=$after&quot;&#10;            } else {&#10;                &quot;$API_BASE_URL/me/following?type=artist&amp;limit=$maxLimit&quot;&#10;            }&#10;&#10;            val request = Request.Builder()&#10;                .url(url)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;&#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;&#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body.string()&#10;                    if (response.isSuccessful) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User followed artists response (after=$after): ${body.take(200)}...&quot;)&#10;                            val followedArtistsResponse = gson.fromJson(body, SpotifyFollowedArtistsResponse::class.java)&#10;&#10;                            // Extraer los artistas&#10;                            val artists = followedArtistsResponse.artists.items&#10;                            allArtists.addAll(artists)&#10;                            pageCount++&#10;&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${artists.size} followed artists, total accumulated: ${allArtists.size}&quot;)&#10;&#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allArtists.toList(), null)&#10;&#10;                            // Verificar si hay más páginas que cargar&#10;                            val nextCursor = followedArtistsResponse.artists.cursors?.after&#10;                            val hasMoreArtists = nextCursor != null &amp;&amp; artists.size == maxLimit&#10;&#10;                            // Si hay más contenido, continuar paginando&#10;                            if (hasMoreArtists) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next followed artists page: after=$nextCursor&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextCursor)&#10;                                }, 200)&#10;                            } else {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Followed artists pagination completed: no more results available&quot;)&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final followed artists count: ${allArtists.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing followed artists: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;&#10;        // Iniciar la paginación&#10;        fetchPage(null)&#10;    }&#10;}&#10;&#10;&#10;// Data classes para Spotify API&#10;data class SpotifyTokens(&#10;    @SerializedName(&quot;access_token&quot;) val accessToken: String,&#10;    @SerializedName(&quot;token_type&quot;) val tokenType: String,&#10;    @SerializedName(&quot;scope&quot;) val scope: String,&#10;    @SerializedName(&quot;expires_in&quot;) val expiresIn: Int,&#10;    @SerializedName(&quot;refresh_token&quot;) val refreshToken: String?&#10;)&#10;&#10;data class SpotifyPlaylistResponse(&#10;    val items: List&lt;SpotifyPlaylist&gt;&#10;)&#10;&#10;data class SpotifyPlaylist(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String?,&#10;    val tracks: SpotifyPlaylistTracks?,&#10;    val images: List&lt;SpotifyImage&gt;?&#10;) {&#10;&#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyPlaylistTracks(&#10;    val href: String?,&#10;    val total: Int&#10;)&#10;&#10;data class SpotifyImage(&#10;    val url: String,&#10;    val height: Int?,&#10;    val width: Int?&#10;)&#10;&#10;data class SpotifyTrack(&#10;    val id: String,&#10;    val name: String,&#10;    val artists: List&lt;SpotifyArtist&gt;,&#10;    @SerializedName(&quot;duration_ms&quot;) val durationMs: Int? = null,&#10;    val album: SpotifyAlbumSimple? = null&#10;) {&#10;    fun getArtistNames(): String {&#10;        return artists.joinToString(&quot;, &quot;) { it.name }&#10;    }&#10;    &#10;    fun getDisplayName(): String {&#10;        return &quot;$name - ${getArtistNames()}&quot;&#10;    }&#10;&#10;}&#10;&#10;// Simplified album info for track details&#10;data class SpotifyAlbumSimple(&#10;    val id: String,&#10;    val name: String,&#10;    @SerializedName(&quot;release_date&quot;) val releaseDate: String? = null,&#10;    val images: List&lt;SpotifyImage&gt;? = null&#10;)&#10;&#10;data class SpotifySearchAllResponse(&#10;    val tracks: SpotifyTracksSearchResult,&#10;    val albums: SpotifyAlbumsSearchResult,&#10;    val artists: SpotifyArtistsSearchResult,&#10;    val playlists: SpotifyPlaylistsSearchResult&#10;)&#10;&#10;data class SpotifyTracksSearchResult(&#10;    val items: List&lt;SpotifyTrack&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbumsSearchResult(&#10;    val items: List&lt;SpotifyAlbum&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyArtistsSearchResult(&#10;    val items: List&lt;SpotifyArtistFull&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistsSearchResult(&#10;    val items: List&lt;SpotifyPlaylist?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbum(&#10;    val id: String,&#10;    val name: String,&#10;    val artists: List&lt;SpotifyArtist&gt;,&#10;    val images: List&lt;SpotifyImage&gt;?,&#10;    @SerializedName(&quot;release_date&quot;) val releasedate: String? = null,&#10;    @SerializedName(&quot;total_tracks&quot;) val totaltracks: Int? = null&#10;) {&#10;    fun getArtistNames(): String {&#10;        return artists.joinToString(&quot;, &quot;) { it.name }&#10;    }&#10;&#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyArtistFull(&#10;    val id: String,&#10;    val name: String,&#10;    val images: List&lt;SpotifyImage&gt;?,&#10;    val followers: SpotifyFollowers?,&#10;    val genres: List&lt;String&gt;?&#10;) {&#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;&#10;}&#10;&#10;data class SpotifyFollowers(&#10;    val total: Int&#10;)&#10;&#10;data class SpotifyArtist(&#10;    val name: String&#10;)&#10;&#10;data class SpotifyPlaylistTracksResponseRaw(&#10;    val items: List&lt;SpotifyPlaylistTrack?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistTrack(&#10;    val track: SpotifyTrack?&#10;)&#10;&#10;// Data classes auxiliares para parsing (con nullable items)&#10;data class SpotifyTracksSearchResultRaw(&#10;    val items: List&lt;SpotifyTrack?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbumsSearchResultRaw(&#10;    val items: List&lt;SpotifyAlbum?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;// Data class para perfil de usuario de Spotify&#10;data class SpotifyUserProfile(&#10;    val id: String,&#10;    @SerializedName(&quot;display_name&quot;) val displayName: String?,&#10;    val email: String?,&#10;    val images: List&lt;SpotifyImage&gt;?&#10;)&#10;&#10;data class SpotifySavedTracksResponse(&#10;    val items: List&lt;SpotifySavedTrackItem&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifySavedTrackItem(&#10;    val track: SpotifyTrack?&#10;)&#10;&#10;data class SpotifySavedAlbumsResponse(&#10;    val items: List&lt;SpotifySavedAlbumItem&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifySavedAlbumItem(&#10;    val album: SpotifyAlbum?,&#10;    @SerializedName(&quot;added_at&quot;) val addedAt: String?&#10;)&#10;&#10;data class SpotifyFollowedArtistsResponse(&#10;    val artists: SpotifyArtistsPage&#10;)&#10;&#10;data class SpotifyArtistsPage(&#10;    val items: List&lt;SpotifyArtistFull&gt;,&#10;    val total: Int,&#10;    val limit: Int,&#10;    val offset: Int,&#10;    val cursors: SpotifyCursors&#10;)&#10;&#10;data class SpotifyCursors(&#10;    val before: String?,&#10;    val after: String?&#10;)&#10;&#10;data class SpotifyArtistTopTracksResponse(&#10;    val tracks: List&lt;SpotifyTrack&gt;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.IBinder&#10;import android.util.Log&#10;import com.plyr.database.TrackEntity&#10;&#10;/**&#10; * MusicNotificationManager - Clase helper para gestionar la notificación de música&#10; * &#10; * Esta clase actúa como puente entre tu PlayerViewModel y el MusicService,&#10; * facilitando el control de la notificación sin tener que manejar directamente&#10; * el service binding en el ViewModel.&#10; */&#10;class MusicNotificationManager(private val context: Context) {&#10;    &#10;    private var musicService: MusicService? = null&#10;    private var isBound = false&#10;    &#10;    companion object {&#10;        private const val TAG = &quot;MusicNotificationManager&quot;&#10;    }&#10;    &#10;    /**&#10;     * Conexión con el servicio de música&#10;     */&#10;    private val serviceConnection = object : ServiceConnection {&#10;        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {&#10;            Log.d(TAG, &quot;Service connected&quot;)&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            isBound = true&#10;        }&#10;        &#10;        override fun onServiceDisconnected(name: ComponentName?) {&#10;            Log.d(TAG, &quot;Service disconnected&quot;)&#10;            musicService = null&#10;            isBound = false&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicia el servicio y se conecta a él&#10;     */&#10;    fun startService() {&#10;        Log.d(TAG, &quot;Starting MusicService&quot;)&#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.startService(serviceIntent)&#10;        context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;    }&#10;    &#10;    /**&#10;     * Para el servicio y se desconecta&#10;     */&#10;    fun stopService() {&#10;        Log.d(TAG, &quot;Stopping MusicService&quot;)&#10;        if (isBound) {&#10;            context.unbindService(serviceConnection)&#10;            isBound = false&#10;        }&#10;        &#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.stopService(serviceIntent)&#10;        musicService = null&#10;    }&#10;    &#10;    /**&#10;     * Inicia la reproducción de audio con notificación&#10;     */&#10;    fun playAudio(audioUrl: String, title: String, artist: String) {&#10;        Log.d(TAG, &quot;Playing audio: $title by $artist&quot;)&#10;        &#10;        if (!isBound) {&#10;            // Si no está conectado, iniciar el servicio con los datos&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;AUDIO_URL&quot;, audioUrl)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;            context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;        } else {&#10;            // Si ya está conectado, usar el servicio directamente&#10;            musicService?.updateSongInfo(title, artist)&#10;            musicService?.playAudio(audioUrl)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza la información de la canción en la notificación&#10;     */&#10;    fun updateSongInfo(title: String, artist: String) {&#10;        Log.d(TAG, &quot;Updating song info: $title by $artist&quot;)&#10;        &#10;        if (isBound &amp;&amp; musicService != null) {&#10;            musicService?.updateSongInfo(title, artist)&#10;        } else {&#10;            // Si no está conectado, enviar intent de actualización&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;UPDATE_INFO&quot;, true)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza usando un TrackEntity&#10;     */&#10;    fun updateSongInfo(track: TrackEntity) {&#10;        updateSongInfo(track.name, track.artists)&#10;    }&#10;    &#10;    /**&#10;     * Pausa/reanuda la reproducción desde la notificación&#10;     */&#10;    fun togglePlayPause() {&#10;        musicService?.togglePlayPause()&#10;    }&#10;    &#10;    /**&#10;     * Para completamente la reproducción&#10;     */&#10;    fun stopPlayback() {&#10;        musicService?.stopPlayback()&#10;    }&#10;    &#10;    /**&#10;     * Verifica si está reproduciendo&#10;     */&#10;    fun isPlaying(): Boolean {&#10;        return musicService?.isPlaying() ?: false&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el servicio está conectado&#10;     */&#10;    fun isServiceConnected(): Boolean {&#10;        return isBound &amp;&amp; musicService != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/PlaylistScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/PlaylistScreen.kt" />
              <option name="originalContent" value="package com.plyr.ui&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.asFlow&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.*&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.network.SpotifyAlbum&#10;import com.plyr.network.SpotifyArtistFull&#10;import com.plyr.utils.Config&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.service.YouTubeSearchManager&#10;import com.plyr.ui.components.Song&#10;import com.plyr.ui.components.SongListItem&#10;import com.plyr.ui.components.ShareDialog&#10;import com.plyr.ui.components.ShareableItem&#10;import com.plyr.ui.components.ShareType&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.GlobalScope&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.DelicateCoroutinesApi&#10;&#10;&#10;@OptIn(DelicateCoroutinesApi::class)&#10;@Composable&#10;fun PlaylistsScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Repositorio local y manager de búsqueda&#10;    val localRepository = remember { PlaylistLocalRepository(context) }&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Estado para las playlists y autenticación&#10;    val playlistsFromDB by localRepository.getAllPlaylistsLiveData().asFlow().collectAsStateWithLifecycle(initialValue = emptyList())&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var isSpotifyConnected by remember { mutableStateOf(Config.isSpotifyConnected(context)) }&#10;    var isSyncing by remember { mutableStateOf(false) }&#10;    var isEditing by remember { mutableStateOf(false) }&#10;&#10;    // Estado para Liked Songs&#10;    var likedSongs by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var isLoadingLikedSongs by remember { mutableStateOf(false) }&#10;    var likedSongsCount by remember { mutableStateOf(0) }&#10;&#10;    // Estado para álbumes guardados&#10;    var savedAlbums by remember { mutableStateOf&lt;List&lt;SpotifyAlbum&gt;&gt;(emptyList()) }&#10;    var isLoadingSavedAlbums by remember { mutableStateOf(false) }&#10;    var savedAlbumsCount by remember { mutableStateOf(0) }&#10;&#10;    // Estado para artistas seguidos&#10;    var followedArtists by remember { mutableStateOf&lt;List&lt;SpotifyArtistFull&gt;&gt;(emptyList()) }&#10;    var isLoadingFollowedArtists by remember { mutableStateOf(false) }&#10;    var followedArtistsCount by remember { mutableStateOf(0) }&#10;&#10;    // Estados para detectar cambios en modo edición (movidos aquí para ser accesibles globalmente)&#10;    var showExitEditDialog by remember { mutableStateOf(false) }&#10;    var hasUnsavedChanges by remember { mutableStateOf(false) }&#10;    var originalTitle by remember { mutableStateOf(&quot;&quot;) }&#10;    var originalDesc by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Convertir entidades a SpotifyPlaylist para compatibilidad con UI existente&#10;    val playlists = playlistsFromDB.map { it.toSpotifyPlaylist() }&#10;&#10;    // Estado para mostrar tracks de una playlist&#10;    var selectedPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedPlaylistEntity by remember { mutableStateOf&lt;PlaylistEntity?&gt;(null) }&#10;    var playlistTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    var showCreatePlaylistScreen by remember { mutableStateOf(false) }&#10;&#10;    // Estado para manejar navegación pendiente cuando hay cambios sin guardar&#10;    var pendingPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;&#10;    // Tracks observados desde la base de datos&#10;    val tracksFromDB by if (selectedPlaylistEntity != null) {&#10;        localRepository.getTracksByPlaylistLiveData(selectedPlaylistEntity!!.spotifyId)&#10;            .asFlow()&#10;            .collectAsStateWithLifecycle(initialValue = emptyList())&#10;    } else {&#10;        remember { mutableStateOf(emptyList()) }&#10;    }&#10;&#10;    // Actualizar tracks cuando cambien en la DB&#10;    LaunchedEffect(tracksFromDB) {&#10;        if (selectedPlaylistEntity != null) {&#10;            playlistTracks = tracksFromDB.map { it.toSpotifyTrack() }&#10;        }&#10;    }&#10;&#10;    // Función para cargar playlists con sincronización automática&#10;    val loadPlaylists = {&#10;        if (!isSpotifyConnected) {&#10;        } else {&#10;            isLoading = true&#10;&#10;            // Usar corrutina para operaciones asíncronas&#10;            coroutineScope.launch {&#10;                try {&#10;                    localRepository.getPlaylistsWithAutoSync()&#10;                    isLoading = false&#10;                    // Las playlists se actualizan automáticamente a través del LiveData&#10;                } catch (_: Exception) {&#10;                    isLoading = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Función para cargar tracks de una playlist&#10;    val loadPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedPlaylist = playlist&#10;        selectedPlaylistEntity = playlistsFromDB.find { it.spotifyId == playlist.id }&#10;        isLoadingTracks = true&#10;&#10;        if (selectedPlaylistEntity == null) {&#10;            isLoadingTracks = false&#10;        } else {&#10;            // Usar corrutina para operaciones asíncronas&#10;            coroutineScope.launch {&#10;                try {&#10;                    localRepository.getTracksWithAutoSync(playlist.id)&#10;                    isLoadingTracks = false&#10;                    // Los tracks se actualizan automáticamente a través del LiveData&#10;&#10;                    // NOTA: Ya no se necesita búsqueda masiva de YouTube IDs&#10;                    // Los IDs se obtienen automáticamente cuando el usuario hace click en cada canción&#10;                    Log.d(&quot;PlaylistScreen&quot;, &quot;✅ Tracks cargados para playlist: ${playlist.name}. IDs de YouTube se obtendrán bajo demanda.&quot;)&#10;                } catch (_: Exception) {&#10;                    isLoadingTracks = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Función para cargar las Liked Songs del usuario&#10;    val loadLikedSongs: () -&gt; Unit = {&#10;        isLoadingLikedSongs = true&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    // Obtener las Liked Songs usando la API de Spotify&#10;                    SpotifyRepository.getUserSavedTracks(accessToken) { tracks, errorMsg -&gt;&#10;                        isLoadingLikedSongs = false&#10;                        if (tracks != null) {&#10;                            likedSongs = tracks&#10;                            likedSongsCount = tracks.size&#10;                            Log.d(&quot;PlaylistsScreen&quot;, &quot;✓ Liked Songs actualizadas: ${tracks.size} canciones&quot;)&#10;                        } else {&#10;                            Log.e(&quot;PlaylistsScreen&quot;, &quot;Error loading liked songs: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingLikedSongs = false&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingLikedSongs = false&#10;                Log.e(&quot;PlaylistsScreen&quot;, &quot;Exception loading liked songs: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    // Función para cargar los álbumes guardados del usuario&#10;    val loadSavedAlbums: () -&gt; Unit = {&#10;        isLoadingSavedAlbums = true&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    // Obtener los álbumes guardados usando la API de Spotify&#10;                    SpotifyRepository.getUserSavedAlbums(accessToken) { albums, errorMsg -&gt;&#10;                        isLoadingSavedAlbums = false&#10;                        if (albums != null) {&#10;                            savedAlbums = albums&#10;                            savedAlbumsCount = albums.size&#10;                            Log.d(&quot;PlaylistsScreen&quot;, &quot;✓ Saved Albums actualizados: ${albums.size} álbumes&quot;)&#10;                        } else {&#10;                            Log.e(&quot;PlaylistsScreen&quot;, &quot;Error loading saved albums: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingSavedAlbums = false&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingSavedAlbums = false&#10;                Log.e(&quot;PlaylistsScreen&quot;, &quot;Exception loading saved albums: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Función para cargar los artistas seguidos del usuario&#10;    val loadFollowedArtists: () -&gt; Unit = {&#10;        isLoadingFollowedArtists = true&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    // Obtener los artistas seguidos usando la API de Spotify&#10;                    SpotifyRepository.getUserFollowedArtists(accessToken) { artists, errorMsg -&gt;&#10;                        isLoadingFollowedArtists = false&#10;                        if (artists != null) {&#10;                            followedArtists = artists&#10;                            followedArtistsCount = artists.size&#10;                            Log.d(&quot;PlaylistsScreen&quot;, &quot;✓ Followed Artists actualizados: ${artists.size} artistas&quot;)&#10;                        } else {&#10;                            Log.e(&quot;PlaylistsScreen&quot;, &quot;Error loading followed artists: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingFollowedArtists = false&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingFollowedArtists = false&#10;                Log.e(&quot;PlaylistsScreen&quot;, &quot;Exception loading followed artists: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Función para forzar sincronización completa&#10;    val forceSyncAll = {&#10;        if (!isSpotifyConnected) {&#10;        } else {&#10;            isSyncing = true&#10;&#10;            coroutineScope.launch {&#10;                try {&#10;                    localRepository.forceSyncAll()&#10;                    loadLikedSongs()&#10;                    loadSavedAlbums()&#10;                    loadFollowedArtists()&#10;                    isSyncing = false&#10;                } catch (_: Exception) {&#10;                    isSyncing = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Cargar playlists y Liked Songs al iniciar si está conectado&#10;    LaunchedEffect(isSpotifyConnected) {&#10;        if (isSpotifyConnected) {&#10;            loadPlaylists()&#10;            loadLikedSongs()&#10;            loadSavedAlbums()&#10;            loadFollowedArtists()&#10;        }&#10;    }&#10;&#10;    // Cleanup del YouTubeSearchManager&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            youtubeSearchManager.cleanup()&#10;        }&#10;    }&#10;&#10;    // Manejar botón de retroceso del sistema&#10;    BackHandler {&#10;        if (selectedPlaylist != null) {&#10;            // Si estamos en modo edición con cambios sin guardar, mostrar diálogo&#10;            if (isEditing &amp;&amp; hasUnsavedChanges) {&#10;                showExitEditDialog = true&#10;            } else {&#10;                // Salir de la playlist y resetear modo edición&#10;                isEditing = false&#10;                hasUnsavedChanges = false&#10;                selectedPlaylist = null&#10;                playlistTracks = emptyList()&#10;            }&#10;        } else {&#10;            onBack()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        if (showCreatePlaylistScreen) {&#10;            CreateSpotifyPlaylistScreen(&#10;                onBack = { showCreatePlaylistScreen = false },&#10;                onPlaylistCreated = { showCreatePlaylistScreen = false; loadPlaylists() }&#10;            )&#10;            return@Column&#10;        }&#10;        // Header&#10;        Text(&#10;            text = if (selectedPlaylist == null) &quot;$ plyr_lists&quot; else &quot;$ ${selectedPlaylist!!.name}&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Botón de sincronización manual (solo visible si está conectado y no es una playlist individual)&#10;        if (isSpotifyConnected &amp;&amp; selectedPlaylist == null) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Botón de sincronización&#10;                Text(&#10;                    text = if (isSyncing) &quot;&lt;syncing...&gt;&quot; else &quot;&lt;sync&gt;&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (isSyncing) Color(0xFFFFD93D) else Color(0xFF4ECDC4)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable(enabled = !isSyncing) {&#10;                            forceSyncAll()&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                        }&#10;                        .padding(8.dp)&#10;                )&#10;                // New button&#10;                Text(&#10;                    text = &quot;&lt;new&gt;&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF4ECDC4)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable(enabled = !isSyncing) {&#10;                            // Set state to show create playlist screen&#10;                            showCreatePlaylistScreen = true&#10;                        }&#10;                        .padding(8.dp)&#10;                )&#10;&#10;                // Indicador de estado&#10;                Text(&#10;                    text = when {&#10;                        isSyncing -&gt; &quot;Sincronizando...&quot;&#10;                        playlists.isNotEmpty() -&gt; &quot;${playlists.size} playlists&quot;&#10;                        else -&gt; &quot;Sin datos locales&quot;&#10;                    },&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.align(Alignment.CenterVertically)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        when {&#10;            !isSpotifyConnected -&gt; {&#10;                // Estado no conectado&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;● &quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFFFF6B6B)&#10;                        )&#10;                    )&#10;                    Text(&#10;                        text = &quot;$ spotify_not_connected&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 14.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Conecta tu cuenta en Config primero&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;&#10;            selectedPlaylist != null -&gt; {&#10;                // Vista de tracks de playlist&#10;                if (isLoadingTracks) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;● &quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFFFD93D)&#10;                            )&#10;                        )&#10;                        Text(&#10;                            text = &quot;$ loading_tracks...&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 14.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Estados para los botones de control&#10;                    var isRandomizing by remember { mutableStateOf(false) }&#10;                    var isStarting by remember { mutableStateOf(false) }&#10;                    var randomJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;                    var startJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;                    var showShareDialog by remember { mutableStateOf(false) }&#10;&#10;                    // Función para parar todas las reproducciones&#10;                    fun stopAllPlayback() {&#10;                        isRandomizing = false&#10;                        isStarting = false&#10;                        randomJob?.cancel()&#10;                        startJob?.cancel()&#10;                        randomJob = null&#10;                        startJob = null&#10;                        // Cancelar espera de canción y pausar el reproductor&#10;                        //playerViewModel?.cancelWaitForSong()&#10;                        playerViewModel?.pausePlayer()&#10;                    }&#10;&#10;&#10;                    // Función para randomización simplificada - solo reproduce un track aleatorio&#10;                    fun startRandomizing() {&#10;                        stopAllPlayback()&#10;                        isRandomizing = true&#10;&#10;                        if (playlistTracks.isNotEmpty() &amp;&amp; playerViewModel != null) {&#10;                            randomJob = GlobalScope.launch {&#10;                                val randomTrack = playlistTracks.random()&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == randomTrack.id }&#10;&#10;                                println(&quot;� RANDOM: ${randomTrack.getDisplayName()}&quot;)&#10;&#10;                                if (trackEntity != null) {&#10;                                    // Reproducir la canción usando PlayerViewModel&#10;                                    playerViewModel.initializePlayer()&#10;&#10;                                    // Establecer la playlist completa con el track aleatorio seleccionado&#10;                                    val currentTrackIndex = tracksFromDB.indexOf(trackEntity)&#10;                                    if (currentTrackIndex &gt;= 0) {&#10;                                        playerViewModel.setCurrentPlaylist(tracksFromDB, currentTrackIndex)&#10;                                    }&#10;&#10;                                    // Cargar y reproducir - PlayerViewModel manejará la navegación automática&#10;                                    playerViewModel.loadAudioFromTrack(trackEntity)&#10;                                } else {&#10;                                    println(&quot;⚠️ TrackEntity no encontrado para: ${randomTrack.getDisplayName()}&quot;)&#10;                                }&#10;&#10;                                isRandomizing = false&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Función para reproducción ordenada simplificada - solo inicia desde el primer track&#10;                    fun startOrderedPlayback() {&#10;                        stopAllPlayback()&#10;                        isStarting = true&#10;&#10;                        if (playlistTracks.isNotEmpty() &amp;&amp; playerViewModel != null) {&#10;                            startJob = GlobalScope.launch {&#10;                                val firstTrack = playlistTracks.first()&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == firstTrack.id }&#10;&#10;                                println(&quot; START [${selectedPlaylist!!.name}]: ${firstTrack.getDisplayName()}&quot;)&#10;&#10;                                if (trackEntity != null) {&#10;                                    // Reproducir la canción usando PlayerViewModel&#10;                                    playerViewModel.initializePlayer()&#10;&#10;                                    // Establecer la playlist completa desde el inicio (índice 0)&#10;                                    val trackEntityIndex = tracksFromDB.indexOf(trackEntity)&#10;                                    if (trackEntityIndex &gt;= 0) {&#10;                                        playerViewModel.setCurrentPlaylist(tracksFromDB, trackEntityIndex)&#10;                                    }&#10;&#10;                                    // Cargar y reproducir - PlayerViewModel manejará la navegación automática&#10;                                    playerViewModel.loadAudioFromTrack(trackEntity)&#10;                                } else {&#10;                                    println(&quot;⚠️ TrackEntity no encontrado para: ${firstTrack.getDisplayName()}&quot;)&#10;                                }&#10;&#10;                                isStarting = false&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Limpiar jobs al salir&#10;                    DisposableEffect(selectedPlaylist) {&#10;                        onDispose {&#10;                            randomJob?.cancel()&#10;                            startJob?.cancel()&#10;                        }&#10;                    }&#10;&#10;                    Column {&#10;                        // Estados para los campos de texto (movidos aquí para ser accesibles desde el botón save)&#10;                        var newTitle by remember { mutableStateOf(selectedPlaylist?.name ?: &quot;&quot;) }&#10;                        var newDesc by remember { mutableStateOf(selectedPlaylist?.description ?: &quot;&quot;) }&#10;&#10;                        // Botones de control&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(bottom = 16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            if (!isEditing) {&#10;                                // Botones visibles solo cuando NO está en modo edición&#10;&#10;                                // Botón &lt;start&gt;&#10;                                Text(&#10;                                    text = if (isStarting) &quot;&lt;stop&gt;&quot; else &quot;&lt;start&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = if (isStarting) Color(0xFFFF6B6B) else Color(0xFF4ECDC4)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable {&#10;                                            if (isStarting) {&#10;                                                stopAllPlayback()&#10;                                            } else {&#10;                                                startOrderedPlayback()&#10;                                            }&#10;                                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                        }&#10;                                        .padding(8.dp)&#10;                                )&#10;&#10;                                // Botón &lt;rand&gt;&#10;                                Text(&#10;                                    text = if (isRandomizing) &quot;&lt;stop&gt;&quot; else &quot;&lt;rand&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = if (isRandomizing) Color(0xFFFF6B6B) else Color(0xFFFFD93D)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable {&#10;                                            if (isRandomizing) {&#10;                                                stopAllPlayback()&#10;                                            } else {&#10;                                                startRandomizing()&#10;                                            }&#10;                                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                        }&#10;                                        .padding(8.dp)&#10;                                )&#10;&#10;                                // Botón &lt;share&gt;&#10;                                Text(&#10;                                    text = &quot;&lt;share&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = Color(0xFFFF6B9D)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable {&#10;                                            showShareDialog = true&#10;                                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                        }&#10;                                        .padding(8.dp)&#10;                                )&#10;                            }&#10;&#10;                            // Botón &lt;edit&gt; o &lt;save&gt;&#10;                            Text(&#10;                                text = if (isEditing) &quot;&lt;save&gt;&quot; else &quot;&lt;edit&gt;&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 16.sp,&#10;                                    color = if (isEditing) Color(0xFF7FB069) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        if (isEditing) {&#10;                                            // Al hacer clic en save, verificar si hay cambios sin guardar&#10;                                            if (hasUnsavedChanges) {&#10;                                                // TODO: Aquí se implementaría el guardado real en Spotify&#10;                                                // Por ahora solo resetear el flag y salir del modo edición&#10;                                                originalTitle = newTitle&#10;                                                originalDesc = newDesc&#10;                                                hasUnsavedChanges = false&#10;                                            }&#10;                                            // Salir del modo edición&#10;                                            isEditing = false&#10;                                        } else {&#10;                                            // Al entrar al modo edición, guardar valores originales e inicializar campos&#10;                                            originalTitle = selectedPlaylist?.name ?: &quot;&quot;&#10;                                            originalDesc = selectedPlaylist?.description ?: &quot;&quot;&#10;                                            newTitle = originalTitle&#10;                                            newDesc = originalDesc&#10;                                            hasUnsavedChanges = false&#10;                                            isEditing = true&#10;                                        }&#10;                                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                    }&#10;                                    .padding(8.dp)&#10;                            )&#10;&#10;                            // Botón &lt;delete&gt; - solo visible en modo edición&#10;                            if (isEditing) {&#10;                                var showDeleteDialog by remember { mutableStateOf(false) }&#10;&#10;                                Text(&#10;                                    text = &quot;&lt;delete&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = Color(0xFFFF6B6B)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable {&#10;                                            showDeleteDialog = true&#10;                                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                        }&#10;                                        .padding(8.dp)&#10;                                )&#10;&#10;                                // Diálogo de confirmación para eliminar playlist&#10;                                if (showDeleteDialog) {&#10;                                    AlertDialog(&#10;                                        onDismissRequest = { showDeleteDialog = false },&#10;                                        title = {&#10;                                            Text(&#10;                                                &quot;Delete playlist&quot;,&#10;                                                style = MaterialTheme.typography.titleMedium.copy(&#10;                                                    fontFamily = FontFamily.Monospace,&#10;                                                    color = Color(0xFF4ECDC4)&#10;                                                )&#10;                                            )&#10;                                        },&#10;                                        text = {&#10;                                            Text(&#10;                                                &quot;Are you sure you want to delete '${selectedPlaylist?.name}'? This action cannot be undone.&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                    fontFamily = FontFamily.Monospace&#10;                                                )&#10;                                            )&#10;                                        },&#10;                                        confirmButton = {&#10;                                            TextButton(&#10;                                                onClick = {&#10;                                                    showDeleteDialog = false&#10;                                                    // Eliminar la playlist&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null &amp;&amp; selectedPlaylist != null) {&#10;                                                        coroutineScope.launch {&#10;                                                            SpotifyRepository.unfollowPlaylist(&#10;                                                                accessToken,&#10;                                                                selectedPlaylist!!.id&#10;                                                            ) { success: Boolean, errorMsg: String? -&gt;&#10;                                                                if (success) {&#10;                                                                    // Salir del modo edición y volver a la lista&#10;                                                                    isEditing = false&#10;                                                                    hasUnsavedChanges = false&#10;                                                                    selectedPlaylist = null&#10;                                                                    playlistTracks = emptyList()&#10;                                                                    // Recargar la lista de playlists&#10;                                                                    loadPlaylists()&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                            ) {&#10;                                                Text(&#10;                                                    &quot;Delete&quot;,&#10;                                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        color = Color(0xFFFF6B6B)&#10;                                                    )&#10;                                                )&#10;                                            }&#10;                                        },&#10;                                        dismissButton = {&#10;                                            TextButton(&#10;                                                onClick = { showDeleteDialog = false }&#10;                                            ) {&#10;                                                Text(&#10;                                                    &quot;Cancel&quot;,&#10;                                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        color = Color(0xFF4ECDC4)&#10;                                                    )&#10;                                                )&#10;                                            }&#10;                                        }&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                        if (isEditing) {&#10;                            // Estados para el buscador de canciones en edición&#10;                            var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;                            var isSearching by remember { mutableStateOf(false) }&#10;                            var searchResults by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;                            var editError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;                            // Detectar cambios en los campos&#10;                            LaunchedEffect(newTitle, newDesc) {&#10;                                hasUnsavedChanges = (newTitle != originalTitle || newDesc != originalDesc)&#10;                            }&#10;&#10;                            // Usar LazyColumn para permitir scroll&#10;                            LazyColumn(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .weight(1f),&#10;                                contentPadding = PaddingValues(vertical = 8.dp)&#10;                            ) {&#10;                                // Título de la sección&#10;                                item {&#10;                                    Text(&#10;                                        text = &quot;&gt; edit_playlist&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 16.sp,&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        ),&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    )&#10;                                }&#10;&#10;                                // Cambiar nombre&#10;                                item {&#10;                                    OutlinedTextField(&#10;                                        value = newTitle,&#10;                                        onValueChange = { newTitle = it },&#10;                                        label = { Text(&quot;Playlist name&quot;) },&#10;                                        modifier = Modifier.fillMaxWidth()&#10;                                    )&#10;                                    Spacer(Modifier.height(8.dp))&#10;                                }&#10;&#10;                                // Cambiar descripción&#10;                                item {&#10;                                    OutlinedTextField(&#10;                                        value = newDesc,&#10;                                        onValueChange = { newDesc = it },&#10;                                        label = { Text(&quot;Description&quot;) },&#10;                                        modifier = Modifier.fillMaxWidth()&#10;                                    )&#10;                                    Spacer(Modifier.height(16.dp))&#10;                                }&#10;&#10;                                // Sección de buscador de canciones&#10;                                item {&#10;                                    Text(&#10;                                        text = &quot;&gt; add_tracks&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 16.sp,&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        ),&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    )&#10;                                }&#10;&#10;                                // Campo de búsqueda&#10;                                item {&#10;                                    OutlinedTextField(&#10;                                        value = searchQuery,&#10;                                        onValueChange = { searchQuery = it },&#10;                                        label = { Text(&quot;Search tracks&quot;) },&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        trailingIcon = {&#10;                                            if (searchQuery.isNotEmpty()) {&#10;                                                IconButton(onClick = { searchQuery = &quot;&quot; }) {&#10;                                                    Text(&#10;                                                        text = &quot;x&quot;,&#10;                                                        style = MaterialTheme.typography.titleMedium.copy(&#10;                                                            fontFamily = FontFamily.Monospace&#10;                                                        )&#10;                                                    )&#10;                                                }&#10;                                            }&#10;                                        },&#10;                                        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                                        keyboardActions = KeyboardActions(&#10;                                            onSearch = {&#10;                                                if (searchQuery.isNotBlank() &amp;&amp; !isSearching) {&#10;                                                    isSearching = true&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null) {&#10;                                                        coroutineScope.launch {&#10;                                                            SpotifyRepository.searchAll(accessToken, searchQuery) { results, errorMsg -&gt;&#10;                                                                isSearching = false&#10;                                                                if (results != null) {&#10;                                                                    searchResults = results.tracks.items&#10;                                                                } else {&#10;                                                                    editError = errorMsg&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        ),&#10;                                        enabled = !isSearching&#10;                                    )&#10;                                }&#10;&#10;                                // Mostrar indicador de búsqueda&#10;                                if (isSearching) {&#10;                                    item {&#10;                                        Spacer(Modifier.height(8.dp))&#10;                                        Text(&#10;                                            text = &quot;$ searching...&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFFFFD93D)&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                }&#10;&#10;                                // Resultados de búsqueda&#10;                                if (searchResults.isNotEmpty()) {&#10;                                    item {&#10;                                        Spacer(Modifier.height(8.dp))&#10;                                        Text(&#10;                                            text = &quot;results:&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFFE0E0E0)&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                    items(searchResults.take(10).size) { index -&gt;&#10;                                        val track = searchResults[index]&#10;                                        Row(&#10;                                            modifier = Modifier&#10;                                                .fillMaxWidth()&#10;                                                .clickable {&#10;                                                    // Añadir canción a la playlist&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null &amp;&amp; selectedPlaylist != null) {&#10;                                                        coroutineScope.launch {&#10;                                                            SpotifyRepository.addTrackToPlaylist(&#10;                                                                accessToken,&#10;                                                                selectedPlaylist!!.id,&#10;                                                                track.id&#10;                                                            ) { success, errorMsg -&gt;&#10;                                                                if (success) {&#10;                                                                    searchResults = emptyList()&#10;                                                                    searchQuery = &quot;&quot;&#10;                                                                    // Recargar tracks&#10;                                                                    coroutineScope.launch {&#10;                                                                        localRepository.syncTracksFromSpotify(selectedPlaylist!!.id)&#10;                                                                    }&#10;                                                                } else {&#10;                                                                    editError = errorMsg&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                                            verticalAlignment = Alignment.CenterVertically&#10;                                        ) {&#10;                                            Text(&#10;                                                text = &quot;+&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                    fontFamily = FontFamily.Monospace,&#10;                                                    color = Color(0xFF4ECDC4)&#10;                                                ),&#10;                                                modifier = Modifier.padding(end = 8.dp)&#10;                                            )&#10;                                            Column(modifier = Modifier.weight(1f)) {&#10;                                                Text(&#10;                                                    text = track.name,&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        color = Color(0xFFE0E0E0)&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                                Text(&#10;                                                    text = track.getArtistNames(),&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        fontSize = 11.sp,&#10;                                                        color = Color(0xFF95A5A6)&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                }&#10;&#10;                                // Mostrar error si hay&#10;                                editError?.let {&#10;                                    item {&#10;                                        Spacer(Modifier.height(8.dp))&#10;                                        Text(&quot;Error: $it&quot;, color = Color.Red, style = MaterialTheme.typography.bodySmall.copy(fontFamily = FontFamily.Monospace))&#10;                                    }&#10;                                }&#10;&#10;                                item {&#10;                                    Spacer(Modifier.height(16.dp))&#10;                                }&#10;&#10;                                // Lista de canciones actuales con opción de eliminar&#10;                                if (playlistTracks.isNotEmpty()) {&#10;                                    item {&#10;                                        Text(&#10;                                            text = &quot;current tracks [${playlistTracks.size}]:&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFF4ECDC4)&#10;                                            )&#10;                                        )&#10;                                        Spacer(Modifier.height(8.dp))&#10;                                    }&#10;                                    items(playlistTracks.size) { index -&gt;&#10;                                        val track = playlistTracks[index]&#10;                                        Row(&#10;                                            modifier = Modifier&#10;                                                .fillMaxWidth()&#10;                                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                                            verticalAlignment = Alignment.CenterVertically&#10;                                        ) {&#10;                                            Text(&#10;                                                text = &quot;${index + 1}.&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                                    fontFamily = FontFamily.Monospace,&#10;                                                    color = Color(0xFF95A5A6)&#10;                                                ),&#10;                                                modifier = Modifier.width(32.dp)&#10;                                            )&#10;                                            Column(modifier = Modifier.weight(1f)) {&#10;                                                Text(&#10;                                                    text = track.name,&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        color = Color(0xFFE0E0E0)&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                                Text(&#10;                                                    text = track.getArtistNames(),&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        fontSize = 11.sp,&#10;                                                        color = Color(0xFF95A5A6)&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                            }&#10;                                            Text(&#10;                                                text = &quot;x&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                                    fontFamily = FontFamily.Monospace,&#10;                                                    color = Color(0xFFFF6B6B)&#10;                                                ),&#10;                                                modifier = Modifier&#10;                                                    .clickable {&#10;                                                        // Eliminar canción de la playlist&#10;                                                        val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                        if (accessToken != null &amp;&amp; selectedPlaylist != null) {&#10;                                                            coroutineScope.launch {&#10;                                                                // Necesitamos usar la API de Spotify para eliminar&#10;                                                                // Por ahora, usar la función removeTrackFromPlaylist si existe&#10;                                                                // O implementarla en SpotifyRepository&#10;                                                                SpotifyRepository.removeTrackFromPlaylist(&#10;                                                                    accessToken,&#10;                                                                    selectedPlaylist!!.id,&#10;                                                                    track.id&#10;                                                                ) { success, errorMsg -&gt;&#10;                                                                    if (success) {&#10;                                                                        // Recargar tracks&#10;                                                                        coroutineScope.launch {&#10;                                                                            localRepository.syncTracksFromSpotify(selectedPlaylist!!.id)&#10;                                                                        }&#10;                                                                    } else {&#10;                                                                        editError = errorMsg&#10;                                                                    }&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                    .padding(8.dp)&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                        // Lista de tracks (solo visible cuando NO está en modo edición)&#10;                        if (!isEditing) {&#10;                            LazyColumn(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                contentPadding = PaddingValues(bottom = 16.dp),&#10;                                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                // Prepara trackEntities una sola vez&#10;                                val trackEntitiesList = tracksFromDB&#10;                                items(playlistTracks.size) { index -&gt;&#10;                                    val track = playlistTracks[index]&#10;                                    val song = Song(&#10;                                        number = index + 1,&#10;                                        title = track.name,&#10;                                        artist = track.getArtistNames(),&#10;                                        spotifyId = track.id,&#10;                                        spotifyUrl = &quot;https://open.spotify.com/track/${track.id}&quot;&#10;                                    )&#10;                                    SongListItem(&#10;                                        song = song,&#10;                                        trackEntities = trackEntitiesList,&#10;                                        index = index,&#10;                                        playerViewModel = playerViewModel,&#10;                                        coroutineScope = coroutineScope,&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        onLikedStatusChanged = {&#10;                                            // Recargar las Liked Songs cuando se modifica el estado&#10;                                            loadLikedSongs()&#10;                                        }&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Diálogo de confirmación para salir sin guardar&#10;                    if (showExitEditDialog) {&#10;                        AlertDialog(&#10;                            onDismissRequest = {&#10;                                showExitEditDialog = false&#10;                                pendingPlaylist = null&#10;                            },&#10;                            title = {&#10;                                Text(&#10;                                    &quot;Unsaved changes&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF4ECDC4)&#10;                                    )&#10;                                )&#10;                            },&#10;                            text = {&#10;                                Text(&#10;                                    &quot;You have unsaved changes. Are you sure you want to exit?&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace&#10;                                    )&#10;                                )&#10;                            },&#10;                            confirmButton = {&#10;                                TextButton(&#10;                                    onClick = {&#10;                                        showExitEditDialog = false&#10;                                        isEditing = false&#10;                                        hasUnsavedChanges = false&#10;&#10;                                        // Si hay una playlist pendiente, cargarla&#10;                                        if (pendingPlaylist != null) {&#10;                                            selectedPlaylist = pendingPlaylist&#10;                                            loadPlaylistTracks(pendingPlaylist!!)&#10;                                            pendingPlaylist = null&#10;                                        } else {&#10;                                            // Si no hay playlist pendiente, salir de la vista actual&#10;                                            selectedPlaylist = null&#10;                                            playlistTracks = emptyList()&#10;                                        }&#10;                                    }&#10;                                ) {&#10;                                    Text(&#10;                                        &quot;Exit&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            },&#10;                            dismissButton = {&#10;                                TextButton(&#10;                                    onClick = {&#10;                                        showExitEditDialog = false&#10;                                        pendingPlaylist = null&#10;                                    }&#10;                                ) {&#10;                                    Text(&#10;                                        &quot;Cancel&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    // Diálogo de compartir - debe estar dentro del mismo scope que showShareDialog&#10;                    if (showShareDialog) {&#10;                        ShareDialog(&#10;                            item = ShareableItem(&#10;                                spotifyId = selectedPlaylist!!.id,&#10;                                spotifyUrl = &quot;https://open.spotify.com/playlist/${selectedPlaylist!!.id}&quot;,&#10;                                youtubeId = null,&#10;                                title = selectedPlaylist!!.name,&#10;                                artist = &quot;Playlist&quot;, //selectedPlaylist!!.owner?.display_name ?: &quot;Playlist&quot;,&#10;                                type = ShareType.PLAYLIST&#10;                            ),&#10;                            onDismiss = { showShareDialog = false }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                // Vista principal de playlists&#10;                if (isLoading || isSyncing) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (isSyncing) &quot;$ syncing_from_spotify...&quot; else &quot;$ loading_playlists...&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFFFD93D)&#10;                            )&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Estado cuando no está cargando ni sincronizando&#10;                    if (playlists.isEmpty()) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No playlists found&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    } else {&#10;                        // Grilla de portadas de playlists&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Adaptive(minSize = 150.dp),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            contentPadding = PaddingValues(bottom = 16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            // Primer item: Liked Songs&#10;                            if (likedSongsCount &gt; 0) {&#10;                                item {&#10;                                    Column(&#10;                                        modifier = Modifier&#10;                                            .fillMaxWidth()&#10;                                            .clickable {&#10;                                                // Mostrar las Liked Songs como una playlist especial&#10;                                                selectedPlaylist = SpotifyPlaylist(&#10;                                                    id = &quot;liked_songs&quot;,&#10;                                                    name = &quot;Liked Songs&quot;,&#10;                                                    description = &quot;Your favorite tracks on Spotify&quot;,&#10;                                                    tracks = com.plyr.network.SpotifyPlaylistTracks(null, likedSongsCount),&#10;                                                    images = null&#10;                                                )&#10;                                                playlistTracks = likedSongs&#10;                                                isLoadingTracks = false&#10;                                                selectedPlaylistEntity = null&#10;                                            },&#10;                                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    ) {&#10;                                        // Icono de corazón para Liked Songs (en lugar de portada)&#10;                                        Box(&#10;                                            modifier = Modifier&#10;                                                .size(150.dp)&#10;                                                .clip(RoundedCornerShape(8.dp))&#10;                                                .clickable {&#10;                                                    selectedPlaylist = SpotifyPlaylist(&#10;                                                        id = &quot;liked_songs&quot;,&#10;                                                        name = &quot;Liked Songs&quot;,&#10;                                                        description = &quot;Your favorite tracks on Spotify&quot;,&#10;                                                        tracks = com.plyr.network.SpotifyPlaylistTracks(null, likedSongsCount),&#10;                                                        images = null&#10;                                                    )&#10;                                                    playlistTracks = likedSongs&#10;                                                    isLoadingTracks = false&#10;                                                    selectedPlaylistEntity = null&#10;                                                },&#10;                                            contentAlignment = Alignment.Center&#10;                                        ) {&#10;                                            // Fondo degradado&#10;                                            Box(&#10;                                                modifier = Modifier&#10;                                                    .fillMaxSize()&#10;                                                    .clip(RoundedCornerShape(8.dp)),&#10;                                                contentAlignment = Alignment.Center&#10;                                            ) {&#10;                                                androidx.compose.foundation.Canvas(&#10;                                                    modifier = Modifier.fillMaxSize()&#10;                                                ) {&#10;                                                    drawRect(&#10;                                                        brush = androidx.compose.ui.graphics.Brush.verticalGradient(&#10;                                                            colors = listOf(&#10;                                                                Color(0xFF4ECDC4),&#10;                                                                Color(0xFF7FB069)&#10;                                                            )&#10;                                                        )&#10;                                                    )&#10;                                                }&#10;                                                // Emoji de corazón&#10;                                                Text(&#10;                                                    text = &quot;♥&quot;,&#10;                                                    style = MaterialTheme.typography.displayLarge.copy(&#10;                                                        fontSize = 64.sp,&#10;                                                        color = Color.White&#10;                                                    )&#10;                                                )&#10;                                            }&#10;                                        }&#10;&#10;                                        // Nombre de la playlist&#10;                                        Text(&#10;                                            text = &quot;Liked Songs&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFFE0E0E0)&#10;                                            ),&#10;                                            modifier = Modifier.padding(top = 8.dp),&#10;                                            maxLines = 2,&#10;                                            overflow = TextOverflow.Ellipsis,&#10;                                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Resto de las playlists&#10;                            items(playlists.size) { index -&gt;&#10;                                val playlist = playlists[index]&#10;                                val playlistEntity = playlistsFromDB.find { it.spotifyId == playlist.id }&#10;&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            // Verificar si hay cambios sin guardar antes de cambiar de playlist&#10;                                            if (isEditing &amp;&amp; hasUnsavedChanges) {&#10;                                                pendingPlaylist = playlist&#10;                                                showExitEditDialog = true&#10;                                            } else {&#10;                                                // Resetear modo edición al cambiar de playlist&#10;                                                isEditing = false&#10;                                                hasUnsavedChanges = false&#10;                                                selectedPlaylist = playlist&#10;                                                loadPlaylistTracks(playlist)&#10;                                            }&#10;                                        },&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                ) {&#10;                                    // Portada de la playlist&#10;                                    AsyncImage(&#10;                                        model = playlistEntity?.imageUrl,&#10;                                        contentDescription = &quot;Portada de ${playlist.name}&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(150.dp)&#10;                                            .clip(RoundedCornerShape(8.dp)),&#10;                                        placeholder = null,&#10;                                        error = null,&#10;                                        fallback = null&#10;                                    )&#10;&#10;                                    // Nombre de la playlist&#10;                                    Text(&#10;                                        text = playlist.name,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFE0E0E0)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 8.dp),&#10;                                        maxLines = 2,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Álbumes guardados&#10;                            items(savedAlbums.size) { index -&gt;&#10;                                val album = savedAlbums[index]&#10;&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            // Cargar los tracks del álbum&#10;                                            isLoadingTracks = true&#10;                                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                                            if (accessToken != null) {&#10;                                                SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                                                    isLoadingTracks = false&#10;                                                    if (tracks != null) {&#10;                                                        // Crear una playlist temporal para mostrar el álbum&#10;                                                        selectedPlaylist = SpotifyPlaylist(&#10;                                                            id = album.id,&#10;                                                            name = album.name,&#10;                                                            description = &quot;Album by ${album.getArtistNames()}&quot;,&#10;                                                            tracks = com.plyr.network.SpotifyPlaylistTracks(null, album.totaltracks ?: tracks.size),&#10;                                                            images = album.images&#10;                                                        )&#10;                                                        playlistTracks = tracks&#10;                                                        selectedPlaylistEntity = null&#10;                                                    } else {&#10;                                                        Log.e(&quot;PlaylistScreen&quot;, &quot;Error loading album tracks: $errorMsg&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        },&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                ) {&#10;                                    // Portada del álbum&#10;                                    AsyncImage(&#10;                                        model = album.getImageUrl(),&#10;                                        contentDescription = &quot;Portada de ${album.name}&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(150.dp)&#10;                                            .clip(RoundedCornerShape(8.dp)),&#10;                                        placeholder = null,&#10;                                        error = null,&#10;                                        fallback = null&#10;                                    )&#10;&#10;                                    // Nombre del álbum&#10;                                    Text(&#10;                                        text = album.name,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFE0E0E0)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 8.dp),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;&#10;                                    // Artista del álbum&#10;                                    Text(&#10;                                        text = album.getArtistNames(),&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 10.sp,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 2.dp),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Artistas seguidos&#10;                            items(followedArtists.size) { index -&gt;&#10;                                val artist = followedArtists[index]&#10;&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            // Cargar los tracks del artista&#10;                                            isLoadingTracks = true&#10;                                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                                            if (accessToken != null) {&#10;                                                SpotifyRepository.getArtistTopTracks(accessToken, artist.id) { tracks, errorMsg -&gt;&#10;                                                    isLoadingTracks = false&#10;                                                    if (tracks != null) {&#10;                                                        // Crear una playlist temporal para mostrar los tracks del artista&#10;                                                        selectedPlaylist = SpotifyPlaylist(&#10;                                                            id = artist.id,&#10;                                                            name = artist.name,&#10;                                                            description = &quot;Top tracks by ${artist.name}&quot;,&#10;                                                            tracks = com.plyr.network.SpotifyPlaylistTracks(null, tracks.size),&#10;                                                            images = artist.images&#10;                                                        )&#10;                                                        playlistTracks = tracks&#10;                                                        selectedPlaylistEntity = null&#10;                                                    } else {&#10;                                                        Log.e(&quot;PlaylistScreen&quot;, &quot;Error loading artist tracks: $errorMsg&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        },&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                ) {&#10;                                    // Portada del artista (usar imagen del artista)&#10;                                    AsyncImage(&#10;                                        model = artist.getImageUrl(),&#10;                                        contentDescription = &quot;Artista ${artist.name}&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(150.dp)&#10;                                            .clip(RoundedCornerShape(8.dp)),&#10;                                        placeholder = null,&#10;                                        error = null,&#10;                                        fallback = null&#10;                                    )&#10;&#10;                                    // Nombre del artista&#10;                                    Text(&#10;                                        text = artist.name,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFE0E0E0)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 8.dp),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CreateSpotifyPlaylistScreen(&#10;    onBack: () -&gt; Unit,&#10;    onPlaylistCreated: () -&gt; Unit&#10;) {&#10;    var playlistName by remember { mutableStateOf(&quot;&quot;) }&#10;    var playlistDesc by remember { mutableStateOf(&quot;&quot;) }&#10;    var isPublic by remember { mutableStateOf(true) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Estados para el buscador de canciones&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var isSearching by remember { mutableStateOf(false) }&#10;    var searchResults by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var selectedTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        Text(&#10;            text = &quot;$ create_playlist&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 20.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        OutlinedTextField(&#10;            value = playlistName,&#10;            onValueChange = { playlistName = it },&#10;            label = { Text(&quot;Playlist name&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = playlistDesc,&#10;            onValueChange = { playlistDesc = it },&#10;            label = { Text(&quot;Description (optional)&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            // Opción Public&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { isPublic = true }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;public&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (isPublic) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            // Opción Private&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { isPublic = false }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;private&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (!isPublic) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Sección de buscador de canciones&#10;        Spacer(Modifier.height(16.dp))&#10;        Text(&#10;            text = &quot;&gt; add_tracks&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        // Campo de búsqueda&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = { searchQuery = it },&#10;            label = { Text(&quot;Search tracks&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                if (searchQuery.isNotEmpty()) {&#10;                    IconButton(onClick = { searchQuery = &quot;&quot; }) {&#10;                        Text(&#10;                            text = &quot;x&quot;,&#10;                            style = MaterialTheme.typography.titleMedium.copy(&#10;                                fontFamily = FontFamily.Monospace&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    if (searchQuery.isNotBlank() &amp;&amp; !isSearching) {&#10;                        isSearching = true&#10;                        val accessToken = Config.getSpotifyAccessToken(context)&#10;                        if (accessToken != null) {&#10;                            coroutineScope.launch {&#10;                                SpotifyRepository.searchAll(accessToken, searchQuery) { results, errorMsg -&gt;&#10;                                    isSearching = false&#10;                                    if (results != null) {&#10;                                        searchResults = results.tracks.items&#10;                                    } else {&#10;                                        error = errorMsg&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            ),&#10;            enabled = !isSearching&#10;        )&#10;&#10;        // Mostrar indicador de búsqueda&#10;        if (isSearching) {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;$ searching...&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFFFD93D)&#10;                )&#10;            )&#10;        }&#10;&#10;        // Resultados de búsqueda&#10;        if (searchResults.isNotEmpty()) {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;results:&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE0E0E0)&#10;                )&#10;            )&#10;            searchResults.take(10).forEach { track -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable {&#10;                            if (!selectedTracks.contains(track)) {&#10;                                selectedTracks = selectedTracks + track&#10;                                searchResults = emptyList()&#10;                                searchQuery = &quot;&quot;&#10;                            }&#10;                        }&#10;                        .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;+&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF4ECDC4)&#10;                        ),&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = track.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = track.getArtistNames(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Lista de canciones seleccionadas&#10;        if (selectedTracks.isNotEmpty()) {&#10;            Spacer(Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;selected [${selectedTracks.size}]:&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFF4ECDC4)&#10;                )&#10;            )&#10;            selectedTracks.forEachIndexed { index, track -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${index + 1}.&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        modifier = Modifier.width(32.dp)&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = track.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = track.getArtistNames(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                    Text(&#10;                        text = &quot;x&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFFFF6B6B)&#10;                        ),&#10;                        modifier = Modifier&#10;                            .clickable {&#10;                                selectedTracks = selectedTracks.filterIndexed { i, _ -&gt; i != index }&#10;                            }&#10;                            .padding(8.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(16.dp))&#10;        Text(&#10;            text = if (isLoading) &quot;&lt;creating...&gt;&quot; else &quot;&lt;create&gt;&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 14.sp,&#10;                color = if (isLoading) Color(0xFFFFD93D) else Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable(enabled = !isLoading &amp;&amp; playlistName.isNotBlank()) {&#10;                    // Acción de crear playlist con las canciones seleccionadas&#10;                    isLoading = true&#10;                    error = null&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        val trackIds = selectedTracks.map { it.id }&#10;                        SpotifyRepository.createPlaylist(&#10;                            accessToken,&#10;                            playlistName,&#10;                            playlistDesc,&#10;                            isPublic,&#10;                            trackIds&#10;                        ) { success, errMsg -&gt;&#10;                            isLoading = false&#10;                            if (success) onPlaylistCreated() else error = errMsg ?: &quot;Unknown error&quot;&#10;                        }&#10;                    } else {&#10;                        isLoading = false&#10;                        error = &quot;Spotify not connected&quot;&#10;                    }&#10;                }&#10;                .padding(8.dp)&#10;        )&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&quot;Error: $it&quot;, color = Color.Red)&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun SpotifyPlaylistDetailView(&#10;    playlist: SpotifyPlaylist,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onStart: () -&gt; Unit,&#10;    onRandom: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var showShareDialog by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header con botón de retroceso&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;$ ${playlist.name}&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.weight(1f),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;&#10;        // Botones de acción&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;&#10;            ActionButton(&#10;                text = &quot;&lt;start&gt;&quot;,&#10;                color = Color(0xFF4ECDC4),&#10;                onClick = onStart,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;rand&gt;&quot;,&#10;                color = Color(0xFFFFD93D),&#10;                onClick = onRandom,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;save&gt;&quot;,&#10;                color = Color(0xFF7FB069),&#10;                onClick = onSave,&#10;                enabled = true&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;share&gt;&quot;,&#10;                color = Color(0xFFFF6B9D),&#10;                onClick = { showShareDialog = true },&#10;                enabled = true&#10;            )&#10;        }&#10;&#10;        // Estados de carga y error&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        error?.let {&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Lista de tracks&#10;        if (tracks.isNotEmpty()) {&#10;            // Crear trackEntities una sola vez fuera del LazyColumn&#10;            val trackEntities = tracks.mapIndexed { trackIndex, spotifyTrack -&gt;&#10;                TrackEntity(&#10;                    id = &quot;spotify_${spotifyTrack.id}&quot;,&#10;                    playlistId = playlist.id,&#10;                    spotifyTrackId = spotifyTrack.id,&#10;                    name = spotifyTrack.name,&#10;                    artists = spotifyTrack.getArtistNames(),&#10;                    youtubeVideoId = null,&#10;                    audioUrl = null,&#10;                    position = trackIndex,&#10;                    lastSyncTime = System.currentTimeMillis()&#10;                )&#10;            }&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentPadding = PaddingValues(bottom = 16.dp)&#10;            ) {&#10;                items(tracks.size) { index -&gt;&#10;                    val track = tracks[index]&#10;                    val song = Song(&#10;                        number = index + 1,&#10;                        title = track.name,&#10;                        artist = track.getArtistNames(),&#10;                        spotifyId = track.id,&#10;                        spotifyUrl = &quot;https://open.spotify.com/track/${track.id}&quot;&#10;                    )&#10;                    SongListItem(&#10;                        song = song,&#10;                        trackEntities = trackEntities,&#10;                        index = index,&#10;                        playerViewModel = playerViewModel,&#10;                        coroutineScope = coroutineScope,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        onLikedStatusChanged = {&#10;                            // Recargar las Liked Songs cuando se modifica el estado&#10;                            // (necesitamos acceso al contexto y coroutineScope)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showShareDialog) {&#10;        ShareDialog(&#10;            item = ShareableItem(&#10;                spotifyId = playlist.id,&#10;                spotifyUrl = &quot;https://open.spotify.com/playlist/${playlist.id}&quot;,&#10;                youtubeId = null,&#10;                title = playlist.name,&#10;                artist = &quot;Playlist&quot;, //playlist.owner?.display_name ?: &quot;Playlist&quot;,&#10;                type = ShareType.PLAYLIST&#10;            ),&#10;            onDismiss = { showShareDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ActionButton(&#10;    text: String,&#10;    color: Color,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    Text(&#10;        text = text,&#10;        style = MaterialTheme.typography.bodyMedium.copy(&#10;            fontFamily = FontFamily.Monospace,&#10;            fontSize = 16.sp,&#10;            color = if (enabled) color else Color(0xFF95A5A6)&#10;        ),&#10;        modifier = Modifier&#10;            .clickable(enabled = enabled) { onClick() }&#10;            .padding(8.dp)&#10;    )&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.plyr.ui&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.grid.GridCells&#10;import androidx.compose.foundation.lazy.grid.LazyVerticalGrid&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.asFlow&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.*&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.network.SpotifyAlbum&#10;import com.plyr.network.SpotifyArtistFull&#10;import com.plyr.utils.Config&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.service.YouTubeSearchManager&#10;import com.plyr.ui.components.Song&#10;import com.plyr.ui.components.SongListItem&#10;import com.plyr.ui.components.ShareDialog&#10;import com.plyr.ui.components.ShareableItem&#10;import com.plyr.ui.components.ShareType&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.GlobalScope&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.DelicateCoroutinesApi&#10;&#10;&#10;@OptIn(DelicateCoroutinesApi::class)&#10;@Composable&#10;fun PlaylistsScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Repositorio local y manager de búsqueda&#10;    val localRepository = remember { PlaylistLocalRepository(context) }&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    // Estado para las playlists y autenticación&#10;    val playlistsFromDB by localRepository.getAllPlaylistsLiveData().asFlow().collectAsStateWithLifecycle(initialValue = emptyList())&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var isSpotifyConnected by remember { mutableStateOf(Config.isSpotifyConnected(context)) }&#10;    var isSyncing by remember { mutableStateOf(false) }&#10;    var isEditing by remember { mutableStateOf(false) }&#10;&#10;    // Estado para Liked Songs&#10;    var likedSongs by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var isLoadingLikedSongs by remember { mutableStateOf(false) }&#10;    var likedSongsCount by remember { mutableStateOf(0) }&#10;&#10;    // Estado para álbumes guardados&#10;    var savedAlbums by remember { mutableStateOf&lt;List&lt;SpotifyAlbum&gt;&gt;(emptyList()) }&#10;    var isLoadingSavedAlbums by remember { mutableStateOf(false) }&#10;    var savedAlbumsCount by remember { mutableStateOf(0) }&#10;&#10;    // Estado para artistas seguidos&#10;    var followedArtists by remember { mutableStateOf&lt;List&lt;SpotifyArtistFull&gt;&gt;(emptyList()) }&#10;    var isLoadingFollowedArtists by remember { mutableStateOf(false) }&#10;    var followedArtistsCount by remember { mutableStateOf(0) }&#10;&#10;    // Estados para detectar cambios en modo edición (movidos aquí para ser accesibles globalmente)&#10;    var showExitEditDialog by remember { mutableStateOf(false) }&#10;    var hasUnsavedChanges by remember { mutableStateOf(false) }&#10;    var originalTitle by remember { mutableStateOf(&quot;&quot;) }&#10;    var originalDesc by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    // Convertir entidades a SpotifyPlaylist para compatibilidad con UI existente&#10;    val playlists = playlistsFromDB.map { it.toSpotifyPlaylist() }&#10;&#10;    // Estado para mostrar tracks de una playlist&#10;    var selectedPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedPlaylistEntity by remember { mutableStateOf&lt;PlaylistEntity?&gt;(null) }&#10;    var playlistTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    var showCreatePlaylistScreen by remember { mutableStateOf(false) }&#10;&#10;    // Estado para los álbumes del artista seleccionado&#10;    var selectedArtist by remember { mutableStateOf&lt;SpotifyArtistFull?&gt;(null) }&#10;    var artistAlbums by remember { mutableStateOf&lt;List&lt;SpotifyAlbum&gt;&gt;(emptyList()) }&#10;    var isLoadingArtistAlbums by remember { mutableStateOf(false) }&#10;&#10;    // Estado para manejar navegación pendiente cuando hay cambios sin guardar&#10;    var pendingPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;&#10;    // Tracks observados desde la base de datos&#10;    val tracksFromDB by if (selectedPlaylistEntity != null) {&#10;        localRepository.getTracksByPlaylistLiveData(selectedPlaylistEntity!!.spotifyId)&#10;            .asFlow()&#10;            .collectAsStateWithLifecycle(initialValue = emptyList())&#10;    } else {&#10;        remember { mutableStateOf(emptyList()) }&#10;    }&#10;&#10;    // Actualizar tracks cuando cambien en la DB&#10;    LaunchedEffect(tracksFromDB) {&#10;        if (selectedPlaylistEntity != null) {&#10;            playlistTracks = tracksFromDB.map { it.toSpotifyTrack() }&#10;        }&#10;    }&#10;&#10;    // Función para cargar playlists con sincronización automática&#10;    val loadPlaylists = {&#10;        if (!isSpotifyConnected) {&#10;        } else {&#10;            isLoading = true&#10;&#10;            // Usar corrutina para operaciones asíncronas&#10;            coroutineScope.launch {&#10;                try {&#10;                    localRepository.getPlaylistsWithAutoSync()&#10;                    isLoading = false&#10;                    // Las playlists se actualizan automáticamente a través del LiveData&#10;                } catch (_: Exception) {&#10;                    isLoading = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Función para cargar tracks de una playlist&#10;    val loadPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedPlaylist = playlist&#10;        selectedPlaylistEntity = playlistsFromDB.find { it.spotifyId == playlist.id }&#10;        isLoadingTracks = true&#10;&#10;        if (selectedPlaylistEntity == null) {&#10;            isLoadingTracks = false&#10;        } else {&#10;            // Usar corrutina para operaciones asíncronas&#10;            coroutineScope.launch {&#10;                try {&#10;                    localRepository.getTracksWithAutoSync(playlist.id)&#10;                    isLoadingTracks = false&#10;                    // Los tracks se actualizan automáticamente a través del LiveData&#10;&#10;                    // NOTA: Ya no se necesita búsqueda masiva de YouTube IDs&#10;                    // Los IDs se obtienen automáticamente cuando el usuario hace click en cada canción&#10;                    Log.d(&quot;PlaylistScreen&quot;, &quot;✅ Tracks cargados para playlist: ${playlist.name}. IDs de YouTube se obtendrán bajo demanda.&quot;)&#10;                } catch (_: Exception) {&#10;                    isLoadingTracks = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Función para cargar las Liked Songs del usuario&#10;    val loadLikedSongs: () -&gt; Unit = {&#10;        isLoadingLikedSongs = true&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    // Obtener las Liked Songs usando la API de Spotify&#10;                    SpotifyRepository.getUserSavedTracks(accessToken) { tracks, errorMsg -&gt;&#10;                        isLoadingLikedSongs = false&#10;                        if (tracks != null) {&#10;                            likedSongs = tracks&#10;                            likedSongsCount = tracks.size&#10;                            Log.d(&quot;PlaylistsScreen&quot;, &quot;✓ Liked Songs actualizadas: ${tracks.size} canciones&quot;)&#10;                        } else {&#10;                            Log.e(&quot;PlaylistsScreen&quot;, &quot;Error loading liked songs: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingLikedSongs = false&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingLikedSongs = false&#10;                Log.e(&quot;PlaylistsScreen&quot;, &quot;Exception loading liked songs: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    // Función para cargar los álbumes guardados del usuario&#10;    val loadSavedAlbums: () -&gt; Unit = {&#10;        isLoadingSavedAlbums = true&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    // Obtener los álbumes guardados usando la API de Spotify&#10;                    SpotifyRepository.getUserSavedAlbums(accessToken) { albums, errorMsg -&gt;&#10;                        isLoadingSavedAlbums = false&#10;                        if (albums != null) {&#10;                            savedAlbums = albums&#10;                            savedAlbumsCount = albums.size&#10;                            Log.d(&quot;PlaylistsScreen&quot;, &quot;✓ Saved Albums actualizados: ${albums.size} álbumes&quot;)&#10;                        } else {&#10;                            Log.e(&quot;PlaylistsScreen&quot;, &quot;Error loading saved albums: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingSavedAlbums = false&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingSavedAlbums = false&#10;                Log.e(&quot;PlaylistsScreen&quot;, &quot;Exception loading saved albums: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Función para cargar los artistas seguidos del usuario&#10;    val loadFollowedArtists: () -&gt; Unit = {&#10;        isLoadingFollowedArtists = true&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    // Obtener los artistas seguidos usando la API de Spotify&#10;                    SpotifyRepository.getUserFollowedArtists(accessToken) { artists, errorMsg -&gt;&#10;                        isLoadingFollowedArtists = false&#10;                        if (artists != null) {&#10;                            followedArtists = artists&#10;                            followedArtistsCount = artists.size&#10;                            Log.d(&quot;PlaylistsScreen&quot;, &quot;✓ Followed Artists actualizados: ${artists.size} artistas&quot;)&#10;                        } else {&#10;                            Log.e(&quot;PlaylistsScreen&quot;, &quot;Error loading followed artists: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingFollowedArtists = false&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingFollowedArtists = false&#10;                Log.e(&quot;PlaylistsScreen&quot;, &quot;Exception loading followed artists: ${e.message}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Función para forzar sincronización completa&#10;    val forceSyncAll = {&#10;        if (!isSpotifyConnected) {&#10;        } else {&#10;            isSyncing = true&#10;&#10;            coroutineScope.launch {&#10;                try {&#10;                    localRepository.forceSyncAll()&#10;                    loadLikedSongs()&#10;                    loadSavedAlbums()&#10;                    loadFollowedArtists()&#10;                    isSyncing = false&#10;                } catch (_: Exception) {&#10;                    isSyncing = false&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Cargar playlists y Liked Songs al iniciar si está conectado&#10;    LaunchedEffect(isSpotifyConnected) {&#10;        if (isSpotifyConnected) {&#10;            loadPlaylists()&#10;            loadLikedSongs()&#10;            loadSavedAlbums()&#10;            loadFollowedArtists()&#10;        }&#10;    }&#10;&#10;    // Cleanup del YouTubeSearchManager&#10;    DisposableEffect(Unit) {&#10;        onDispose {&#10;            youtubeSearchManager.cleanup()&#10;        }&#10;    }&#10;&#10;    // Manejar botón de retroceso del sistema&#10;    BackHandler {&#10;        if (selectedPlaylist != null) {&#10;            // Si estamos en modo edición con cambios sin guardar, mostrar diálogo&#10;            if (isEditing &amp;&amp; hasUnsavedChanges) {&#10;                showExitEditDialog = true&#10;            } else {&#10;                // Salir de la playlist y resetear modo edición&#10;                isEditing = false&#10;                hasUnsavedChanges = false&#10;                selectedPlaylist = null&#10;                playlistTracks = emptyList()&#10;            }&#10;        } else {&#10;            onBack()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        if (showCreatePlaylistScreen) {&#10;            CreateSpotifyPlaylistScreen(&#10;                onBack = { showCreatePlaylistScreen = false },&#10;                onPlaylistCreated = { showCreatePlaylistScreen = false; loadPlaylists() }&#10;            )&#10;            return@Column&#10;        }&#10;        // Header&#10;        Text(&#10;            text = if (selectedPlaylist == null) &quot;$ plyr_lists&quot; else &quot;$ ${selectedPlaylist!!.name}&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Botón de sincronización manual (solo visible si está conectado y no es una playlist individual)&#10;        if (isSpotifyConnected &amp;&amp; selectedPlaylist == null) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                // Botón de sincronización&#10;                Text(&#10;                    text = if (isSyncing) &quot;&lt;syncing...&gt;&quot; else &quot;&lt;sync&gt;&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (isSyncing) Color(0xFFFFD93D) else Color(0xFF4ECDC4)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable(enabled = !isSyncing) {&#10;                            forceSyncAll()&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                        }&#10;                        .padding(8.dp)&#10;                )&#10;                // New button&#10;                Text(&#10;                    text = &quot;&lt;new&gt;&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF4ECDC4)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable(enabled = !isSyncing) {&#10;                            // Set state to show create playlist screen&#10;                            showCreatePlaylistScreen = true&#10;                        }&#10;                        .padding(8.dp)&#10;                )&#10;&#10;                // Indicador de estado&#10;                Text(&#10;                    text = when {&#10;                        isSyncing -&gt; &quot;Sincronizando...&quot;&#10;                        playlists.isNotEmpty() -&gt; &quot;${playlists.size} playlists&quot;&#10;                        else -&gt; &quot;Sin datos locales&quot;&#10;                    },&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.align(Alignment.CenterVertically)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        when {&#10;            !isSpotifyConnected -&gt; {&#10;                // Estado no conectado&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;● &quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFFFF6B6B)&#10;                        )&#10;                    )&#10;                    Text(&#10;                        text = &quot;$ spotify_not_connected&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 14.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Conecta tu cuenta en Config primero&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;&#10;            selectedPlaylist != null -&gt; {&#10;                // Vista de tracks de playlist&#10;                if (isLoadingTracks) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;● &quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFFFD93D)&#10;                            )&#10;                        )&#10;                        Text(&#10;                            text = &quot;$ loading_tracks...&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 14.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Estados para los botones de control&#10;                    var isRandomizing by remember { mutableStateOf(false) }&#10;                    var isStarting by remember { mutableStateOf(false) }&#10;                    var randomJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;                    var startJob by remember { mutableStateOf&lt;Job?&gt;(null) }&#10;                    var showShareDialog by remember { mutableStateOf(false) }&#10;&#10;                    // Función para parar todas las reproducciones&#10;                    fun stopAllPlayback() {&#10;                        isRandomizing = false&#10;                        isStarting = false&#10;                        randomJob?.cancel()&#10;                        startJob?.cancel()&#10;                        randomJob = null&#10;                        startJob = null&#10;                        // Cancelar espera de canción y pausar el reproductor&#10;                        //playerViewModel?.cancelWaitForSong()&#10;                        playerViewModel?.pausePlayer()&#10;                    }&#10;&#10;&#10;                    // Función para randomización simplificada - solo reproduce un track aleatorio&#10;                    fun startRandomizing() {&#10;                        stopAllPlayback()&#10;                        isRandomizing = true&#10;&#10;                        if (playlistTracks.isNotEmpty() &amp;&amp; playerViewModel != null) {&#10;                            randomJob = GlobalScope.launch {&#10;                                val randomTrack = playlistTracks.random()&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == randomTrack.id }&#10;&#10;                                println(&quot;� RANDOM: ${randomTrack.getDisplayName()}&quot;)&#10;&#10;                                if (trackEntity != null) {&#10;                                    // Reproducir la canción usando PlayerViewModel&#10;                                    playerViewModel.initializePlayer()&#10;&#10;                                    // Establecer la playlist completa con el track aleatorio seleccionado&#10;                                    val currentTrackIndex = tracksFromDB.indexOf(trackEntity)&#10;                                    if (currentTrackIndex &gt;= 0) {&#10;                                        playerViewModel.setCurrentPlaylist(tracksFromDB, currentTrackIndex)&#10;                                    }&#10;&#10;                                    // Cargar y reproducir - PlayerViewModel manejará la navegación automática&#10;                                    playerViewModel.loadAudioFromTrack(trackEntity)&#10;                                } else {&#10;                                    println(&quot;⚠️ TrackEntity no encontrado para: ${randomTrack.getDisplayName()}&quot;)&#10;                                }&#10;&#10;                                isRandomizing = false&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Función para reproducción ordenada simplificada - solo inicia desde el primer track&#10;                    fun startOrderedPlayback() {&#10;                        stopAllPlayback()&#10;                        isStarting = true&#10;&#10;                        if (playlistTracks.isNotEmpty() &amp;&amp; playerViewModel != null) {&#10;                            startJob = GlobalScope.launch {&#10;                                val firstTrack = playlistTracks.first()&#10;                                val trackEntity = tracksFromDB.find { it.spotifyTrackId == firstTrack.id }&#10;&#10;                                println(&quot; START [${selectedPlaylist!!.name}]: ${firstTrack.getDisplayName()}&quot;)&#10;&#10;                                if (trackEntity != null) {&#10;                                    // Reproducir la canción usando PlayerViewModel&#10;                                    playerViewModel.initializePlayer()&#10;&#10;                                    // Establecer la playlist completa desde el inicio (índice 0)&#10;                                    val trackEntityIndex = tracksFromDB.indexOf(trackEntity)&#10;                                    if (trackEntityIndex &gt;= 0) {&#10;                                        playerViewModel.setCurrentPlaylist(tracksFromDB, trackEntityIndex)&#10;                                    }&#10;&#10;                                    // Cargar y reproducir - PlayerViewModel manejará la navegación automática&#10;                                    playerViewModel.loadAudioFromTrack(trackEntity)&#10;                                } else {&#10;                                    println(&quot;⚠️ TrackEntity no encontrado para: ${firstTrack.getDisplayName()}&quot;)&#10;                                }&#10;&#10;                                isStarting = false&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Limpiar jobs al salir&#10;                    DisposableEffect(selectedPlaylist) {&#10;                        onDispose {&#10;                            randomJob?.cancel()&#10;                            startJob?.cancel()&#10;                        }&#10;                    }&#10;&#10;                    Column {&#10;                        // Estados para los campos de texto (movidos aquí para ser accesibles desde el botón save)&#10;                        var newTitle by remember { mutableStateOf(selectedPlaylist?.name ?: &quot;&quot;) }&#10;                        var newDesc by remember { mutableStateOf(selectedPlaylist?.description ?: &quot;&quot;) }&#10;&#10;                        // Botones de control&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(bottom = 16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            if (!isEditing) {&#10;                                // Botones visibles solo cuando NO está en modo edición&#10;&#10;                                // Botón &lt;start&gt;&#10;                                Text(&#10;                                    text = if (isStarting) &quot;&lt;stop&gt;&quot; else &quot;&lt;start&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = if (isStarting) Color(0xFFFF6B6B) else Color(0xFF4ECDC4)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable {&#10;                                            if (isStarting) {&#10;                                                stopAllPlayback()&#10;                                            } else {&#10;                                                startOrderedPlayback()&#10;                                            }&#10;                                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                        }&#10;                                        .padding(8.dp)&#10;                                )&#10;&#10;                                // Botón &lt;rand&gt;&#10;                                Text(&#10;                                    text = if (isRandomizing) &quot;&lt;stop&gt;&quot; else &quot;&lt;rand&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = if (isRandomizing) Color(0xFFFF6B6B) else Color(0xFFFFD93D)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable {&#10;                                            if (isRandomizing) {&#10;                                                stopAllPlayback()&#10;                                            } else {&#10;                                                startRandomizing()&#10;                                            }&#10;                                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                        }&#10;                                        .padding(8.dp)&#10;                                )&#10;&#10;                                // Botón &lt;share&gt;&#10;                                Text(&#10;                                    text = &quot;&lt;share&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = Color(0xFFFF6B9D)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable {&#10;                                            showShareDialog = true&#10;                                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                        }&#10;                                        .padding(8.dp)&#10;                                )&#10;                            }&#10;&#10;                            // Botón &lt;edit&gt; o &lt;save&gt;&#10;                            Text(&#10;                                text = if (isEditing) &quot;&lt;save&gt;&quot; else &quot;&lt;edit&gt;&quot;,&#10;                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 16.sp,&#10;                                    color = if (isEditing) Color(0xFF7FB069) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier&#10;                                    .clickable {&#10;                                        if (isEditing) {&#10;                                            // Al hacer clic en save, verificar si hay cambios sin guardar&#10;                                            if (hasUnsavedChanges) {&#10;                                                // TODO: Aquí se implementaría el guardado real en Spotify&#10;                                                // Por ahora solo resetear el flag y salir del modo edición&#10;                                                originalTitle = newTitle&#10;                                                originalDesc = newDesc&#10;                                                hasUnsavedChanges = false&#10;                                            }&#10;                                            // Salir del modo edición&#10;                                            isEditing = false&#10;                                        } else {&#10;                                            // Al entrar al modo edición, guardar valores originales e inicializar campos&#10;                                            originalTitle = selectedPlaylist?.name ?: &quot;&quot;&#10;                                            originalDesc = selectedPlaylist?.description ?: &quot;&quot;&#10;                                            newTitle = originalTitle&#10;                                            newDesc = originalDesc&#10;                                            hasUnsavedChanges = false&#10;                                            isEditing = true&#10;                                        }&#10;                                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                    }&#10;                                    .padding(8.dp)&#10;                            )&#10;&#10;                            // Botón &lt;delete&gt; - solo visible en modo edición&#10;                            if (isEditing) {&#10;                                var showDeleteDialog by remember { mutableStateOf(false) }&#10;&#10;                                Text(&#10;                                    text = &quot;&lt;delete&gt;&quot;,&#10;                                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 16.sp,&#10;                                        color = Color(0xFFFF6B6B)&#10;                                    ),&#10;                                    modifier = Modifier&#10;                                        .clickable {&#10;                                            showDeleteDialog = true&#10;                                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                                        }&#10;                                        .padding(8.dp)&#10;                                )&#10;&#10;                                // Diálogo de confirmación para eliminar playlist&#10;                                if (showDeleteDialog) {&#10;                                    AlertDialog(&#10;                                        onDismissRequest = { showDeleteDialog = false },&#10;                                        title = {&#10;                                            Text(&#10;                                                &quot;Delete playlist&quot;,&#10;                                                style = MaterialTheme.typography.titleMedium.copy(&#10;                                                    fontFamily = FontFamily.Monospace,&#10;                                                    color = Color(0xFF4ECDC4)&#10;                                                )&#10;                                            )&#10;                                        },&#10;                                        text = {&#10;                                            Text(&#10;                                                &quot;Are you sure you want to delete '${selectedPlaylist?.name}'? This action cannot be undone.&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                    fontFamily = FontFamily.Monospace&#10;                                                )&#10;                                            )&#10;                                        },&#10;                                        confirmButton = {&#10;                                            TextButton(&#10;                                                onClick = {&#10;                                                    showDeleteDialog = false&#10;                                                    // Eliminar la playlist&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null &amp;&amp; selectedPlaylist != null) {&#10;                                                        coroutineScope.launch {&#10;                                                            SpotifyRepository.unfollowPlaylist(&#10;                                                                accessToken,&#10;                                                                selectedPlaylist!!.id&#10;                                                            ) { success: Boolean, errorMsg: String? -&gt;&#10;                                                                if (success) {&#10;                                                                    // Salir del modo edición y volver a la lista&#10;                                                                    isEditing = false&#10;                                                                    hasUnsavedChanges = false&#10;                                                                    selectedPlaylist = null&#10;                                                                    playlistTracks = emptyList()&#10;                                                                    // Recargar la lista de playlists&#10;                                                                    loadPlaylists()&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                            ) {&#10;                                                Text(&#10;                                                    &quot;Delete&quot;,&#10;                                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        color = Color(0xFFFF6B6B)&#10;                                                    )&#10;                                                )&#10;                                            }&#10;                                        },&#10;                                        dismissButton = {&#10;                                            TextButton(&#10;                                                onClick = { showDeleteDialog = false }&#10;                                            ) {&#10;                                                Text(&#10;                                                    &quot;Cancel&quot;,&#10;                                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        color = Color(0xFF4ECDC4)&#10;                                                    )&#10;                                                )&#10;                                            }&#10;                                        }&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                        if (isEditing) {&#10;                            // Estados para el buscador de canciones en edición&#10;                            var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;                            var isSearching by remember { mutableStateOf(false) }&#10;                            var searchResults by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;                            var editError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;                            // Detectar cambios en los campos&#10;                            LaunchedEffect(newTitle, newDesc) {&#10;                                hasUnsavedChanges = (newTitle != originalTitle || newDesc != originalDesc)&#10;                            }&#10;&#10;                            // Usar LazyColumn para permitir scroll&#10;                            LazyColumn(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .weight(1f),&#10;                                contentPadding = PaddingValues(vertical = 8.dp)&#10;                            ) {&#10;                                // Título de la sección&#10;                                item {&#10;                                    Text(&#10;                                        text = &quot;&gt; edit_playlist&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 16.sp,&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        ),&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    )&#10;                                }&#10;&#10;                                // Cambiar nombre&#10;                                item {&#10;                                    OutlinedTextField(&#10;                                        value = newTitle,&#10;                                        onValueChange = { newTitle = it },&#10;                                        label = { Text(&quot;Playlist name&quot;) },&#10;                                        modifier = Modifier.fillMaxWidth()&#10;                                    )&#10;                                    Spacer(Modifier.height(8.dp))&#10;                                }&#10;&#10;                                // Cambiar descripción&#10;                                item {&#10;                                    OutlinedTextField(&#10;                                        value = newDesc,&#10;                                        onValueChange = { newDesc = it },&#10;                                        label = { Text(&quot;Description&quot;) },&#10;                                        modifier = Modifier.fillMaxWidth()&#10;                                    )&#10;                                    Spacer(Modifier.height(16.dp))&#10;                                }&#10;&#10;                                // Sección de buscador de canciones&#10;                                item {&#10;                                    Text(&#10;                                        text = &quot;&gt; add_tracks&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 16.sp,&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        ),&#10;                                        modifier = Modifier.padding(bottom = 8.dp)&#10;                                    )&#10;                                }&#10;&#10;                                // Campo de búsqueda&#10;                                item {&#10;                                    OutlinedTextField(&#10;                                        value = searchQuery,&#10;                                        onValueChange = { searchQuery = it },&#10;                                        label = { Text(&quot;Search tracks&quot;) },&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        trailingIcon = {&#10;                                            if (searchQuery.isNotEmpty()) {&#10;                                                IconButton(onClick = { searchQuery = &quot;&quot; }) {&#10;                                                    Text(&#10;                                                        text = &quot;x&quot;,&#10;                                                        style = MaterialTheme.typography.titleMedium.copy(&#10;                                                            fontFamily = FontFamily.Monospace&#10;                                                        )&#10;                                                    )&#10;                                                }&#10;                                            }&#10;                                        },&#10;                                        keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                                        keyboardActions = KeyboardActions(&#10;                                            onSearch = {&#10;                                                if (searchQuery.isNotBlank() &amp;&amp; !isSearching) {&#10;                                                    isSearching = true&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null) {&#10;                                                        coroutineScope.launch {&#10;                                                            SpotifyRepository.searchAll(accessToken, searchQuery) { results, errorMsg -&gt;&#10;                                                                isSearching = false&#10;                                                                if (results != null) {&#10;                                                                    searchResults = results.tracks.items&#10;                                                                } else {&#10;                                                                    editError = errorMsg&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        ),&#10;                                        enabled = !isSearching&#10;                                    )&#10;                                }&#10;&#10;                                // Mostrar indicador de búsqueda&#10;                                if (isSearching) {&#10;                                    item {&#10;                                        Spacer(Modifier.height(8.dp))&#10;                                        Text(&#10;                                            text = &quot;$ searching...&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFFFFD93D)&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                }&#10;&#10;                                // Resultados de búsqueda&#10;                                if (searchResults.isNotEmpty()) {&#10;                                    item {&#10;                                        Spacer(Modifier.height(8.dp))&#10;                                        Text(&#10;                                            text = &quot;results:&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFFE0E0E0)&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                    items(searchResults.take(10).size) { index -&gt;&#10;                                        val track = searchResults[index]&#10;                                        Row(&#10;                                            modifier = Modifier&#10;                                                .fillMaxWidth()&#10;                                                .clickable {&#10;                                                    // Añadir canción a la playlist&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null &amp;&amp; selectedPlaylist != null) {&#10;                                                        coroutineScope.launch {&#10;                                                            SpotifyRepository.addTrackToPlaylist(&#10;                                                                accessToken,&#10;                                                                selectedPlaylist!!.id,&#10;                                                                track.id&#10;                                                            ) { success, errorMsg -&gt;&#10;                                                                if (success) {&#10;                                                                    searchResults = emptyList()&#10;                                                                    searchQuery = &quot;&quot;&#10;                                                                    // Recargar tracks&#10;                                                                    coroutineScope.launch {&#10;                                                                        localRepository.syncTracksFromSpotify(selectedPlaylist!!.id)&#10;                                                                    }&#10;                                                                } else {&#10;                                                                    editError = errorMsg&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                                            verticalAlignment = Alignment.CenterVertically&#10;                                        ) {&#10;                                            Text(&#10;                                                text = &quot;+&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                    fontFamily = FontFamily.Monospace,&#10;                                                    color = Color(0xFF4ECDC4)&#10;                                                ),&#10;                                                modifier = Modifier.padding(end = 8.dp)&#10;                                            )&#10;                                            Column(modifier = Modifier.weight(1f)) {&#10;                                                Text(&#10;                                                    text = track.name,&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        color = Color(0xFFE0E0E0)&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                                Text(&#10;                                                    text = track.getArtistNames(),&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        fontSize = 11.sp,&#10;                                                        color = Color(0xFF95A5A6)&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                }&#10;&#10;                                // Mostrar error si hay&#10;                                editError?.let {&#10;                                    item {&#10;                                        Spacer(Modifier.height(8.dp))&#10;                                        Text(&quot;Error: $it&quot;, color = Color.Red, style = MaterialTheme.typography.bodySmall.copy(fontFamily = FontFamily.Monospace))&#10;                                    }&#10;                                }&#10;&#10;                                item {&#10;                                    Spacer(Modifier.height(16.dp))&#10;                                }&#10;&#10;                                // Lista de canciones actuales con opción de eliminar&#10;                                if (playlistTracks.isNotEmpty()) {&#10;                                    item {&#10;                                        Text(&#10;                                            text = &quot;current tracks [${playlistTracks.size}]:&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFF4ECDC4)&#10;                                            )&#10;                                        )&#10;                                        Spacer(Modifier.height(8.dp))&#10;                                    }&#10;                                    items(playlistTracks.size) { index -&gt;&#10;                                        val track = playlistTracks[index]&#10;                                        Row(&#10;                                            modifier = Modifier&#10;                                                .fillMaxWidth()&#10;                                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                                            verticalAlignment = Alignment.CenterVertically&#10;                                        ) {&#10;                                            Text(&#10;                                                text = &quot;${index + 1}.&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                                    fontFamily = FontFamily.Monospace,&#10;                                                    color = Color(0xFF95A5A6)&#10;                                                ),&#10;                                                modifier = Modifier.width(32.dp)&#10;                                            )&#10;                                            Column(modifier = Modifier.weight(1f)) {&#10;                                                Text(&#10;                                                    text = track.name,&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        color = Color(0xFFE0E0E0)&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                                Text(&#10;                                                    text = track.getArtistNames(),&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        fontFamily = FontFamily.Monospace,&#10;                                                        fontSize = 11.sp,&#10;                                                        color = Color(0xFF95A5A6)&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                            }&#10;                                            Text(&#10;                                                text = &quot;x&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                                    fontFamily = FontFamily.Monospace,&#10;                                                    color = Color(0xFFFF6B6B)&#10;                                                ),&#10;                                                modifier = Modifier&#10;                                                    .clickable {&#10;                                                        // Eliminar canción de la playlist&#10;                                                        val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                        if (accessToken != null &amp;&amp; selectedPlaylist != null) {&#10;                                                            coroutineScope.launch {&#10;                                                                // Necesitamos usar la API de Spotify para eliminar&#10;                                                                // Por ahora, usar la función removeTrackFromPlaylist si existe&#10;                                                                // O implementarla en SpotifyRepository&#10;                                                                SpotifyRepository.removeTrackFromPlaylist(&#10;                                                                    accessToken,&#10;                                                                    selectedPlaylist!!.id,&#10;                                                                    track.id&#10;                                                                ) { success, errorMsg -&gt;&#10;                                                                    if (success) {&#10;                                                                        // Recargar tracks&#10;                                                                        coroutineScope.launch {&#10;                                                                            localRepository.syncTracksFromSpotify(selectedPlaylist!!.id)&#10;                                                                        }&#10;                                                                    } else {&#10;                                                                        editError = errorMsg&#10;                                                                    }&#10;                                                                }&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                    .padding(8.dp)&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                        // Lista de tracks (solo visible cuando NO está en modo edición)&#10;                        if (!isEditing) {&#10;                            LazyColumn(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                contentPadding = PaddingValues(bottom = 16.dp),&#10;                                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                // Prepara trackEntities una sola vez&#10;                                val trackEntitiesList = tracksFromDB&#10;                                items(playlistTracks.size) { index -&gt;&#10;                                    val track = playlistTracks[index]&#10;                                    val song = Song(&#10;                                        number = index + 1,&#10;                                        title = track.name,&#10;                                        artist = track.getArtistNames(),&#10;                                        spotifyId = track.id,&#10;                                        spotifyUrl = &quot;https://open.spotify.com/track/${track.id}&quot;&#10;                                    )&#10;                                    SongListItem(&#10;                                        song = song,&#10;                                        trackEntities = trackEntitiesList,&#10;                                        index = index,&#10;                                        playerViewModel = playerViewModel,&#10;                                        coroutineScope = coroutineScope,&#10;                                        modifier = Modifier.fillMaxWidth(),&#10;                                        onLikedStatusChanged = {&#10;                                            // Recargar las Liked Songs cuando se modifica el estado&#10;                                            loadLikedSongs()&#10;                                        }&#10;                                    )&#10;                                }&#10;                                &#10;                                // Sección de álbumes del artista (solo si hay un artista seleccionado)&#10;                                if (selectedArtist != null &amp;&amp; artistAlbums.isNotEmpty()) {&#10;                                    item {&#10;                                        Spacer(Modifier.height(24.dp))&#10;                                        Text(&#10;                                            text = &quot;&gt; albums&quot;,&#10;                                            style = MaterialTheme.typography.titleMedium.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFF4ECDC4)&#10;                                            ),&#10;                                            modifier = Modifier.padding(bottom = 12.dp)&#10;                                        )&#10;                                        &#10;                                        LazyRow(&#10;                                            modifier = Modifier.fillMaxWidth(),&#10;                                            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                                            contentPadding = PaddingValues(horizontal = 8.dp)&#10;                                        ) {&#10;                                            items(artistAlbums.size) { index -&gt;&#10;                                                val album = artistAlbums[index]&#10;                                                Column(&#10;                                                    modifier = Modifier&#10;                                                        .width(120.dp)&#10;                                                        .clickable {&#10;                                                            // Cargar los tracks del álbum&#10;                                                            isLoadingTracks = true&#10;                                                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                            if (accessToken != null) {&#10;                                                                SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                                                                    isLoadingTracks = false&#10;                                                                    if (tracks != null) {&#10;                                                                        // Crear una playlist temporal para mostrar el álbum&#10;                                                                        selectedPlaylist = SpotifyPlaylist(&#10;                                                                            id = album.id,&#10;                                                                            name = album.name,&#10;                                                                            description = &quot;Album by ${album.getArtistNames()}&quot;,&#10;                                                                            tracks = com.plyr.network.SpotifyPlaylistTracks(null, album.totaltracks ?: tracks.size),&#10;                                                                            images = album.images&#10;                                                                        )&#10;                                                                        playlistTracks = tracks&#10;                                                                        selectedPlaylistEntity = null&#10;                                                                        // Limpiar el artista seleccionado y sus álbumes&#10;                                                                        selectedArtist = null&#10;                                                                        artistAlbums = emptyList()&#10;                                                                    } else {&#10;                                                                        Log.e(&quot;PlaylistScreen&quot;, &quot;Error loading album tracks: $errorMsg&quot;)&#10;                                                                    }&#10;                                                                }&#10;                                                            }&#10;                                                        },&#10;                                                    horizontalAlignment = Alignment.CenterHorizontally&#10;                                                ) {&#10;                                                    AsyncImage(&#10;                                                        model = album.getImageUrl(),&#10;                                                        contentDescription = &quot;Album cover&quot;,&#10;                                                        modifier = Modifier&#10;                                                            .size(120.dp)&#10;                                                            .clip(RoundedCornerShape(8.dp))&#10;                                                    )&#10;&#10;                                                    Text(&#10;                                                        text = album.name,&#10;                                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                                            fontFamily = FontFamily.Monospace,&#10;                                                            color = Color(0xFFE0E0E0)&#10;                                                        ),&#10;                                                        modifier = Modifier.padding(top = 4.dp),&#10;                                                        maxLines = 2,&#10;                                                        overflow = TextOverflow.Ellipsis,&#10;                                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                                    )&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Diálogo de confirmación para salir sin guardar&#10;                    if (showExitEditDialog) {&#10;                        AlertDialog(&#10;                            onDismissRequest = {&#10;                                showExitEditDialog = false&#10;                                pendingPlaylist = null&#10;                            },&#10;                            title = {&#10;                                Text(&#10;                                    &quot;Unsaved changes&quot;,&#10;                                    style = MaterialTheme.typography.titleMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF4ECDC4)&#10;                                    )&#10;                                )&#10;                            },&#10;                            text = {&#10;                                Text(&#10;                                    &quot;You have unsaved changes. Are you sure you want to exit?&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace&#10;                                    )&#10;                                )&#10;                            },&#10;                            confirmButton = {&#10;                                TextButton(&#10;                                    onClick = {&#10;                                        showExitEditDialog = false&#10;                                        isEditing = false&#10;                                        hasUnsavedChanges = false&#10;&#10;                                        // Si hay una playlist pendiente, cargarla&#10;                                        if (pendingPlaylist != null) {&#10;                                            selectedPlaylist = pendingPlaylist&#10;                                            loadPlaylistTracks(pendingPlaylist!!)&#10;                                            pendingPlaylist = null&#10;                                        } else {&#10;                                            // Si no hay playlist pendiente, salir de la vista actual&#10;                                            selectedPlaylist = null&#10;                                            playlistTracks = emptyList()&#10;                                        }&#10;                                    }&#10;                                ) {&#10;                                    Text(&#10;                                        &quot;Exit&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            },&#10;                            dismissButton = {&#10;                                TextButton(&#10;                                    onClick = {&#10;                                        showExitEditDialog = false&#10;                                        pendingPlaylist = null&#10;                                    }&#10;                                ) {&#10;                                    Text(&#10;                                        &quot;Cancel&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    // Diálogo de compartir - debe estar dentro del mismo scope que showShareDialog&#10;                    if (showShareDialog) {&#10;                        ShareDialog(&#10;                            item = ShareableItem(&#10;                                spotifyId = selectedPlaylist!!.id,&#10;                                spotifyUrl = &quot;https://open.spotify.com/playlist/${selectedPlaylist!!.id}&quot;,&#10;                                youtubeId = null,&#10;                                title = selectedPlaylist!!.name,&#10;                                artist = &quot;Playlist&quot;, //selectedPlaylist!!.owner?.display_name ?: &quot;Playlist&quot;,&#10;                                type = ShareType.PLAYLIST&#10;                            ),&#10;                            onDismiss = { showShareDialog = false }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                // Vista principal de playlists&#10;                if (isLoading || isSyncing) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (isSyncing) &quot;$ syncing_from_spotify...&quot; else &quot;$ loading_playlists...&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFFFD93D)&#10;                            )&#10;                        )&#10;                    }&#10;                } else {&#10;                    // Estado cuando no está cargando ni sincronizando&#10;                    if (playlists.isEmpty()) {&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;No playlists found&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    } else {&#10;                        // Grilla de portadas de playlists&#10;                        LazyVerticalGrid(&#10;                            columns = GridCells.Adaptive(minSize = 150.dp),&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            contentPadding = PaddingValues(bottom = 16.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            // Primer item: Liked Songs&#10;                            if (likedSongsCount &gt; 0) {&#10;                                item {&#10;                                    Column(&#10;                                        modifier = Modifier&#10;                                            .fillMaxWidth()&#10;                                            .clickable {&#10;                                                // Mostrar las Liked Songs como una playlist especial&#10;                                                selectedPlaylist = SpotifyPlaylist(&#10;                                                    id = &quot;liked_songs&quot;,&#10;                                                    name = &quot;Liked Songs&quot;,&#10;                                                    description = &quot;Your favorite tracks on Spotify&quot;,&#10;                                                    tracks = com.plyr.network.SpotifyPlaylistTracks(null, likedSongsCount),&#10;                                                    images = null&#10;                                                )&#10;                                                playlistTracks = likedSongs&#10;                                                isLoadingTracks = false&#10;                                                selectedPlaylistEntity = null&#10;                                            },&#10;                                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    ) {&#10;                                        // Icono de corazón para Liked Songs (en lugar de portada)&#10;                                        Box(&#10;                                            modifier = Modifier&#10;                                                .size(150.dp)&#10;                                                .clip(RoundedCornerShape(8.dp))&#10;                                                .clickable {&#10;                                                    selectedPlaylist = SpotifyPlaylist(&#10;                                                        id = &quot;liked_songs&quot;,&#10;                                                        name = &quot;Liked Songs&quot;,&#10;                                                        description = &quot;Your favorite tracks on Spotify&quot;,&#10;                                                        tracks = com.plyr.network.SpotifyPlaylistTracks(null, likedSongsCount),&#10;                                                        images = null&#10;                                                    )&#10;                                                    playlistTracks = likedSongs&#10;                                                    isLoadingTracks = false&#10;                                                    selectedPlaylistEntity = null&#10;                                                },&#10;                                            contentAlignment = Alignment.Center&#10;                                        ) {&#10;                                            // Fondo degradado&#10;                                            Box(&#10;                                                modifier = Modifier&#10;                                                    .fillMaxSize()&#10;                                                    .clip(RoundedCornerShape(8.dp)),&#10;                                                contentAlignment = Alignment.Center&#10;                                            ) {&#10;                                                androidx.compose.foundation.Canvas(&#10;                                                    modifier = Modifier.fillMaxSize()&#10;                                                ) {&#10;                                                    drawRect(&#10;                                                        brush = androidx.compose.ui.graphics.Brush.verticalGradient(&#10;                                                            colors = listOf(&#10;                                                                Color(0xFF4ECDC4),&#10;                                                                Color(0xFF7FB069)&#10;                                                            )&#10;                                                        )&#10;                                                    )&#10;                                                }&#10;                                                // Emoji de corazón&#10;                                                Text(&#10;                                                    text = &quot;♥&quot;,&#10;                                                    style = MaterialTheme.typography.displayLarge.copy(&#10;                                                        fontSize = 64.sp,&#10;                                                        color = Color.White&#10;                                                    )&#10;                                                )&#10;                                            }&#10;                                        }&#10;&#10;                                        // Nombre de la playlist&#10;                                        Text(&#10;                                            text = &quot;Liked Songs&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                fontFamily = FontFamily.Monospace,&#10;                                                color = Color(0xFFE0E0E0)&#10;                                            ),&#10;                                            modifier = Modifier.padding(top = 8.dp),&#10;                                            maxLines = 2,&#10;                                            overflow = TextOverflow.Ellipsis,&#10;                                            textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Resto de las playlists&#10;                            items(playlists.size) { index -&gt;&#10;                                val playlist = playlists[index]&#10;                                val playlistEntity = playlistsFromDB.find { it.spotifyId == playlist.id }&#10;&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            // Verificar si hay cambios sin guardar antes de cambiar de playlist&#10;                                            if (isEditing &amp;&amp; hasUnsavedChanges) {&#10;                                                pendingPlaylist = playlist&#10;                                                showExitEditDialog = true&#10;                                            } else {&#10;                                                // Resetear modo edición al cambiar de playlist&#10;                                                isEditing = false&#10;                                                hasUnsavedChanges = false&#10;                                                selectedPlaylist = playlist&#10;                                                loadPlaylistTracks(playlist)&#10;                                            }&#10;                                        },&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                ) {&#10;                                    // Portada de la playlist&#10;                                    AsyncImage(&#10;                                        model = playlistEntity?.imageUrl,&#10;                                        contentDescription = &quot;Portada de ${playlist.name}&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(150.dp)&#10;                                            .clip(RoundedCornerShape(8.dp)),&#10;                                        placeholder = null,&#10;                                        error = null,&#10;                                        fallback = null&#10;                                    )&#10;&#10;                                    // Nombre de la playlist&#10;                                    Text(&#10;                                        text = playlist.name,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFE0E0E0)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 8.dp),&#10;                                        maxLines = 2,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Álbumes guardados&#10;                            items(savedAlbums.size) { index -&gt;&#10;                                val album = savedAlbums[index]&#10;&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            // Cargar los tracks del álbum&#10;                                            isLoadingTracks = true&#10;                                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                                            if (accessToken != null) {&#10;                                                SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                                                    isLoadingTracks = false&#10;                                                    if (tracks != null) {&#10;                                                        // Crear una playlist temporal para mostrar el álbum&#10;                                                        selectedPlaylist = SpotifyPlaylist(&#10;                                                            id = album.id,&#10;                                                            name = album.name,&#10;                                                            description = &quot;Album by ${album.getArtistNames()}&quot;,&#10;                                                            tracks = com.plyr.network.SpotifyPlaylistTracks(null, album.totaltracks ?: tracks.size),&#10;                                                            images = album.images&#10;                                                        )&#10;                                                        playlistTracks = tracks&#10;                                                        selectedPlaylistEntity = null&#10;                                                    } else {&#10;                                                        Log.e(&quot;PlaylistScreen&quot;, &quot;Error loading album tracks: $errorMsg&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        },&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                ) {&#10;                                    // Portada del álbum&#10;                                    AsyncImage(&#10;                                        model = album.getImageUrl(),&#10;                                        contentDescription = &quot;Portada de ${album.name}&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(150.dp)&#10;                                            .clip(RoundedCornerShape(8.dp)),&#10;                                        placeholder = null,&#10;                                        error = null,&#10;                                        fallback = null&#10;                                    )&#10;&#10;                                    // Nombre del álbum&#10;                                    Text(&#10;                                        text = album.name,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFE0E0E0)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 8.dp),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;&#10;                                    // Artista del álbum&#10;                                    Text(&#10;                                        text = album.getArtistNames(),&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 10.sp,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 2.dp),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Artistas seguidos&#10;                            items(followedArtists.size) { index -&gt;&#10;                                val artist = followedArtists[index]&#10;&#10;                                Column(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            // Cargar los tracks y álbumes del artista&#10;                                            isLoadingTracks = true&#10;                                            isLoadingArtistAlbums = true&#10;                                            selectedArtist = artist&#10;                                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                                            if (accessToken != null) {&#10;                                                // Cargar top tracks&#10;                                                SpotifyRepository.getArtistTopTracks(accessToken, artist.id) { tracks, errorMsg -&gt;&#10;                                                    isLoadingTracks = false&#10;                                                    if (tracks != null) {&#10;                                                        // Crear una playlist temporal para mostrar los tracks del artista&#10;                                                        selectedPlaylist = SpotifyPlaylist(&#10;                                                            id = artist.id,&#10;                                                            name = artist.name,&#10;                                                            description = &quot;Top tracks by ${artist.name}&quot;,&#10;                                                            tracks = com.plyr.network.SpotifyPlaylistTracks(null, tracks.size),&#10;                                                            images = artist.images&#10;                                                        )&#10;                                                        playlistTracks = tracks&#10;                                                        selectedPlaylistEntity = null&#10;                                                    } else {&#10;                                                        Log.e(&quot;PlaylistScreen&quot;, &quot;Error loading artist tracks: $errorMsg&quot;)&#10;                                                    }&#10;                                                }&#10;                                                &#10;                                                // Cargar álbumes del artista&#10;                                                SpotifyRepository.getArtistAlbums(accessToken, artist.id) { albums, errorMsg -&gt;&#10;                                                    isLoadingArtistAlbums = false&#10;                                                    if (albums != null) {&#10;                                                        artistAlbums = albums&#10;                                                        Log.d(&quot;PlaylistScreen&quot;, &quot;Loaded ${albums.size} albums for ${artist.name}&quot;)&#10;                                                    } else {&#10;                                                        Log.e(&quot;PlaylistScreen&quot;, &quot;Error loading artist albums: $errorMsg&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        },&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                ) {&#10;                                    // Portada del artista (usar imagen del artista)&#10;                                    AsyncImage(&#10;                                        model = artist.getImageUrl(),&#10;                                        contentDescription = &quot;Artista ${artist.name}&quot;,&#10;                                        modifier = Modifier&#10;                                            .size(150.dp)&#10;                                            .clip(RoundedCornerShape(8.dp)),&#10;                                        placeholder = null,&#10;                                        error = null,&#10;                                        fallback = null&#10;                                    )&#10;&#10;                                    // Nombre del artista&#10;                                    Text(&#10;                                        text = artist.name,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFFE0E0E0)&#10;                                        ),&#10;                                        modifier = Modifier.padding(top = 8.dp),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis,&#10;                                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CreateSpotifyPlaylistScreen(&#10;    onBack: () -&gt; Unit,&#10;    onPlaylistCreated: () -&gt; Unit&#10;) {&#10;    var playlistName by remember { mutableStateOf(&quot;&quot;) }&#10;    var playlistDesc by remember { mutableStateOf(&quot;&quot;) }&#10;    var isPublic by remember { mutableStateOf(true) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Estados para el buscador de canciones&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var isSearching by remember { mutableStateOf(false) }&#10;    var searchResults by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var selectedTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        Text(&#10;            text = &quot;$ create_playlist&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 20.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        Spacer(Modifier.height(16.dp))&#10;        OutlinedTextField(&#10;            value = playlistName,&#10;            onValueChange = { playlistName = it },&#10;            label = { Text(&quot;Playlist name&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        OutlinedTextField(&#10;            value = playlistDesc,&#10;            onValueChange = { playlistDesc = it },&#10;            label = { Text(&quot;Description (optional)&quot;) },&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;        Spacer(Modifier.height(8.dp))&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            // Opción Public&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { isPublic = true }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;public&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (isPublic) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            // Opción Private&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable { isPublic = false }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;private&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (!isPublic) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Sección de buscador de canciones&#10;        Spacer(Modifier.height(16.dp))&#10;        Text(&#10;            text = &quot;&gt; add_tracks&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        // Campo de búsqueda&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = { searchQuery = it },&#10;            label = { Text(&quot;Search tracks&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                if (searchQuery.isNotEmpty()) {&#10;                    IconButton(onClick = { searchQuery = &quot;&quot; }) {&#10;                        Text(&#10;                            text = &quot;x&quot;,&#10;                            style = MaterialTheme.typography.titleMedium.copy(&#10;                                fontFamily = FontFamily.Monospace&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    if (searchQuery.isNotBlank() &amp;&amp; !isSearching) {&#10;                        isSearching = true&#10;                        val accessToken = Config.getSpotifyAccessToken(context)&#10;                        if (accessToken != null) {&#10;                            coroutineScope.launch {&#10;                                SpotifyRepository.searchAll(accessToken, searchQuery) { results, errorMsg -&gt;&#10;                                    isSearching = false&#10;                                    if (results != null) {&#10;                                        searchResults = results.tracks.items&#10;                                    } else {&#10;                                        error = errorMsg&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            ),&#10;            enabled = !isSearching&#10;        )&#10;&#10;        // Mostrar indicador de búsqueda&#10;        if (isSearching) {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;$ searching...&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFFFD93D)&#10;                )&#10;            )&#10;        }&#10;&#10;        // Resultados de búsqueda&#10;        if (searchResults.isNotEmpty()) {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;results:&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE0E0E0)&#10;                )&#10;            )&#10;            searchResults.take(10).forEach { track -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable {&#10;                            if (!selectedTracks.contains(track)) {&#10;                                selectedTracks = selectedTracks + track&#10;                                searchResults = emptyList()&#10;                                searchQuery = &quot;&quot;&#10;                            }&#10;                        }&#10;                        .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;+&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF4ECDC4)&#10;                        ),&#10;                        modifier = Modifier.padding(end = 8.dp)&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = track.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = track.getArtistNames(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Lista de canciones seleccionadas&#10;        if (selectedTracks.isNotEmpty()) {&#10;            Spacer(Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;selected [${selectedTracks.size}]:&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFF4ECDC4)&#10;                )&#10;            )&#10;            selectedTracks.forEachIndexed { index, track -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;${index + 1}.&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        modifier = Modifier.width(32.dp)&#10;                    )&#10;                    Column(modifier = Modifier.weight(1f)) {&#10;                        Text(&#10;                            text = track.name,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFFE0E0E0)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                        Text(&#10;                            text = track.getArtistNames(),&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            maxLines = 1,&#10;                            overflow = TextOverflow.Ellipsis&#10;                        )&#10;                    }&#10;                    Text(&#10;                        text = &quot;x&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            color = Color(0xFFFF6B6B)&#10;                        ),&#10;                        modifier = Modifier&#10;                            .clickable {&#10;                                selectedTracks = selectedTracks.filterIndexed { i, _ -&gt; i != index }&#10;                            }&#10;                            .padding(8.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(16.dp))&#10;        Text(&#10;            text = if (isLoading) &quot;&lt;creating...&gt;&quot; else &quot;&lt;create&gt;&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 14.sp,&#10;                color = if (isLoading) Color(0xFFFFD93D) else Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable(enabled = !isLoading &amp;&amp; playlistName.isNotBlank()) {&#10;                    // Acción de crear playlist con las canciones seleccionadas&#10;                    isLoading = true&#10;                    error = null&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        val trackIds = selectedTracks.map { it.id }&#10;                        SpotifyRepository.createPlaylist(&#10;                            accessToken,&#10;                            playlistName,&#10;                            playlistDesc,&#10;                            isPublic,&#10;                            trackIds&#10;                        ) { success, errMsg -&gt;&#10;                            isLoading = false&#10;                            if (success) onPlaylistCreated() else error = errMsg ?: &quot;Unknown error&quot;&#10;                        }&#10;                    } else {&#10;                        isLoading = false&#10;                        error = &quot;Spotify not connected&quot;&#10;                    }&#10;                }&#10;                .padding(8.dp)&#10;        )&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&quot;Error: $it&quot;, color = Color.Red)&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun SpotifyPlaylistDetailView(&#10;    playlist: SpotifyPlaylist,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onStart: () -&gt; Unit,&#10;    onRandom: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var showShareDialog by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header con botón de retroceso&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;$ ${playlist.name}&quot;,&#10;                style = MaterialTheme.typography.headlineMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 20.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier.weight(1f),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;        }&#10;&#10;        // Botones de acción&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;&#10;            ActionButton(&#10;                text = &quot;&lt;start&gt;&quot;,&#10;                color = Color(0xFF4ECDC4),&#10;                onClick = onStart,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;rand&gt;&quot;,&#10;                color = Color(0xFFFFD93D),&#10;                onClick = onRandom,&#10;                enabled = tracks.isNotEmpty()&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;save&gt;&quot;,&#10;                color = Color(0xFF7FB069),&#10;                onClick = onSave,&#10;                enabled = true&#10;            )&#10;            ActionButton(&#10;                text = &quot;&lt;share&gt;&quot;,&#10;                color = Color(0xFFFF6B9D),&#10;                onClick = { showShareDialog = true },&#10;                enabled = true&#10;            )&#10;        }&#10;&#10;        // Estados de carga y error&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        error?.let {&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Lista de tracks&#10;        if (tracks.isNotEmpty()) {&#10;            // Crear trackEntities una sola vez fuera del LazyColumn&#10;            val trackEntities = tracks.mapIndexed { trackIndex, spotifyTrack -&gt;&#10;                TrackEntity(&#10;                    id = &quot;spotify_${spotifyTrack.id}&quot;,&#10;                    playlistId = playlist.id,&#10;                    spotifyTrackId = spotifyTrack.id,&#10;                    name = spotifyTrack.name,&#10;                    artists = spotifyTrack.getArtistNames(),&#10;                    youtubeVideoId = null,&#10;                    audioUrl = null,&#10;                    position = trackIndex,&#10;                    lastSyncTime = System.currentTimeMillis()&#10;                )&#10;            }&#10;            LazyColumn(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentPadding = PaddingValues(bottom = 16.dp)&#10;            ) {&#10;                items(tracks.size) { index -&gt;&#10;                    val track = tracks[index]&#10;                    val song = Song(&#10;                        number = index + 1,&#10;                        title = track.name,&#10;                        artist = track.getArtistNames(),&#10;                        spotifyId = track.id,&#10;                        spotifyUrl = &quot;https://open.spotify.com/track/${track.id}&quot;&#10;                    )&#10;                    SongListItem(&#10;                        song = song,&#10;                        trackEntities = trackEntities,&#10;                        index = index,&#10;                        playerViewModel = playerViewModel,&#10;                        coroutineScope = coroutineScope,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        onLikedStatusChanged = {&#10;                            // Recargar las Liked Songs cuando se modifica el estado&#10;                            // (necesitamos acceso al contexto y coroutineScope)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showShareDialog) {&#10;        ShareDialog(&#10;            item = ShareableItem(&#10;                spotifyId = playlist.id,&#10;                spotifyUrl = &quot;https://open.spotify.com/playlist/${playlist.id}&quot;,&#10;                youtubeId = null,&#10;                title = playlist.name,&#10;                artist = &quot;Playlist&quot;, //playlist.owner?.display_name ?: &quot;Playlist&quot;,&#10;                type = ShareType.PLAYLIST&#10;            ),&#10;            onDismiss = { showShareDialog = false }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun ActionButton(&#10;    text: String,&#10;    color: Color,&#10;    onClick: () -&gt; Unit,&#10;    enabled: Boolean = true&#10;) {&#10;    Text(&#10;        text = text,&#10;        style = MaterialTheme.typography.bodyMedium.copy(&#10;            fontFamily = FontFamily.Monospace,&#10;            fontSize = 16.sp,&#10;            color = if (enabled) color else Color(0xFF95A5A6)&#10;        ),&#10;        modifier = Modifier&#10;            .clickable(enabled = enabled) { onClick() }&#10;            .padding(8.dp)&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.navigation&#10;&#10;import androidx.compose.runtime.Stable&#10;&#10;// Estados para navegación&#10;enum class Screen {&#10;    HOME,&#10;    SEARCH,&#10;    QUEUE,&#10;    CONFIG,&#10;    PLAYLISTS&#10;}&#10;&#10;@Stable&#10;data class MenuOption(val screen: Screen, val title: String)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.ui.navigation.MenuOption&#10;import com.plyr.ui.navigation.Screen&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    context: Context,&#10;    onNavigateToScreen: (Screen) -&gt; Unit&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var backPressedTime by remember { mutableStateOf(0L) }&#10;    var showExitMessage by remember { mutableStateOf(false) }&#10;    &#10;    // Handle double back press to exit&#10;    BackHandler {&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - backPressedTime &gt; 2000) {&#10;            backPressedTime = currentTime&#10;            showExitMessage = true&#10;            // Hide message after 2 seconds&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(2000)&#10;                showExitMessage = false&#10;            }&#10;        } else {&#10;            // Exit app&#10;            (context as? Activity)?.finish()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Terminal-style header&#10;        Text(&#10;            text = &quot;$ plyr_home&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Lista de opciones disponibles&#10;        val options = remember {&#10;            listOf(&#10;                MenuOption(Screen.SEARCH, &quot;&gt; search&quot;),&#10;                MenuOption(Screen.PLAYLISTS, &quot;&gt; playlists&quot;),&#10;                MenuOption(Screen.QUEUE, &quot;&gt; queue&quot;),&#10;                MenuOption(Screen.CONFIG, &quot;&gt; settings&quot;)&#10;            )&#10;        }&#10;        &#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                Text(&#10;                    text = option.title,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 20.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable {&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                            onNavigateToScreen(option.screen)&#10;                        }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Exit message&#10;        if (showExitMessage) {&#10;            Text(&#10;                text = &quot;&gt; Press back again to exit&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(top = 8.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun QueueScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_queue&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Queue content&#10;        if (playerViewModel != null) {&#10;            val queueState by playerViewModel.queueState.collectAsStateWithLifecycle()&#10;            val currentQueue = queueState.queue&#10;            &#10;            if (currentQueue.isNotEmpty()) {&#10;                // Queue header&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Current queue [${currentQueue.size}]&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFFFFD93D)&#10;                        )&#10;                    )&#10;                    &#10;                    // Clear queue button&#10;                    TextButton(&#10;                        onClick = { &#10;                            playerViewModel.clearQueue()&#10;                            Log.d(&quot;QueueScreen&quot;, &quot;Queue cleared by user&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;clear&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(Modifier.height(16.dp))&#10;                &#10;                // Queue track list&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(&#10;                        count = currentQueue.size,&#10;                        key = { index -&gt; currentQueue[index].id }&#10;                    ) { index -&gt;&#10;                        val track = currentQueue[index]&#10;                        val isCurrentTrack = queueState.currentIndex == index&#10;                        &#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp, horizontal = 4.dp)&#10;                                .clickable {&#10;                                    coroutineScope.launch {&#10;                                        if (queueState.currentIndex != index) {&#10;                                            playerViewModel.playQueueFromIndex(index)&#10;                                        } else {&#10;                                            playerViewModel.resumeIfPaused()&#10;                                        }&#10;                                    }&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Starting queue from index: $index&quot;)&#10;                                },&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Position and status indicator&#10;                            Text(&#10;                                text = if (isCurrentTrack) &quot;♪ &quot; else &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            // Track name&#10;                            MarqueeText(&#10;                                text = track.name,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFFE0E0E0) else Color(0xFFBDC3C7)&#10;                                ),&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            &#10;                            // Remove from queue button&#10;                            TextButton(&#10;                                onClick = { &#10;                                    playerViewModel.removeFromQueue(index)&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Removed track from queue at index: $index&quot;)&#10;                                }&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;×&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Empty queue message&#10;                Text(&#10;                    text = &quot;Queue is empty&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(32.dp)&#10;                )&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Player not available&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;&#10;/**&#10; * Extensiones para integrar PlayerViewModel con notificaciones de música&#10; * &#10; * Estas extensiones facilitan el uso del sistema de notificaciones&#10; * sin modificar directamente el PlayerViewModel existente.&#10; */&#10;&#10;/**&#10; * Inicializa el manager de notificaciones&#10; */&#10;fun PlayerViewModel.initializeNotifications(context: Context): MusicNotificationManager {&#10;    return MusicNotificationManager(context).apply {&#10;        startService()&#10;    }&#10;}&#10;&#10;/**&#10; * Reproduce un track con notificación&#10; */&#10;fun PlayerViewModel.playWithNotification(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity,&#10;    onAudioUrlReady: (String) -&gt; Unit&#10;) {&#10;    // Actualizar la información del track en la notificación&#10;    notificationManager.updateSongInfo(track)&#10;    &#10;    // Tu lógica existente de reproducción aquí&#10;    // Cuando tengas la URL de audio, llamar:&#10;    // onAudioUrlReady(audioUrl)&#10;}&#10;&#10;/**&#10; * Actualiza la notificación cuando cambia el track&#10; */&#10;fun PlayerViewModel.updateNotificationTrack(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity?&#10;) {&#10;    track?.let {&#10;        notificationManager.updateSongInfo(it.name, it.artists)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>