<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt" />
              <option name="updatedContent" value="package com.plyr.examples&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de integración del sistema de notificaciones de música&#10; * &#10; * Este archivo muestra cómo implementar las notificaciones en tu MainActivity.&#10; * Copia este código a tu MainActivity existente.&#10; */&#10;class NotificationIntegrationExample {&#10;    &#10;    // En tu MainActivity, agrega estas propiedades:&#10;    private lateinit var notificationManager: MusicNotificationManager&#10;    private lateinit var playerViewModel: PlayerViewModel&#10;    &#10;    // Launcher para pedir permisos de notificación (Android 13+)&#10;    private val notificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Permiso concedido, continuar con la inicialización&#10;            initializeNotificationSystem()&#10;        } else {&#10;            // Permiso denegado, manejar el caso apropiadamente&#10;            // Puedes mostrar un mensaje al usuario explicando por qué necesitas el permiso&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Llama este método en onCreate() de tu MainActivity&#10;     */&#10;    fun setupNotificationSystem(activity: ComponentActivity, viewModel: PlayerViewModel) {&#10;        playerViewModel = viewModel&#10;        &#10;        // Verificar y pedir permisos de notificación para Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            when {&#10;                ContextCompat.checkSelfPermission(&#10;                    activity,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10;                    // Permiso ya concedido&#10;                    initializeNotificationSystem()&#10;                }&#10;                else -&gt; {&#10;                    // Pedir permiso&#10;                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                }&#10;            }&#10;        } else {&#10;            // Android 12 y menores no necesitan permiso explícito&#10;            initializeNotificationSystem()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicializa el sistema de notificaciones&#10;     */&#10;    private fun initializeNotificationSystem() {&#10;        notificationManager = MusicNotificationManager(this)&#10;        notificationManager.startService()&#10;        &#10;        // Configurar listeners para actualizar notificación cuando cambie el track&#10;        setupNotificationListeners()&#10;    }&#10;    &#10;    /**&#10;     * Configura los listeners para sincronizar el PlayerViewModel con las notificaciones&#10;     */&#10;    private fun setupNotificationListeners() {&#10;        // Observar cambios en el track actual&#10;        playerViewModel.currentTrack.observe(this) { track -&gt;&#10;            track?.let {&#10;                notificationManager.updateSongInfo(it.name, it.artists)&#10;            }&#10;        }&#10;        &#10;        // Observar cambios en el título actual&#10;        playerViewModel.currentTitle.observe(this) { title -&gt;&#10;            title?.let {&#10;                // Si tienes información del artista disponible&#10;                val artist = &quot;Artista Desconocido&quot; // Reemplaza con la fuente real del artista&#10;                notificationManager.updateSongInfo(it, artist)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo de cómo reproducir una canción con notificación&#10;     */&#10;    fun playTrackWithNotification(audioUrl: String, title: String, artist: String) {&#10;        lifecycleScope.launch {&#10;            // Actualizar información en la notificación&#10;            notificationManager.updateSongInfo(title, artist)&#10;            &#10;            // Reproducir el audio en el servicio de notificación&#10;            notificationManager.playAudio(audioUrl, title, artist)&#10;            &#10;            // También reproducir en tu PlayerViewModel existente&#10;            // playerViewModel.playAudio(audioUrl) // Tu método existente&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Limpieza en onDestroy()&#10;     */&#10;    fun cleanupNotificationSystem() {&#10;        if (::notificationManager.isInitialized) {&#10;            notificationManager.stopService()&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * INTEGRACIÓN COMPLETA EN TU MAINACTIVITY:&#10; * &#10; * class MainActivity : ComponentActivity() {&#10; *     private lateinit var notificationManager: MusicNotificationManager&#10; *     private lateinit var playerViewModel: PlayerViewModel&#10; *     &#10; *     // Launcher para permisos de notificación&#10; *     private val notificationPermissionLauncher = registerForActivityResult(&#10; *         ActivityResultContracts.RequestPermission()&#10; *     ) { isGranted -&gt;&#10; *         if (isGranted) {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onCreate(savedInstanceState: Bundle?) {&#10; *         super.onCreate(savedInstanceState)&#10; *         &#10; *         // Tu código existente...&#10; *         playerViewModel = ViewModelProvider(this)[PlayerViewModel::class.java]&#10; *         &#10; *         // Configurar notificaciones&#10; *         setupNotificationSystem()&#10; *         &#10; *         // Tu código de Compose...&#10; *     }&#10; *     &#10; *     private fun setupNotificationSystem() {&#10; *         if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10; *             when {&#10; *                 ContextCompat.checkSelfPermission(&#10; *                     this, Manifest.permission.POST_NOTIFICATIONS&#10; *                 ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10; *                     initializeNotificationSystem()&#10; *                 }&#10; *                 else -&gt; {&#10; *                     notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10; *                 }&#10; *             }&#10; *         } else {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     private fun initializeNotificationSystem() {&#10; *         notificationManager = MusicNotificationManager(this)&#10; *         notificationManager.startService()&#10; *         &#10; *         // Observar cambios en el track actual&#10; *         playerViewModel.currentTrack.observe(this) { track -&gt;&#10; *             track?.let {&#10; *                 notificationManager.updateSongInfo(it.name, it.artists)&#10; *             }&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onDestroy() {&#10; *         super.onDestroy()&#10; *         if (::notificationManager.isInitialized) {&#10; *             notificationManager.stopService()&#10; *         }&#10; *     }&#10; * }&#10; */" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.IBinder&#10;import android.util.Log&#10;import com.plyr.database.TrackEntity&#10;&#10;/**&#10; * MusicNotificationManager - Clase helper para gestionar la notificación de música&#10; * &#10; * Esta clase actúa como puente entre tu PlayerViewModel y el MusicService,&#10; * facilitando el control de la notificación sin tener que manejar directamente&#10; * el service binding en el ViewModel.&#10; */&#10;class MusicNotificationManager(private val context: Context) {&#10;    &#10;    private var musicService: MusicService? = null&#10;    private var isBound = false&#10;    &#10;    companion object {&#10;        private const val TAG = &quot;MusicNotificationManager&quot;&#10;    }&#10;    &#10;    /**&#10;     * Conexión con el servicio de música&#10;     */&#10;    private val serviceConnection = object : ServiceConnection {&#10;        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {&#10;            Log.d(TAG, &quot;Service connected&quot;)&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            isBound = true&#10;        }&#10;        &#10;        override fun onServiceDisconnected(name: ComponentName?) {&#10;            Log.d(TAG, &quot;Service disconnected&quot;)&#10;            musicService = null&#10;            isBound = false&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicia el servicio y se conecta a él&#10;     */&#10;    fun startService() {&#10;        Log.d(TAG, &quot;Starting MusicService&quot;)&#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.startService(serviceIntent)&#10;        context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;    }&#10;    &#10;    /**&#10;     * Para el servicio y se desconecta&#10;     */&#10;    fun stopService() {&#10;        Log.d(TAG, &quot;Stopping MusicService&quot;)&#10;        if (isBound) {&#10;            context.unbindService(serviceConnection)&#10;            isBound = false&#10;        }&#10;        &#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.stopService(serviceIntent)&#10;        musicService = null&#10;    }&#10;    &#10;    /**&#10;     * Inicia la reproducción de audio con notificación&#10;     */&#10;    fun playAudio(audioUrl: String, title: String, artist: String) {&#10;        Log.d(TAG, &quot;Playing audio: $title by $artist&quot;)&#10;        &#10;        if (!isBound) {&#10;            // Si no está conectado, iniciar el servicio con los datos&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;AUDIO_URL&quot;, audioUrl)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;            context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;        } else {&#10;            // Si ya está conectado, usar el servicio directamente&#10;            musicService?.updateSongInfo(title, artist)&#10;            musicService?.playAudio(audioUrl)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza la información de la canción en la notificación&#10;     */&#10;    fun updateSongInfo(title: String, artist: String) {&#10;        Log.d(TAG, &quot;Updating song info: $title by $artist&quot;)&#10;        &#10;        if (isBound &amp;&amp; musicService != null) {&#10;            musicService?.updateSongInfo(title, artist)&#10;        } else {&#10;            // Si no está conectado, enviar intent de actualización&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;UPDATE_INFO&quot;, true)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza usando un TrackEntity&#10;     */&#10;    fun updateSongInfo(track: TrackEntity) {&#10;        updateSongInfo(track.name, track.artists)&#10;    }&#10;    &#10;    /**&#10;     * Pausa/reanuda la reproducción desde la notificación&#10;     */&#10;    fun togglePlayPause() {&#10;        musicService?.togglePlayPause()&#10;    }&#10;    &#10;    /**&#10;     * Para completamente la reproducción&#10;     */&#10;    fun stopPlayback() {&#10;        musicService?.stopPlayback()&#10;    }&#10;    &#10;    /**&#10;     * Verifica si está reproduciendo&#10;     */&#10;    fun isPlaying(): Boolean {&#10;        return musicService?.isPlaying() ?: false&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el servicio está conectado&#10;     */&#10;    fun isServiceConnected(): Boolean {&#10;        return isBound &amp;&amp; musicService != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/SongListItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/SongListItem.kt" />
              <option name="originalContent" value="package com.plyr.ui.components&#10;&#10;import android.util.Log&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.background&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.ui.PlaylistsScreen&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.DownloadManager&#10;import com.plyr.database.PlaylistDatabase&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import kotlinx.coroutines.Dispatchers&#10;import com.plyr.ui.theme.PlyrSpacing&#10;import com.plyr.ui.theme.PlyrTextStyles&#10;&#10;// Data class para unificar los datos de la canción&#10;data class Song(&#10;    val number: Int,&#10;    val title: String,&#10;    val artist: String,&#10;    val spotifyId: String? = null,&#10;    val youtubeId: String? = null,&#10;    val spotifyUrl: String? = null&#10;)&#10;&#10;@Composable&#10;fun SongListItem(&#10;    song: Song,&#10;    trackEntities: List&lt;TrackEntity&gt;,&#10;    index: Int,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope,&#10;    modifier: Modifier = Modifier,&#10;    isSelected: Boolean = false,&#10;    onLikedStatusChanged: (() -&gt; Unit)? = null,&#10;    customButtonIcon: String? = null, // Nueva: Icono personalizado para el botón (ej: &quot;+&quot;)&#10;    customButtonAction: (() -&gt; Unit)? = null // Nueva: Acción personalizada para el botón&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val context = LocalContext.current&#10;    var showPopup by remember { mutableStateOf(false) }&#10;    var showShareDialog by remember { mutableStateOf(false) }&#10;    var showPlaylistDialog by remember { mutableStateOf(false) }&#10;    var userPlaylists by remember { mutableStateOf&lt;List&lt;com.plyr.network.SpotifyPlaylist&gt;&gt;(emptyList()) }&#10;    var isLoadingPlaylists by remember { mutableStateOf(false) }&#10;    var addToPlaylistError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var addToPlaylistSuccess by remember { mutableStateOf(false) }&#10;    var isLoadingTrackInfo by remember { mutableStateOf(false) }&#10;    var fetchedTrackInfo by remember { mutableStateOf&lt;com.plyr.network.SpotifyTrack?&gt;(null) }&#10;    var fetchInfoError by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var isLiked by remember { mutableStateOf&lt;Boolean?&gt;(null) }&#10;    var isCheckingLiked by remember { mutableStateOf(false) }&#10;&#10;    Row(&#10;        modifier = modifier&#10;            .clickable {&#10;                haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                playerViewModel?.let { viewModel -&gt;&#10;                    if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#10;                        viewModel.setCurrentPlaylist(trackEntities, index)&#10;                        val selectedTrackEntity = trackEntities[index]&#10;&#10;                        Log.d(&quot;SongListItem&quot;, &quot;═══════════════════════════════════&quot;)&#10;                        Log.d(&quot;SongListItem&quot;, &quot; REPRODUCIR TRACK&quot;)&#10;                        Log.d(&quot;SongListItem&quot;, &quot;═══════════════════════════════════&quot;)&#10;                        Log.d(&quot;SongListItem&quot;, &quot;Track: ${selectedTrackEntity.name}&quot;)&#10;                        Log.d(&quot;SongListItem&quot;, &quot;AudioUrl: ${selectedTrackEntity.audioUrl}&quot;)&#10;                        Log.d(&quot;SongListItem&quot;, &quot;Es archivo local: ${selectedTrackEntity.audioUrl?.startsWith(&quot;/&quot;) == true}&quot;)&#10;&#10;                        coroutineScope.launch {&#10;                            try {&#10;                                viewModel.loadAudioFromTrack(selectedTrackEntity)&#10;                                Log.d(&quot;SongListItem&quot;, &quot;✓ loadAudioFromTrack llamado exitosamente&quot;)&#10;                            } catch (e: Exception) {&#10;                                Log.e(&quot;SongListItem&quot;, &quot;✗ Error al reproducir track&quot;, e)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            .fillMaxWidth()&#10;            .height(32.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        // Track number&#10;        Text(&#10;            text = song.number.toString(),&#10;            style = PlyrTextStyles.trackArtist(),&#10;            modifier = Modifier.padding(end = PlyrSpacing.small)&#10;        )&#10;        // Song title and artist&#10;        Column(&#10;            modifier = Modifier.weight(1f),&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = song.title,&#10;                style = if (isSelected)&#10;                    PlyrTextStyles.selectableOption(true)&#10;                else&#10;                    PlyrTextStyles.trackTitle(),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Text(&#10;                text = song.artist,&#10;                style = PlyrTextStyles.trackArtist(),&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis,&#10;                modifier = Modifier.padding(top = 0.dp)&#10;            )&#10;        }&#10;        // Botón personalizable&#10;        IconButton(onClick = {&#10;            if (customButtonAction != null) {&#10;                customButtonAction()&#10;            } else {&#10;                showPopup = true&#10;            }&#10;        }, modifier = Modifier.size(32.dp)) {&#10;            Text(&#10;                text = customButtonIcon ?: &quot;*&quot;,&#10;                style = PlyrTextStyles.menuOption(),&#10;                color = Color(0xFF3FFFEF)&#10;            )&#10;        }&#10;    }&#10;&#10;    // Solo mostrar popup si no hay acción personalizada&#10;    if (showPopup &amp;&amp; customButtonAction == null) {&#10;        // Cargar información de la canción cuando se abre el popup&#10;        LaunchedEffect(true) {&#10;            if (showPopup &amp;&amp; song.spotifyId != null) {&#10;                isLoadingTrackInfo = true&#10;                isCheckingLiked = true&#10;                fetchInfoError = null&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    // Obtener info del track&#10;                    SpotifyRepository.getTrackInfo(accessToken, song.spotifyId) { trackInfo, error -&gt;&#10;                        isLoadingTrackInfo = false&#10;                        if (trackInfo != null) {&#10;                            fetchedTrackInfo = trackInfo&#10;                        } else {&#10;                            fetchInfoError = error ?: &quot;Error fetching track info&quot;&#10;                        }&#10;                    }&#10;&#10;                    // Verificar si está en Liked Songs&#10;                    SpotifyRepository.checkSavedTrack(accessToken, song.spotifyId) { liked, error -&gt;&#10;                        isCheckingLiked = false&#10;                        if (error == null) {&#10;                            isLiked = liked&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTrackInfo = false&#10;                    isCheckingLiked = false&#10;                    fetchInfoError = &quot;Token de Spotify no disponible&quot;&#10;                }&#10;            }&#10;        }&#10;&#10;        Dialog(onDismissRequest = {&#10;            showPopup = false&#10;            fetchedTrackInfo = null&#10;            fetchInfoError = null&#10;        }) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .background(Color(0xFF181818))&#10;                    .padding(24.dp)&#10;                    .fillMaxWidth(0.9f)&#10;            ) {&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Sección de información del track&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(150.dp)&#10;                    ) {&#10;                        when {&#10;                            isLoadingTrackInfo -&gt; {&#10;                                // Estado de carga&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(color = Color(0xFF4ECDC4))&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;loading...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            fetchInfoError != null -&gt; {&#10;                                // Error&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✗&quot;,&#10;                                        style = MaterialTheme.typography.displayMedium.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = fetchInfoError ?: &quot;Error&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        ),&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                            fetchedTrackInfo != null -&gt; {&#10;                                // Mostrar información de la canción&#10;                                val trackInfo = fetchedTrackInfo&#10;                                LazyColumn(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    item {&#10;                                        Text(&#10;                                            text = trackInfo?.name ?: song.title,&#10;                                            style = MaterialTheme.typography.titleMedium.copy(&#10;                                                color = Color.White,&#10;                                                fontWeight = FontWeight.Bold&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                    item {&#10;                                        Text(&#10;                                            text = trackInfo?.artists?.joinToString(&quot;, &quot;) { it.name } ?: song.artist,&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                color = Color(0xFFAAAAAA)&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                    trackInfo?.album?.let { album -&gt;&#10;                                        item {&#10;                                            Spacer(modifier = Modifier.height(4.dp))&#10;                                            Text(&#10;                                                text = &quot;Album: ${album.name}&quot;,&#10;                                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                                    color = Color(0xFF888888)&#10;                                                )&#10;                                            )&#10;                                        }&#10;                                        album.releaseDate?.let { date -&gt;&#10;                                            item {&#10;                                                Text(&#10;                                                    text = &quot;Release: $date&quot;,&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                                        color = Color(0xFF888888)&#10;                                                    )&#10;                                                )&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                    item {&#10;                                        Text(&#10;                                            text = &quot;Duration: ${trackInfo?.durationMs?.let { ms -&gt; &#10;                                                val minutes = ms / 60000&#10;                                                val seconds = &quot;%02d&quot;.format((ms % 60000) / 1000)&#10;                                                &quot;$minutes:$seconds&quot;&#10;                                            } ?: &quot;N/A&quot;}&quot;,&#10;                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                color = Color(0xFF888888)&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                            else -&gt; {&#10;                                // Mostrar info básica mientras carga&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.Start,&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = song.title,&#10;                                        style = MaterialTheme.typography.titleMedium.copy(&#10;                                            color = Color.White,&#10;                                            fontWeight = FontWeight.Bold&#10;                                        )&#10;                                    )&#10;                                    Text(&#10;                                        text = song.artist,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color(0xFFAAAAAA)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Botones de acción&#10;                    Column(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        // Add to Playlist&#10;                        Text(&#10;                            text = &quot;add to playlist&quot;,&#10;                            color = Color(0xFF3FFFEF),&#10;                            fontWeight = FontWeight.Normal,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    if (song.spotifyId != null &amp;&amp; Config.isSpotifyConnected(context)) {&#10;                                        showPopup = false&#10;                                        showPlaylistDialog = true&#10;                                        isLoadingPlaylists = true&#10;                                        addToPlaylistError = null&#10;&#10;                                        val accessToken = Config.getSpotifyAccessToken(context)&#10;                                        if (accessToken != null) {&#10;                                            SpotifyRepository.getUserPlaylists(accessToken) { playlists, error -&gt;&#10;                                                isLoadingPlaylists = false&#10;                                                if (playlists != null) {&#10;                                                    userPlaylists = playlists&#10;                                                } else {&#10;                                                    addToPlaylistError = error ?: &quot;Error cargando playlists&quot;&#10;                                                }&#10;                                            }&#10;                                        } else {&#10;                                            isLoadingPlaylists = false&#10;                                            addToPlaylistError = &quot;Token de Spotify no disponible&quot;&#10;                                        }&#10;                                    } else {&#10;                                        Log.d(&quot;SongListItem&quot;, &quot;No se puede añadir a playlist: sin Spotify ID o no conectado&quot;)&#10;                                        showPopup = false&#10;                                    }&#10;                                }&#10;                                .padding(vertical = 4.dp)&#10;                        )&#10;&#10;                        // Add to Queue&#10;                        Text(&#10;                            text = &quot;add to queue&quot;,&#10;                            color = Color(0xFF3FFFEF),&#10;                            fontWeight = FontWeight.Normal,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    showPopup = false&#10;                                    playerViewModel?.let { viewModel -&gt;&#10;                                        if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#10;                                            val trackToAdd = trackEntities[index]&#10;                                            viewModel.addToQueue(trackToAdd)&#10;                                            Log.d(&quot;SongListItem&quot;, &quot;✓ Track added to queue: ${trackToAdd.name}&quot;)&#10;                                        }&#10;                                    }&#10;                                }&#10;                                .padding(vertical = 4.dp)&#10;                        )&#10;&#10;                        // Share&#10;                        Text(&#10;                            text = &quot;share&quot;,&#10;                            color = Color(0xFF3FFFEF),&#10;                            fontWeight = FontWeight.Normal,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    showShareDialog = true&#10;                                    showPopup = false&#10;                                }&#10;                                .padding(vertical = 4.dp)&#10;                        )&#10;&#10;                        // Like / Unlike&#10;                        Text(&#10;                            text = if (isLiked == true) &quot;remove from liked songs&quot; else &quot;add to liked songs&quot;,&#10;                            color = Color(0xFF3FFFEF),&#10;                            fontWeight = FontWeight.Normal,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    // Acción de agregar/quitar de Liked Songs&#10;                                    showPopup = false&#10;                                    isLiked?.let { currentlyLiked -&gt;&#10;                                        val accessToken = Config.getSpotifyAccessToken(context)&#10;                                        if (accessToken != null &amp;&amp; song.spotifyId != null) {&#10;                                            isLoadingTrackInfo = true&#10;                                            if (currentlyLiked) {&#10;                                                // Quitar de Liked Songs&#10;                                                SpotifyRepository.removeTrack(accessToken, song.spotifyId) { success, error -&gt;&#10;                                                    isLoadingTrackInfo = false&#10;                                                    if (success) {&#10;                                                        isLiked = false&#10;                                                        Log.d(&quot;SongListItem&quot;, &quot;✓ Canción quitada de Liked Songs&quot;)&#10;                                                        onLikedStatusChanged?.invoke()&#10;                                                    } else {&#10;                                                        Log.e(&quot;SongListItem&quot;, &quot;Error quitando canción de Liked Songs: $error&quot;)&#10;                                                    }&#10;                                                }&#10;                                            } else {&#10;                                                // Añadir a Liked Songs&#10;                                                SpotifyRepository.saveTrack(accessToken, song.spotifyId) { success, error -&gt;&#10;                                                    isLoadingTrackInfo = false&#10;                                                    if (success) {&#10;                                                        isLiked = true&#10;                                                        Log.d(&quot;SongListItem&quot;, &quot;✓ Canción añadida a Liked Songs&quot;)&#10;                                                        onLikedStatusChanged?.invoke()&#10;                                                    } else {&#10;                                                        Log.e(&quot;SongListItem&quot;, &quot;Error añadiendo canción a Liked Songs: $error&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                }&#10;                                .padding(vertical = 4.dp)&#10;                        )&#10;&#10;                        // Download&#10;                        Text(&#10;                            text = &quot;download&quot;,&#10;                            color = Color(0xFF3FFFEF),&#10;                            fontWeight = FontWeight.Normal,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    showPopup = false&#10;                                    if (song.spotifyId != null) {&#10;                                        coroutineScope.launch {&#10;                                            // Verificar si ya está descargada&#10;                                            val database = PlaylistDatabase.getDatabase(context)&#10;                                            val alreadyDownloaded = database.downloadedTrackDao()&#10;                                                .isTrackDownloaded(song.spotifyId) &gt; 0&#10;&#10;                                            if (alreadyDownloaded) {&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;Track already downloaded&quot;)&#10;                                            } else {&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;Starting download: ${song.title}&quot;)&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;Song data - Title: '${song.title}', Artist: '${song.artist}', SpotifyId: '${song.spotifyId}', YoutubeId: '${song.youtubeId}'&quot;)&#10;&#10;                                                // Primero intentar obtener el youtubeId del TrackEntity actual&#10;                                                val trackEntity = if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#10;                                                    trackEntities[index]&#10;                                                } else null&#10;&#10;                                                val initialYoutubeId = trackEntity?.youtubeVideoId ?: song.youtubeId&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;TrackEntity youtubeVideoId: ${trackEntity?.youtubeVideoId}&quot;)&#10;&#10;                                                // Si aún no tenemos youtubeId, buscarlo en YouTube&#10;                                                val finalYoutubeId = if (initialYoutubeId == null) {&#10;                                                    withContext(Dispatchers.IO) {&#10;                                                        val searchQuery = &quot;${song.title} ${song.artist}&quot;&#10;                                                        Log.d(&quot;SongListItem&quot;, &quot;YouTube ID not available, searching with query: '$searchQuery'&quot;)&#10;                                                        val foundId = com.plyr.network.YouTubeManager.searchVideoId(searchQuery)&#10;                                                        Log.d(&quot;SongListItem&quot;, &quot;YouTube search result: ${if (foundId != null) &quot;Found ID: $foundId&quot; else &quot;NOT FOUND&quot;}&quot;)&#10;                                                        foundId&#10;                                                    }&#10;                                                } else {&#10;                                                    Log.d(&quot;SongListItem&quot;, &quot;Using existing YouTube ID: $initialYoutubeId&quot;)&#10;                                                    initialYoutubeId&#10;                                                }&#10;&#10;                                                if (finalYoutubeId != null) {&#10;                                                    Log.d(&quot;SongListItem&quot;, &quot;YouTube ID confirmed: $finalYoutubeId&quot;)&#10;                                                    Log.d(&quot;SongListItem&quot;, &quot;Attempting to get audio URL for video: $finalYoutubeId&quot;)&#10;                                                    DownloadManager.downloadTrack(&#10;                                                        context = context,&#10;                                                        spotifyTrackId = song.spotifyId,&#10;                                                        youtubeVideoId = finalYoutubeId,&#10;                                                        trackName = song.title,&#10;                                                        artists = song.artist,&#10;                                                        onProgress = { progress -&gt;&#10;                                                            Log.d(&quot;SongListItem&quot;, &quot;Download progress: $progress%&quot;)&#10;                                                        },&#10;                                                        onComplete = { success, error -&gt;&#10;                                                            if (success) {&#10;                                                                Log.d(&quot;SongListItem&quot;, &quot;✓ Download completed: ${song.title}&quot;)&#10;                                                            } else {&#10;                                                                Log.e(&quot;SongListItem&quot;, &quot;✗ Download failed: $error&quot;)&#10;                                                            }&#10;                                                        }&#10;                                                    )&#10;                                                } else {&#10;                                                    Log.e(&quot;SongListItem&quot;, &quot;Cannot download: YouTube video not found for query: '${song.title} ${song.artist}'&quot;)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    } else {&#10;                                        Log.e(&quot;SongListItem&quot;, &quot;Cannot download: missing Spotify ID&quot;)&#10;                                    }&#10;                                }&#10;                                .padding(vertical = 4.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Diálogo de selección de playlist&#10;    if (showPlaylistDialog) {&#10;        Dialog(onDismissRequest = {&#10;            showPlaylistDialog = false&#10;            addToPlaylistSuccess = false&#10;            addToPlaylistError = null&#10;        }) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .clip(RoundedCornerShape(24.dp))&#10;                    .background(Color(0xFF181818))&#10;                    .padding(24.dp)&#10;                    .fillMaxWidth(0.9f)&#10;            ) {&#10;                Column(&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Contenido del diálogo&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(300.dp)&#10;                    ) {&#10;                        when {&#10;                            isLoadingPlaylists -&gt; {&#10;                                // Estado de carga&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    CircularProgressIndicator(color = Color(0xFF4ECDC4))&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;loading playlists...&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            addToPlaylistSuccess -&gt; {&#10;                                // Éxito&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✓&quot;,&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#10;                                            color = Color(0xFF4ECDC4)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = &quot;Track added successfully!&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            addToPlaylistError != null -&gt; {&#10;                                // Error&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;✗&quot;,&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        )&#10;                                    )&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#10;                                    Text(&#10;                                        text = addToPlaylistError ?: &quot;Error&quot;,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            color = Color(0xFFFF6B6B)&#10;                                        ),&#10;                                        textAlign = TextAlign.Center&#10;                                    )&#10;                                }&#10;                            }&#10;                            userPlaylists.isEmpty() -&gt; {&#10;                                // Sin playlists&#10;                                Column(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                                    verticalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;No playlists found&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            color = Color(0xFF888888)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            else -&gt; {&#10;                                // Lista de playlists&#10;                                LazyColumn(&#10;                                    modifier = Modifier.fillMaxSize(),&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    items(userPlaylists) { playlist -&gt;&#10;                                        Row(&#10;                                            modifier = Modifier&#10;                                                .fillMaxWidth()&#10;                                                .clip(RoundedCornerShape(8.dp))&#10;                                                .clickable {&#10;                                                    // Añadir la canción a la playlist&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                                                    if (accessToken != null &amp;&amp; song.spotifyId != null) {&#10;                                                        isLoadingPlaylists = true&#10;                                                        SpotifyRepository.addTrackToPlaylist(&#10;                                                            accessToken,&#10;                                                            playlist.id,&#10;                                                            song.spotifyId&#10;                                                        ) { success, error -&gt;&#10;                                                            isLoadingPlaylists = false&#10;                                                            if (success) {&#10;                                                                addToPlaylistSuccess = true&#10;                                                                Log.d(&quot;SongListItem&quot;, &quot;✓ Canción añadida a '${playlist.name}'&quot;)&#10;                                                                // Cerrar el diálogo después de 1.5 segundos&#10;                                                                coroutineScope.launch {&#10;                                                                    kotlinx.coroutines.delay(1500)&#10;                                                                    showPlaylistDialog = false&#10;                                                                    addToPlaylistSuccess = false&#10;                                                                }&#10;                                                            } else {&#10;                                                                addToPlaylistError = error&#10;                                                                Log.e(&quot;SongListItem&quot;, &quot;Error añadiendo canción: $error&quot;)&#10;                                                            }&#10;                                                        }&#10;                                                    }&#10;                                                }&#10;                                                .background(Color(0xFF252525))&#10;                                                .padding(12.dp),&#10;                                            verticalAlignment = Alignment.CenterVertically&#10;                                        ) {&#10;                                            Column(&#10;                                                modifier = Modifier.weight(1f)&#10;                                            ) {&#10;                                                Text(&#10;                                                    text = playlist.name,&#10;                                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                                        color = Color.White&#10;                                                    ),&#10;                                                    maxLines = 1,&#10;                                                    overflow = TextOverflow.Ellipsis&#10;                                                )&#10;                                                playlist.description?.let { desc -&gt;&#10;                                                    if (desc.isNotBlank()) {&#10;                                                        Text(&#10;                                                            text = desc,&#10;                                                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                                                color = Color(0xFF888888)&#10;                                                            ),&#10;                                                            maxLines = 1,&#10;                                                            overflow = TextOverflow.Ellipsis&#10;                                                        )&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                            Text(&#10;                                                text = &quot;&gt;&quot;,&#10;                                                style = MaterialTheme.typography.bodyLarge.copy(&#10;                                                    color = Color(0xFF4ECDC4)&#10;                                                )&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showShareDialog) {&#10;        ShareDialog(&#10;            item = ShareableItem(&#10;                spotifyId = song.spotifyId,&#10;                spotifyUrl = song.spotifyUrl,&#10;                youtubeId = song.youtubeId,&#10;                title = song.title,&#10;                artist = song.artist,&#10;                type = ShareType.TRACK&#10;            ),&#10;            onDismiss = { showShareDialog = false }&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui.components&#13;&#10;&#13;&#10;import android.util.Log&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.text.style.TextAlign&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#13;&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#13;&#10;import androidx.compose.ui.text.style.TextOverflow&#13;&#10;import androidx.compose.ui.window.Dialog&#13;&#10;import androidx.compose.ui.platform.LocalContext&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import com.plyr.database.TrackEntity&#13;&#10;import com.plyr.viewmodel.PlayerViewModel&#13;&#10;import com.plyr.network.SpotifyRepository&#13;&#10;import com.plyr.network.SpotifyPlaylist&#13;&#10;import com.plyr.network.SpotifyTrack&#13;&#10;import com.plyr.ui.PlaylistsScreen&#13;&#10;import com.plyr.utils.Config&#13;&#10;import com.plyr.utils.DownloadManager&#13;&#10;import com.plyr.utils.Translations&#13;&#10;import com.plyr.database.PlaylistDatabase&#13;&#10;import kotlinx.coroutines.CoroutineScope&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import kotlinx.coroutines.withContext&#13;&#10;import kotlinx.coroutines.Dispatchers&#13;&#10;import com.plyr.ui.theme.PlyrSpacing&#13;&#10;import com.plyr.ui.theme.PlyrTextStyles&#13;&#10;&#13;&#10;// Data class para unificar los datos de la canción&#13;&#10;data class Song(&#13;&#10;    val number: Int,&#13;&#10;    val title: String,&#13;&#10;    val artist: String,&#13;&#10;    val spotifyId: String? = null,&#13;&#10;    val youtubeId: String? = null,&#13;&#10;    val spotifyUrl: String? = null&#13;&#10;)&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun SongListItem(&#13;&#10;    song: Song,&#13;&#10;    trackEntities: List&lt;TrackEntity&gt;,&#13;&#10;    index: Int,&#13;&#10;    playerViewModel: PlayerViewModel?,&#13;&#10;    coroutineScope: CoroutineScope,&#13;&#10;    modifier: Modifier = Modifier,&#13;&#10;    isSelected: Boolean = false,&#13;&#10;    onLikedStatusChanged: (() -&gt; Unit)? = null,&#13;&#10;    customButtonIcon: String? = null, // Nueva: Icono personalizado para el botón (ej: &quot;+&quot;)&#13;&#10;    customButtonAction: (() -&gt; Unit)? = null // Nueva: Acción personalizada para el botón&#13;&#10;) {&#13;&#10;    val haptic = LocalHapticFeedback.current&#13;&#10;    val context = LocalContext.current&#13;&#10;    var showPopup by remember { mutableStateOf(false) }&#13;&#10;    var showShareDialog by remember { mutableStateOf(false) }&#13;&#10;    var showPlaylistDialog by remember { mutableStateOf(false) }&#13;&#10;    var userPlaylists by remember { mutableStateOf&lt;List&lt;com.plyr.network.SpotifyPlaylist&gt;&gt;(emptyList()) }&#13;&#10;    var isLoadingPlaylists by remember { mutableStateOf(false) }&#13;&#10;    var addToPlaylistError by remember { mutableStateOf&lt;String?&gt;(null) }&#13;&#10;    var addToPlaylistSuccess by remember { mutableStateOf(false) }&#13;&#10;    var isLoadingTrackInfo by remember { mutableStateOf(false) }&#13;&#10;    var fetchedTrackInfo by remember { mutableStateOf&lt;com.plyr.network.SpotifyTrack?&gt;(null) }&#13;&#10;    var fetchInfoError by remember { mutableStateOf&lt;String?&gt;(null) }&#13;&#10;    var isLiked by remember { mutableStateOf&lt;Boolean?&gt;(null) }&#13;&#10;    var isCheckingLiked by remember { mutableStateOf(false) }&#13;&#10;&#13;&#10;    Row(&#13;&#10;        modifier = modifier&#13;&#10;            .clickable {&#13;&#10;                haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#13;&#10;                playerViewModel?.let { viewModel -&gt;&#13;&#10;                    if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#13;&#10;                        viewModel.setCurrentPlaylist(trackEntities, index)&#13;&#10;                        val selectedTrackEntity = trackEntities[index]&#13;&#10;&#13;&#10;                        Log.d(&quot;SongListItem&quot;, &quot;═══════════════════════════════════&quot;)&#13;&#10;                        Log.d(&quot;SongListItem&quot;, &quot; REPRODUCIR TRACK&quot;)&#13;&#10;                        Log.d(&quot;SongListItem&quot;, &quot;═══════════════════════════════════&quot;)&#13;&#10;                        Log.d(&quot;SongListItem&quot;, &quot;Track: ${selectedTrackEntity.name}&quot;)&#13;&#10;                        Log.d(&quot;SongListItem&quot;, &quot;AudioUrl: ${selectedTrackEntity.audioUrl}&quot;)&#13;&#10;                        Log.d(&quot;SongListItem&quot;, &quot;Es archivo local: ${selectedTrackEntity.audioUrl?.startsWith(&quot;/&quot;) == true}&quot;)&#13;&#10;&#13;&#10;                        coroutineScope.launch {&#13;&#10;                            try {&#13;&#10;                                viewModel.loadAudioFromTrack(selectedTrackEntity)&#13;&#10;                                Log.d(&quot;SongListItem&quot;, &quot;✓ loadAudioFromTrack llamado exitosamente&quot;)&#13;&#10;                            } catch (e: Exception) {&#13;&#10;                                Log.e(&quot;SongListItem&quot;, &quot;✗ Error al reproducir track&quot;, e)&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;            .fillMaxWidth()&#13;&#10;            .height(32.dp),&#13;&#10;        verticalAlignment = Alignment.CenterVertically&#13;&#10;    ) {&#13;&#10;        // Track number&#13;&#10;        Text(&#13;&#10;            text = song.number.toString(),&#13;&#10;            style = PlyrTextStyles.trackArtist(),&#13;&#10;            modifier = Modifier.padding(end = PlyrSpacing.small)&#13;&#10;        )&#13;&#10;        // Song title and artist&#13;&#10;        Column(&#13;&#10;            modifier = Modifier.weight(1f),&#13;&#10;            verticalArrangement = Arrangement.Center&#13;&#10;        ) {&#13;&#10;            Text(&#13;&#10;                text = song.title,&#13;&#10;                style = if (isSelected)&#13;&#10;                    PlyrTextStyles.selectableOption(true)&#13;&#10;                else&#13;&#10;                    PlyrTextStyles.trackTitle(),&#13;&#10;                maxLines = 1,&#13;&#10;                overflow = TextOverflow.Ellipsis&#13;&#10;            )&#13;&#10;            Text(&#13;&#10;                text = song.artist,&#13;&#10;                style = PlyrTextStyles.trackArtist(),&#13;&#10;                maxLines = 1,&#13;&#10;                overflow = TextOverflow.Ellipsis,&#13;&#10;                modifier = Modifier.padding(top = 0.dp)&#13;&#10;            )&#13;&#10;        }&#13;&#10;        // Botón personalizable&#13;&#10;        IconButton(onClick = {&#13;&#10;            if (customButtonAction != null) {&#13;&#10;                customButtonAction()&#13;&#10;            } else {&#13;&#10;                showPopup = true&#13;&#10;            }&#13;&#10;        }, modifier = Modifier.size(32.dp)) {&#13;&#10;            Text(&#13;&#10;                text = customButtonIcon ?: &quot;*&quot;,&#13;&#10;                style = PlyrTextStyles.menuOption(),&#13;&#10;                color = Color(0xFF3FFFEF)&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Solo mostrar popup si no hay acción personalizada&#13;&#10;    if (showPopup &amp;&amp; customButtonAction == null) {&#13;&#10;        // Cargar información de la canción cuando se abre el popup&#13;&#10;        LaunchedEffect(true) {&#13;&#10;            if (showPopup &amp;&amp; song.spotifyId != null) {&#13;&#10;                isLoadingTrackInfo = true&#13;&#10;                isCheckingLiked = true&#13;&#10;                fetchInfoError = null&#13;&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#13;&#10;                if (accessToken != null) {&#13;&#10;                    // Obtener info del track&#13;&#10;                    SpotifyRepository.getTrackInfo(accessToken, song.spotifyId) { trackInfo, error -&gt;&#13;&#10;                        isLoadingTrackInfo = false&#13;&#10;                        if (trackInfo != null) {&#13;&#10;                            fetchedTrackInfo = trackInfo&#13;&#10;                        } else {&#13;&#10;                            fetchInfoError = error ?: &quot;Error fetching track info&quot;&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Verificar si está en Liked Songs&#13;&#10;                    SpotifyRepository.checkSavedTrack(accessToken, song.spotifyId) { liked, error -&gt;&#13;&#10;                        isCheckingLiked = false&#13;&#10;                        if (error == null) {&#13;&#10;                            isLiked = liked&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                } else {&#13;&#10;                    isLoadingTrackInfo = false&#13;&#10;                    isCheckingLiked = false&#13;&#10;                    fetchInfoError = &quot;Token de Spotify no disponible&quot;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        Dialog(onDismissRequest = {&#13;&#10;            showPopup = false&#13;&#10;            fetchedTrackInfo = null&#13;&#10;            fetchInfoError = null&#13;&#10;        }) {&#13;&#10;            Box(&#13;&#10;                modifier = Modifier&#13;&#10;                    .clip(RoundedCornerShape(24.dp))&#13;&#10;                    .background(Color(0xFF181818))&#13;&#10;                    .padding(24.dp)&#13;&#10;                    .fillMaxWidth(0.9f)&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#13;&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                ) {&#13;&#10;                    // Sección de información del track&#13;&#10;                    Box(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .height(150.dp)&#13;&#10;                    ) {&#13;&#10;                        when {&#13;&#10;                            isLoadingTrackInfo -&gt; {&#13;&#10;                                // Estado de carga&#13;&#10;                                Column(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                                    verticalArrangement = Arrangement.Center&#13;&#10;                                ) {&#13;&#10;                                    CircularProgressIndicator(color = Color(0xFF4ECDC4))&#13;&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                                    Text(&#13;&#10;                                        text = Translations.get(context, &quot;loading&quot;),&#13;&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#13;&#10;                                            color = Color(0xFF888888)&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                            fetchInfoError != null -&gt; {&#13;&#10;                                // Error&#13;&#10;                                Column(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                                    verticalArrangement = Arrangement.Center&#13;&#10;                                ) {&#13;&#10;                                    Text(&#13;&#10;                                        text = &quot;✗&quot;,&#13;&#10;                                        style = MaterialTheme.typography.displayMedium.copy(&#13;&#10;                                            color = Color(0xFFFF6B6B)&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                                    Text(&#13;&#10;                                        text = fetchInfoError ?: &quot;Error&quot;,&#13;&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#13;&#10;                                            color = Color(0xFFFF6B6B)&#13;&#10;                                        ),&#13;&#10;                                        textAlign = TextAlign.Center&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                            fetchedTrackInfo != null -&gt; {&#13;&#10;                                // Mostrar información de la canción&#13;&#10;                                val trackInfo = fetchedTrackInfo&#13;&#10;                                LazyColumn(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                                ) {&#13;&#10;                                    item {&#13;&#10;                                        Text(&#13;&#10;                                            text = trackInfo?.name ?: song.title,&#13;&#10;                                            style = MaterialTheme.typography.titleMedium.copy(&#13;&#10;                                                color = Color.White,&#13;&#10;                                                fontWeight = FontWeight.Bold&#13;&#10;                                            )&#13;&#10;                                        )&#13;&#10;                                    }&#13;&#10;                                    item {&#13;&#10;                                        Text(&#13;&#10;                                            text = trackInfo?.artists?.joinToString(&quot;, &quot;) { it.name } ?: song.artist,&#13;&#10;                                            style = MaterialTheme.typography.bodyMedium.copy(&#13;&#10;                                                color = Color(0xFFAAAAAA)&#13;&#10;                                            )&#13;&#10;                                        )&#13;&#10;                                    }&#13;&#10;                                    trackInfo?.album?.let { album -&gt;&#13;&#10;                                        item {&#13;&#10;                                            Spacer(modifier = Modifier.height(4.dp))&#13;&#10;                                            Text(&#13;&#10;                                                text = &quot;Album: ${album.name}&quot;,&#13;&#10;                                                style = MaterialTheme.typography.bodySmall.copy(&#13;&#10;                                                    color = Color(0xFF888888)&#13;&#10;                                                )&#13;&#10;                                            )&#13;&#10;                                        }&#13;&#10;                                        album.releaseDate?.let { date -&gt;&#13;&#10;                                            item {&#13;&#10;                                                Text(&#13;&#10;                                                    text = &quot;Release: $date&quot;,&#13;&#10;                                                    style = MaterialTheme.typography.bodySmall.copy(&#13;&#10;                                                        color = Color(0xFF888888)&#13;&#10;                                                    )&#13;&#10;                                                )&#13;&#10;                                            }&#13;&#10;                                        }&#13;&#10;                                    }&#13;&#10;                                    item {&#13;&#10;                                        Text(&#13;&#10;                                            text = &quot;Duration: ${trackInfo?.durationMs?.let { ms -&gt; &#13;&#10;                                                val minutes = ms / 60000&#13;&#10;                                                val seconds = &quot;%02d&quot;.format((ms % 60000) / 1000)&#13;&#10;                                                &quot;$minutes:$seconds&quot;&#13;&#10;                                            } ?: &quot;N/A&quot;}&quot;,&#13;&#10;                                            style = MaterialTheme.typography.bodySmall.copy(&#13;&#10;                                                color = Color(0xFF888888)&#13;&#10;                                            )&#13;&#10;                                        )&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                            else -&gt; {&#13;&#10;                                // Mostrar info básica mientras carga&#13;&#10;                                Column(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    horizontalAlignment = Alignment.Start,&#13;&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                                ) {&#13;&#10;                                    Text(&#13;&#10;                                        text = song.title,&#13;&#10;                                        style = MaterialTheme.typography.titleMedium.copy(&#13;&#10;                                            color = Color.White,&#13;&#10;                                            fontWeight = FontWeight.Bold&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                    Text(&#13;&#10;                                        text = song.artist,&#13;&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#13;&#10;                                            color = Color(0xFFAAAAAA)&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Botones de acción&#13;&#10;                    Column(&#13;&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp),&#13;&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                    ) {&#13;&#10;                        // Add to Playlist&#13;&#10;                        Text(&#13;&#10;                            text = Translations.get(context, &quot;add_to_playlist&quot;),&#13;&#10;                            color = Color(0xFF3FFFEF),&#13;&#10;                            fontWeight = FontWeight.Normal,&#13;&#10;                            textAlign = TextAlign.Center,&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .clickable {&#13;&#10;                                    if (song.spotifyId != null &amp;&amp; Config.isSpotifyConnected(context)) {&#13;&#10;                                        showPopup = false&#13;&#10;                                        showPlaylistDialog = true&#13;&#10;                                        isLoadingPlaylists = true&#13;&#10;                                        addToPlaylistError = null&#13;&#10;&#13;&#10;                                        val accessToken = Config.getSpotifyAccessToken(context)&#13;&#10;                                        if (accessToken != null) {&#13;&#10;                                            SpotifyRepository.getUserPlaylists(accessToken) { playlists, error -&gt;&#13;&#10;                                                isLoadingPlaylists = false&#13;&#10;                                                if (playlists != null) {&#13;&#10;                                                    userPlaylists = playlists&#13;&#10;                                                } else {&#13;&#10;                                                    addToPlaylistError = error ?: &quot;Error cargando playlists&quot;&#13;&#10;                                                }&#13;&#10;                                            }&#13;&#10;                                        } else {&#13;&#10;                                            isLoadingPlaylists = false&#13;&#10;                                            addToPlaylistError = &quot;Token de Spotify no disponible&quot;&#13;&#10;                                        }&#13;&#10;                                    } else {&#13;&#10;                                        Log.d(&quot;SongListItem&quot;, &quot;No se puede añadir a playlist: sin Spotify ID o no conectado&quot;)&#13;&#10;                                        showPopup = false&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                                .padding(vertical = 4.dp)&#13;&#10;                        )&#13;&#10;&#13;&#10;                        // Add to Queue&#13;&#10;                        Text(&#13;&#10;                            text = Translations.get(context, &quot;add_to_queue&quot;),&#13;&#10;                            color = Color(0xFF3FFFEF),&#13;&#10;                            fontWeight = FontWeight.Normal,&#13;&#10;                            textAlign = TextAlign.Center,&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .clickable {&#13;&#10;                                    showPopup = false&#13;&#10;                                    playerViewModel?.let { viewModel -&gt;&#13;&#10;                                        if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#13;&#10;                                            val trackToAdd = trackEntities[index]&#13;&#10;                                            viewModel.addToQueue(trackToAdd)&#13;&#10;                                            Log.d(&quot;SongListItem&quot;, &quot;✓ Track added to queue: ${trackToAdd.name}&quot;)&#13;&#10;                                        }&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                                .padding(vertical = 4.dp)&#13;&#10;                        )&#13;&#10;&#13;&#10;                        // Share&#13;&#10;                        Text(&#13;&#10;                            text = Translations.get(context, &quot;share&quot;),&#13;&#10;                            color = Color(0xFF3FFFEF),&#13;&#10;                            fontWeight = FontWeight.Normal,&#13;&#10;                            textAlign = TextAlign.Center,&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .clickable {&#13;&#10;                                    showShareDialog = true&#13;&#10;                                    showPopup = false&#13;&#10;                                }&#13;&#10;                                .padding(vertical = 4.dp)&#13;&#10;                        )&#13;&#10;&#13;&#10;                        // Like / Unlike&#13;&#10;                        Text(&#13;&#10;                            text = if (isLiked == true) Translations.get(context, &quot;remove_from_liked_songs&quot;) else Translations.get(context, &quot;add_to_liked_songs&quot;),&#13;&#10;                            color = Color(0xFF3FFFEF),&#13;&#10;                            fontWeight = FontWeight.Normal,&#13;&#10;                            textAlign = TextAlign.Center,&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .clickable {&#13;&#10;                                    // Acción de agregar/quitar de Liked Songs&#13;&#10;                                    showPopup = false&#13;&#10;                                    isLiked?.let { currentlyLiked -&gt;&#13;&#10;                                        val accessToken = Config.getSpotifyAccessToken(context)&#13;&#10;                                        if (accessToken != null &amp;&amp; song.spotifyId != null) {&#13;&#10;                                            isLoadingTrackInfo = true&#13;&#10;                                            if (currentlyLiked) {&#13;&#10;                                                // Quitar de Liked Songs&#13;&#10;                                                SpotifyRepository.removeTrack(accessToken, song.spotifyId) { success, error -&gt;&#13;&#10;                                                    isLoadingTrackInfo = false&#13;&#10;                                                    if (success) {&#13;&#10;                                                        isLiked = false&#13;&#10;                                                        Log.d(&quot;SongListItem&quot;, &quot;✓ Canción quitada de Liked Songs&quot;)&#13;&#10;                                                        onLikedStatusChanged?.invoke()&#13;&#10;                                                    } else {&#13;&#10;                                                        Log.e(&quot;SongListItem&quot;, &quot;Error quitando canción de Liked Songs: $error&quot;)&#13;&#10;                                                    }&#13;&#10;                                                }&#13;&#10;                                            } else {&#13;&#10;                                                // Añadir a Liked Songs&#13;&#10;                                                SpotifyRepository.saveTrack(accessToken, song.spotifyId) { success, error -&gt;&#13;&#10;                                                    isLoadingTrackInfo = false&#13;&#10;                                                    if (success) {&#13;&#10;                                                        isLiked = true&#13;&#10;                                                        Log.d(&quot;SongListItem&quot;, &quot;✓ Canción añadida a Liked Songs&quot;)&#13;&#10;                                                        onLikedStatusChanged?.invoke()&#13;&#10;                                                    } else {&#13;&#10;                                                        Log.e(&quot;SongListItem&quot;, &quot;Error añadiendo canción a Liked Songs: $error&quot;)&#13;&#10;                                                    }&#13;&#10;                                                }&#13;&#10;                                            }&#13;&#10;                                        }&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                                .padding(vertical = 4.dp)&#13;&#10;                        )&#13;&#10;&#13;&#10;                        // Download&#13;&#10;                        Text(&#13;&#10;                            text = Translations.get(context, &quot;download&quot;),&#13;&#10;                            color = Color(0xFF3FFFEF),&#13;&#10;                            fontWeight = FontWeight.Normal,&#13;&#10;                            textAlign = TextAlign.Center,&#13;&#10;                            modifier = Modifier&#13;&#10;                                .fillMaxWidth()&#13;&#10;                                .clickable {&#13;&#10;                                    showPopup = false&#13;&#10;                                    if (song.spotifyId != null) {&#13;&#10;                                        coroutineScope.launch {&#13;&#10;                                            // Verificar si ya está descargada&#13;&#10;                                            val database = PlaylistDatabase.getDatabase(context)&#13;&#10;                                            val alreadyDownloaded = database.downloadedTrackDao()&#13;&#10;                                                .isTrackDownloaded(song.spotifyId) &gt; 0&#13;&#10;&#13;&#10;                                            if (alreadyDownloaded) {&#13;&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;Track already downloaded&quot;)&#13;&#10;                                            } else {&#13;&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;Starting download: ${song.title}&quot;)&#13;&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;Song data - Title: '${song.title}', Artist: '${song.artist}', SpotifyId: '${song.spotifyId}', YoutubeId: '${song.youtubeId}'&quot;)&#13;&#10;&#13;&#10;                                                // Primero intentar obtener el youtubeId del TrackEntity actual&#13;&#10;                                                val trackEntity = if (trackEntities.isNotEmpty() &amp;&amp; index in trackEntities.indices) {&#13;&#10;                                                    trackEntities[index]&#13;&#10;                                                } else null&#13;&#10;&#13;&#10;                                                val initialYoutubeId = trackEntity?.youtubeVideoId ?: song.youtubeId&#13;&#10;                                                Log.d(&quot;SongListItem&quot;, &quot;TrackEntity youtubeVideoId: ${trackEntity?.youtubeVideoId}&quot;)&#13;&#10;&#13;&#10;                                                // Si aún no tenemos youtubeId, buscarlo en YouTube&#13;&#10;                                                val finalYoutubeId = if (initialYoutubeId == null) {&#13;&#10;                                                    withContext(Dispatchers.IO) {&#13;&#10;                                                        val searchQuery = &quot;${song.title} ${song.artist}&quot;&#13;&#10;                                                        Log.d(&quot;SongListItem&quot;, &quot;YouTube ID not available, searching with query: '$searchQuery'&quot;)&#13;&#10;                                                        val foundId = com.plyr.network.YouTubeManager.searchVideoId(searchQuery)&#13;&#10;                                                        Log.d(&quot;SongListItem&quot;, &quot;YouTube search result: ${if (foundId != null) &quot;Found ID: $foundId&quot; else &quot;NOT FOUND&quot;}&quot;)&#13;&#10;                                                        foundId&#13;&#10;                                                    }&#13;&#10;                                                } else {&#13;&#10;                                                    Log.d(&quot;SongListItem&quot;, &quot;Using existing YouTube ID: $initialYoutubeId&quot;)&#13;&#10;                                                    initialYoutubeId&#13;&#10;                                                }&#13;&#10;&#13;&#10;                                                if (finalYoutubeId != null) {&#13;&#10;                                                    Log.d(&quot;SongListItem&quot;, &quot;YouTube ID confirmed: $finalYoutubeId&quot;)&#13;&#10;                                                    Log.d(&quot;SongListItem&quot;, &quot;Attempting to get audio URL for video: $finalYoutubeId&quot;)&#13;&#10;                                                    DownloadManager.downloadTrack(&#13;&#10;                                                        context = context,&#13;&#10;                                                        spotifyTrackId = song.spotifyId,&#13;&#10;                                                        youtubeVideoId = finalYoutubeId,&#13;&#10;                                                        trackName = song.title,&#13;&#10;                                                        artists = song.artist,&#13;&#10;                                                        onProgress = { progress -&gt;&#13;&#10;                                                            Log.d(&quot;SongListItem&quot;, &quot;Download progress: $progress%&quot;)&#13;&#10;                                                        },&#13;&#10;                                                        onComplete = { success, error -&gt;&#13;&#10;                                                            if (success) {&#13;&#10;                                                                Log.d(&quot;SongListItem&quot;, &quot;✓ Download completed: ${song.title}&quot;)&#13;&#10;                                                            } else {&#13;&#10;                                                                Log.e(&quot;SongListItem&quot;, &quot;✗ Download failed: $error&quot;)&#13;&#10;                                                            }&#13;&#10;                                                        }&#13;&#10;                                                    )&#13;&#10;                                                } else {&#13;&#10;                                                    Log.e(&quot;SongListItem&quot;, &quot;Cannot download: YouTube video not found for query: '${song.title} ${song.artist}'&quot;)&#13;&#10;                                                }&#13;&#10;                                            }&#13;&#10;                                        }&#13;&#10;                                    } else {&#13;&#10;                                        Log.e(&quot;SongListItem&quot;, &quot;Cannot download: missing Spotify ID&quot;)&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                                .padding(vertical = 4.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Diálogo de selección de playlist&#13;&#10;    if (showPlaylistDialog) {&#13;&#10;        Dialog(onDismissRequest = {&#13;&#10;            showPlaylistDialog = false&#13;&#10;            addToPlaylistSuccess = false&#13;&#10;            addToPlaylistError = null&#13;&#10;        }) {&#13;&#10;            Box(&#13;&#10;                modifier = Modifier&#13;&#10;                    .clip(RoundedCornerShape(24.dp))&#13;&#10;                    .background(Color(0xFF181818))&#13;&#10;                    .padding(24.dp)&#13;&#10;                    .fillMaxWidth(0.9f)&#13;&#10;            ) {&#13;&#10;                Column(&#13;&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp),&#13;&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                ) {&#13;&#10;                    // Contenido del diálogo&#13;&#10;                    Box(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .height(300.dp)&#13;&#10;                    ) {&#13;&#10;                        when {&#13;&#10;                            isLoadingPlaylists -&gt; {&#13;&#10;                                // Estado de carga&#13;&#10;                                Column(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                                    verticalArrangement = Arrangement.Center&#13;&#10;                                ) {&#13;&#10;                                    CircularProgressIndicator(color = Color(0xFF4ECDC4))&#13;&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                                    Text(&#13;&#10;                                        text = Translations.get(context, &quot;loading_playlists&quot;),&#13;&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#13;&#10;                                            color = Color(0xFF888888)&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                            addToPlaylistSuccess -&gt; {&#13;&#10;                                // Éxito&#13;&#10;                                Column(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                                    verticalArrangement = Arrangement.Center&#13;&#10;                                ) {&#13;&#10;                                    Text(&#13;&#10;                                        text = &quot;✓&quot;,&#13;&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#13;&#10;                                            color = Color(0xFF4ECDC4)&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                                    Text(&#13;&#10;                                        text = Translations.get(context, &quot;track_added_successfully&quot;),&#13;&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#13;&#10;                                            color = Color.White&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                            addToPlaylistError != null -&gt; {&#13;&#10;                                // Error&#13;&#10;                                Column(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                                    verticalArrangement = Arrangement.Center&#13;&#10;                                ) {&#13;&#10;                                    Text(&#13;&#10;                                        text = &quot;✗&quot;,&#13;&#10;                                        style = MaterialTheme.typography.displayLarge.copy(&#13;&#10;                                            color = Color(0xFFFF6B6B)&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                    Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                                    Text(&#13;&#10;                                        text = addToPlaylistError ?: &quot;Error&quot;,&#13;&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#13;&#10;                                            color = Color(0xFFFF6B6B)&#13;&#10;                                        ),&#13;&#10;                                        textAlign = TextAlign.Center&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                            userPlaylists.isEmpty() -&gt; {&#13;&#10;                                // Sin playlists&#13;&#10;                                Column(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                                    verticalArrangement = Arrangement.Center&#13;&#10;                                ) {&#13;&#10;                                    Text(&#13;&#10;                                        text = Translations.get(context, &quot;no_playlists_found&quot;),&#13;&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#13;&#10;                                            color = Color(0xFF888888)&#13;&#10;                                        )&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                            else -&gt; {&#13;&#10;                                // Lista de playlists&#13;&#10;                                LazyColumn(&#13;&#10;                                    modifier = Modifier.fillMaxSize(),&#13;&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                                ) {&#13;&#10;                                    items(userPlaylists) { playlist -&gt;&#13;&#10;                                        Row(&#13;&#10;                                            modifier = Modifier&#13;&#10;                                                .fillMaxWidth()&#13;&#10;                                                .clip(RoundedCornerShape(8.dp))&#13;&#10;                                                .clickable {&#13;&#10;                                                    // Añadir la canción a la playlist&#13;&#10;                                                    val accessToken = Config.getSpotifyAccessToken(context)&#13;&#10;                                                    if (accessToken != null &amp;&amp; song.spotifyId != null) {&#13;&#10;                                                        isLoadingPlaylists = true&#13;&#10;                                                        SpotifyRepository.addTrackToPlaylist(&#13;&#10;                                                            accessToken,&#13;&#10;                                                            playlist.id,&#13;&#10;                                                            song.spotifyId&#13;&#10;                                                        ) { success, error -&gt;&#13;&#10;                                                            isLoadingPlaylists = false&#13;&#10;                                                            if (success) {&#13;&#10;                                                                addToPlaylistSuccess = true&#13;&#10;                                                                Log.d(&quot;SongListItem&quot;, &quot;✓ Canción añadida a '${playlist.name}'&quot;)&#13;&#10;                                                                // Cerrar el diálogo después de 1.5 segundos&#13;&#10;                                                                coroutineScope.launch {&#13;&#10;                                                                    kotlinx.coroutines.delay(1500)&#13;&#10;                                                                    showPlaylistDialog = false&#13;&#10;                                                                    addToPlaylistSuccess = false&#13;&#10;                                                                }&#13;&#10;                                                            } else {&#13;&#10;                                                                addToPlaylistError = error&#13;&#10;                                                                Log.e(&quot;SongListItem&quot;, &quot;Error añadiendo canción: $error&quot;)&#13;&#10;                                                            }&#13;&#10;                                                        }&#13;&#10;                                                    }&#13;&#10;                                                }&#13;&#10;                                                .background(Color(0xFF252525))&#13;&#10;                                                .padding(12.dp),&#13;&#10;                                            verticalAlignment = Alignment.CenterVertically&#13;&#10;                                        ) {&#13;&#10;                                            Column(&#13;&#10;                                                modifier = Modifier.weight(1f)&#13;&#10;                                            ) {&#13;&#10;                                                Text(&#13;&#10;                                                    text = playlist.name,&#13;&#10;                                                    style = MaterialTheme.typography.bodyMedium.copy(&#13;&#10;                                                        color = Color.White&#13;&#10;                                                    ),&#13;&#10;                                                    maxLines = 1,&#13;&#10;                                                    overflow = TextOverflow.Ellipsis&#13;&#10;                                                )&#13;&#10;                                                playlist.description?.let { desc -&gt;&#13;&#10;                                                    if (desc.isNotBlank()) {&#13;&#10;                                                        Text(&#13;&#10;                                                            text = desc,&#13;&#10;                                                            style = MaterialTheme.typography.bodySmall.copy(&#13;&#10;                                                                color = Color(0xFF888888)&#13;&#10;                                                            ),&#13;&#10;                                                            maxLines = 1,&#13;&#10;                                                            overflow = TextOverflow.Ellipsis&#13;&#10;                                                        )&#13;&#10;                                                    }&#13;&#10;                                                }&#13;&#10;                                            }&#13;&#10;                                            Text(&#13;&#10;                                                text = &quot;&gt;&quot;,&#13;&#10;                                                style = MaterialTheme.typography.bodyLarge.copy(&#13;&#10;                                                    color = Color(0xFF4ECDC4)&#13;&#10;                                                )&#13;&#10;                                            )&#13;&#10;                                        }&#13;&#10;                                    }&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    if (showShareDialog) {&#13;&#10;        ShareDialog(&#13;&#10;            item = ShareableItem(&#13;&#10;                spotifyId = song.spotifyId,&#13;&#10;                spotifyUrl = song.spotifyUrl,&#13;&#10;                youtubeId = song.youtubeId,&#13;&#10;                title = song.title,&#13;&#10;                artist = song.artist,&#13;&#10;                type = ShareType.TRACK&#13;&#10;            ),&#13;&#10;            onDismiss = { showShareDialog = false }&#13;&#10;        )&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.navigation&#10;&#10;import androidx.compose.runtime.Stable&#10;&#10;// Estados para navegación&#10;enum class Screen {&#10;    HOME,&#10;    SEARCH,&#10;    QUEUE,&#10;    CONFIG,&#10;    PLAYLISTS&#10;}&#10;&#10;@Stable&#10;data class MenuOption(val screen: Screen, val title: String)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.ui.navigation.MenuOption&#10;import com.plyr.ui.navigation.Screen&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    context: Context,&#10;    onNavigateToScreen: (Screen) -&gt; Unit&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var backPressedTime by remember { mutableStateOf(0L) }&#10;    var showExitMessage by remember { mutableStateOf(false) }&#10;    &#10;    // Handle double back press to exit&#10;    BackHandler {&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - backPressedTime &gt; 2000) {&#10;            backPressedTime = currentTime&#10;            showExitMessage = true&#10;            // Hide message after 2 seconds&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(2000)&#10;                showExitMessage = false&#10;            }&#10;        } else {&#10;            // Exit app&#10;            (context as? Activity)?.finish()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Terminal-style header&#10;        Text(&#10;            text = &quot;$ plyr_home&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Lista de opciones disponibles&#10;        val options = remember {&#10;            listOf(&#10;                MenuOption(Screen.SEARCH, &quot;&gt; search&quot;),&#10;                MenuOption(Screen.PLAYLISTS, &quot;&gt; playlists&quot;),&#10;                MenuOption(Screen.QUEUE, &quot;&gt; queue&quot;),&#10;                MenuOption(Screen.CONFIG, &quot;&gt; settings&quot;)&#10;            )&#10;        }&#10;        &#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                Text(&#10;                    text = option.title,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 20.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable {&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                            onNavigateToScreen(option.screen)&#10;                        }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Exit message&#10;        if (showExitMessage) {&#10;            Text(&#10;                text = &quot;&gt; Press back again to exit&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(top = 8.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun QueueScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_queue&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Queue content&#10;        if (playerViewModel != null) {&#10;            val queueState by playerViewModel.queueState.collectAsStateWithLifecycle()&#10;            val currentQueue = queueState.queue&#10;            &#10;            if (currentQueue.isNotEmpty()) {&#10;                // Queue header&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Current queue [${currentQueue.size}]&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFFFFD93D)&#10;                        )&#10;                    )&#10;                    &#10;                    // Clear queue button&#10;                    TextButton(&#10;                        onClick = { &#10;                            playerViewModel.clearQueue()&#10;                            Log.d(&quot;QueueScreen&quot;, &quot;Queue cleared by user&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;clear&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(Modifier.height(16.dp))&#10;                &#10;                // Queue track list&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(&#10;                        count = currentQueue.size,&#10;                        key = { index -&gt; currentQueue[index].id }&#10;                    ) { index -&gt;&#10;                        val track = currentQueue[index]&#10;                        val isCurrentTrack = queueState.currentIndex == index&#10;                        &#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp, horizontal = 4.dp)&#10;                                .clickable {&#10;                                    coroutineScope.launch {&#10;                                        if (queueState.currentIndex != index) {&#10;                                            playerViewModel.playQueueFromIndex(index)&#10;                                        } else {&#10;                                            playerViewModel.resumeIfPaused()&#10;                                        }&#10;                                    }&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Starting queue from index: $index&quot;)&#10;                                },&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Position and status indicator&#10;                            Text(&#10;                                text = if (isCurrentTrack) &quot;♪ &quot; else &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            // Track name&#10;                            MarqueeText(&#10;                                text = track.name,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFFE0E0E0) else Color(0xFFBDC3C7)&#10;                                ),&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            &#10;                            // Remove from queue button&#10;                            TextButton(&#10;                                onClick = { &#10;                                    playerViewModel.removeFromQueue(index)&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Removed track from queue at index: $index&quot;)&#10;                                }&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;×&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Empty queue message&#10;                Text(&#10;                    text = &quot;Queue is empty&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(32.dp)&#10;                )&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Player not available&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;&#10;/**&#10; * Extensiones para integrar PlayerViewModel con notificaciones de música&#10; * &#10; * Estas extensiones facilitan el uso del sistema de notificaciones&#10; * sin modificar directamente el PlayerViewModel existente.&#10; */&#10;&#10;/**&#10; * Inicializa el manager de notificaciones&#10; */&#10;fun PlayerViewModel.initializeNotifications(context: Context): MusicNotificationManager {&#10;    return MusicNotificationManager(context).apply {&#10;        startService()&#10;    }&#10;}&#10;&#10;/**&#10; * Reproduce un track con notificación&#10; */&#10;fun PlayerViewModel.playWithNotification(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity,&#10;    onAudioUrlReady: (String) -&gt; Unit&#10;) {&#10;    // Actualizar la información del track en la notificación&#10;    notificationManager.updateSongInfo(track)&#10;    &#10;    // Tu lógica existente de reproducción aquí&#10;    // Cuando tengas la URL de audio, llamar:&#10;    // onAudioUrlReady(audioUrl)&#10;}&#10;&#10;/**&#10; * Actualiza la notificación cuando cambia el track&#10; */&#10;fun PlayerViewModel.updateNotificationTrack(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity?&#10;) {&#10;    track?.let {&#10;        notificationManager.updateSongInfo(it.name, it.artists)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/Translations.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/Translations.kt" />
              <option name="originalContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;&#10;/**&#10; * Sistema de traducciones para la aplicación plyr&#10; * Maneja las traducciones para Español, English y Català&#10; */&#10;object Translations {&#10;&#10;    // Mapa de traducciones por idioma&#10;    private val translations = mapOf(&#10;        // ESPAÑOL&#10;        &quot;español&quot; to mapOf(&#10;            // Config Screen&#10;            &quot;config_title&quot; to &quot;plyr_ajustes&quot;,&#10;            &quot;theme&quot; to &quot;&gt; tema&quot;,&#10;            &quot;theme_dark&quot; to &quot;oscuro&quot;,&#10;            &quot;theme_light&quot; to &quot;claro&quot;,&#10;            &quot;search_engine&quot; to &quot;&gt; motor_de_búsqueda&quot;,&#10;            &quot;search_spotify&quot; to &quot;spotify&quot;,&#10;            &quot;search_youtube&quot; to &quot;youtube&quot;,&#10;            &quot;audio_quality&quot; to &quot;&gt; calidad_de_audio&quot;,&#10;            &quot;quality_low&quot; to &quot;baja&quot;,&#10;            &quot;quality_med&quot; to &quot;media&quot;,&#10;            &quot;quality_high&quot; to &quot;alta&quot;,&#10;            &quot;language&quot; to &quot;&gt; idioma&quot;,&#10;            &quot;lang_spanish&quot; to &quot;es&quot;,&#10;            &quot;lang_english&quot; to &quot;en&quot;,&#10;            &quot;lang_catalan&quot; to &quot;ca&quot;,&#10;            &quot;lang_japanese&quot; to &quot;ja&quot;,&#10;            &quot;info&quot; to &quot;&gt; información&quot;,&#10;            &quot;info_text&quot; to &quot;    ● ¡no piratees música!\n    ● cambia el motor con yt: / sp:&quot;,&#10;            &quot;sptfy_status&quot; to &quot;&gt; estado_sptfy&quot;,&#10;            &quot;client&quot; to &quot;    ● cliente:&quot;,&#10;            &quot;api&quot; to &quot;    ● api:&quot;,&#10;            &quot;connected&quot; to &quot;conectado&quot;,&#10;            &quot;disconnected&quot; to &quot;desconectado&quot;,&#10;            &quot;configured&quot; to &quot;configurado&quot;,&#10;            &quot;not_configured&quot; to &quot;no configurado&quot;,&#10;            &quot;credentials_required&quot; to &quot;se requieren credenciales&quot;,&#10;            &quot;configure_credentials_first&quot; to &quot;configura las credenciales primero&quot;,&#10;            &quot;opening_browser&quot; to &quot;abriendo navegador...&quot;,&#10;            &quot;check_browser&quot; to &quot;revisa el navegador&quot;,&#10;            &quot;error_starting_oauth&quot; to &quot;error al iniciar oauth&quot;,&#10;            &quot;client_id&quot; to &quot;      id del client:&quot;,&#10;            &quot;client_secret&quot; to &quot;      secreto del client:&quot;,&#10;            &quot;enter_client_id&quot; to &quot;introduce tu id del cliente de spotify&quot;,&#10;            &quot;enter_client_secret&quot; to &quot;introduce tu secreto del cliente de spotify &quot;,&#10;            &quot;how_to_get_credentials&quot; to &quot;      &gt; cómo obtener credenciales de la api de spotify:&quot;,&#10;            &quot;instruction_1&quot; to &quot;1. ve a https://developer.spotify.com/dashboard&quot;,&#10;            &quot;instruction_2&quot; to &quot;2. inicia sesión con tu cuenta de spotify&quot;,&#10;            &quot;instruction_3&quot; to &quot;3. selecciona 'crear aplicación'&quot;,&#10;            &quot;instruction_4&quot; to &quot;4. rellena el nombre (por ejemplo, 'plyr mobile')&quot;,&#10;            &quot;instruction_5&quot; to &quot;5. establece el redirect uri: 'plyr://spotify/callback'&quot;,&#10;            &quot;instruction_6&quot; to &quot;6. selecciona 'mobile' y 'web  pi'&quot;,&#10;            &quot;instruction_7&quot; to &quot;7. haz clic en 'guardar'&quot;,&#10;            &quot;instruction_8&quot; to &quot;8. copia el client_id y el client_secret&quot;,&#10;            &quot;instruction_9&quot; to &quot;9. pegalos en los campos de arriba&quot;,&#10;            &quot;note_local_storage&quot; to &quot;      nota: estas credenciales se guardan localmente&quot;,&#10;&#10;            // Main Screen&#10;            &quot;plyr_title&quot; to &quot;$ plyr&quot;, //QUITAR EL TITLE GENERAL&#10;            &quot;search_hint&quot; to &quot;search...&quot;,&#10;            &quot;no_results&quot; to &quot;no results found&quot;,&#10;            &quot;loading&quot; to &quot;loading...&quot;,&#10;&#10;            // Home Screen&#10;            &quot;home_search&quot; to &quot;buscar&quot;,&#10;            &quot;home_playlists&quot; to &quot;listas&quot;,&#10;            &quot;home_queue&quot; to &quot;cola&quot;,&#10;            &quot;home_local&quot; to &quot;local&quot;,&#10;            &quot;home_settings&quot; to &quot;ajustes&quot;,&#10;            &quot;exit_message&quot; to &quot;Presiona de nuevo para salir&quot;,&#10;&#10;            // Search Screen&#10;            &quot;search_title&quot; to &quot;plyr_buscar&quot;,&#10;            &quot;search_placeholder&quot; to &quot;buscar música...&quot;,&#10;            &quot;search_loading&quot; to &quot;cargando...&quot;,&#10;            &quot;search_no_results&quot; to &quot;no se encontraron resultados&quot;,&#10;            &quot;search_error&quot; to &quot;error&quot;,&#10;            &quot;search_spotify_not_connected&quot; to &quot;Spotify no está conectado&quot;,&#10;            &quot;search_token_not_available&quot; to &quot;Token de Spotify no disponible&quot;,&#10;            &quot;search_engine_not_recognized&quot; to &quot;Motor de búsqueda no reconocido&quot;,&#10;            &quot;search_error_loading_tracks&quot; to &quot;Error cargando canciones&quot;,&#10;            &quot;search_loading_tracks&quot; to &quot;cargando canciones...&quot;,&#10;            &quot;search_tracks&quot; to &quot;canciones&quot;,&#10;            &quot;search_albums&quot; to &quot;álbumes&quot;,&#10;            &quot;search_artists&quot; to &quot;artistas&quot;,&#10;            &quot;search_playlists&quot; to &quot;listas&quot;,&#10;            &quot;search_videos&quot; to &quot;videos&quot;,&#10;            &quot;search_youtube_playlists&quot; to &quot;listas youtube&quot;,&#10;            &quot;search_start&quot; to &quot;iniciar&quot;,&#10;            &quot;search_random&quot; to &quot;aleatorio&quot;,&#10;            &quot;search_save&quot; to &quot;guardar&quot;,&#10;            &quot;search_share&quot; to &quot;compartir&quot;,&#10;            &quot;search_saved&quot; to &quot;guardado&quot;,&#10;            &quot;search_error_saving&quot; to &quot;error al guardar&quot;,&#10;            &quot;search_followers&quot; to &quot;seguidores&quot;,&#10;            &quot;search_monthly_listeners&quot; to &quot;oyentes mensuales&quot;,&#10;            &quot;search_scan_qr&quot; to &quot;qr&quot;,&#10;            &quot;playlist_cover&quot; to &quot;Portada de la playlist&quot;,&#10;            &quot;artist_image&quot; to &quot;Imagen del artista&quot;,&#10;            &quot;search_query_empty_after_prefix&quot; to &quot;Querry vacía después del prefijo&quot;,&#10;            &quot;album_cover&quot; to &quot;Portada del album&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;resultados de youtube&quot;,&#10;            &quot;search_load_more&quot; to &quot;cargar más&quot;,&#10;&#10;            // Search Screen - Additional translations&#10;            &quot;search_select_playlist&quot; to &quot;Seleccionar playlist&quot;,&#10;            &quot;search_cancel&quot; to &quot;Cancelar&quot;,&#10;            &quot;search_removing&quot; to &quot;eliminando...&quot;,&#10;            &quot;search_removed&quot; to &quot;¡eliminado!&quot;,&#10;            &quot;search_saving_status&quot; to &quot;guardando...&quot;,&#10;            &quot;search_error_no_token&quot; to &quot;error: no hay token&quot;,&#10;            &quot;search_unsave&quot; to &quot;desguardar&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;resultados youtube&quot;,&#10;            &quot;search_load_more&quot; to &quot;cargar más&quot;,&#10;            &quot;search_error_getting_track&quot; to &quot;Error obteniendo track&quot;,&#10;            &quot;search_error_getting_playlist&quot; to &quot;Error obteniendo playlist&quot;,&#10;            &quot;search_error_getting_album&quot; to &quot;Error obteniendo álbum&quot;,&#10;            &quot;search_error_getting_artist&quot; to &quot;Error obteniendo artista&quot;,&#10;            &quot;search_error_processing_qr&quot; to &quot;Error procesando QR&quot;,&#10;            &quot;search_adding_to_playlist&quot; to &quot;añadiendo canción a la playlist&quot;,&#10;&#10;            // Player&#10;            &quot;now_playing&quot; to &quot;now playing&quot;,&#10;            &quot;play&quot; to &quot;play&quot;,&#10;            &quot;pause&quot; to &quot;pause&quot;,&#10;            &quot;next&quot; to &quot;siguiente&quot;,&#10;            &quot;previous&quot; to &quot;anterior&quot;,&#10;            &quot;repeat&quot; to &quot;repetir&quot;,&#10;            &quot;shuffle&quot; to &quot;mezclar&quot;,&#10;&#10;            // Playlist / Form labels&#10;            &quot;playlist_name&quot; to &quot;Nombre de la playlist&quot;,&#10;            &quot;description&quot; to &quot;Descripción&quot;,&#10;            &quot;description_optional&quot; to &quot;Descripción (opcional)&quot;,&#10;            &quot;search_tracks_label&quot; to &quot;Buscar canciones&quot;,&#10;            &quot;create_playlist&quot; to &quot;Crear playlist&quot;,&#10;            &quot;playlist_name_placeholder&quot; to &quot;Nombre de la playlist&quot;,&#10;&#10;            // Local Screen&#10;            &quot;plyr_local&quot; to &quot;plyr_local&quot;,&#10;            &quot;unknown error&quot; to &quot;error desconocido&quot;,&#10;            &quot;No tracks downloaded&quot; to &quot;Ninguna canción descargada&quot;,&#10;            &quot;delete track&quot; to &quot;eliminar canción&quot;,&#10;            &quot;Song {{track_name}} will be removed permanently&quot; to &quot;La canción {{track_name}} será eliminada permanentemente&quot;,&#10;            &quot;delete&quot; to &quot;eliminar&quot;,&#10;            &quot;cancel&quot; to &quot;cancelar&quot;,&#10;&#10;            // Queue Screen&#10;            &quot;plyr_queue&quot; to &quot;plyr_cola&quot;,&#10;            &quot;No tracks loaded&quot; to &quot;Ninguna lista cargada&quot;,&#10;            &quot;Play a track to start a playlist&quot; to &quot;Reproduce una canción para iniciar una lista&quot;,&#10;            &quot;player_not_available&quot; to &quot;reproductor_no_disponible&quot;,&#10;&#10;            //Playlists Screen&#10;            &quot;plyr_lists&quot; to &quot;plyr_listas&quot;,&#10;            &quot;&lt;syncing...&gt;&quot; to &quot;&lt;sincronizando...&gt;&quot;,&#10;            &quot;&lt;sync&gt;&quot; to &quot;&lt;sincronizar&gt;&quot;,&#10;            &quot;&lt;new&gt;&quot; to &quot;&lt;crear&gt;&quot;,&#10;            &quot;Spotify not connected&quot; to &quot;Spotify no conectado&quot;,&#10;            &quot;Loading tracks...&quot; to &quot;Cargando canciones...&quot;,&#10;&#10;            // ADDITIONAL KEYS (SPANISH)&#10;            &quot;connected_successfully&quot; to &quot;conectado correctamente&quot;,&#10;            &quot;token_exchange_failed&quot; to &quot;intercambio de token fallido&quot;,&#10;            &quot;cancelled_by_user&quot; to &quot;cancelado por el usuario&quot;,&#10;            &quot;error_obtaining_audio&quot; to &quot;No se pudo obtener audio&quot;,&#10;            &quot;error_prefix&quot; to &quot;Error: &quot;,&#10;&#10;            // Playlist actions and dialogs&#10;            &quot;btn_start&quot; to &quot;&lt;start&gt;&quot;,&#10;            &quot;btn_stop&quot; to &quot;&lt;stop&gt;&quot;,&#10;            &quot;btn_rand&quot; to &quot;&lt;rand&gt;&quot;,&#10;            &quot;btn_share&quot; to &quot;&lt;share&gt;&quot;,&#10;            &quot;btn_save&quot; to &quot;&lt;save&gt;&quot;,&#10;            &quot;btn_edit&quot; to &quot;&lt;edit&gt;&quot;,&#10;            &quot;btn_delete&quot; to &quot;&lt;delete&gt;&quot;,&#10;            &quot;creating&quot; to &quot;&lt;creating...&gt;&quot;,&#10;            &quot;create&quot; to &quot;&lt;create&gt;&quot;,&#10;            &quot;delete_playlist_title&quot; to &quot;Eliminar playlist&quot;,&#10;            &quot;delete_playlist_confirm&quot; to &quot;¿Seguro que quieres eliminar '%s'? Esta acción no se puede deshacer.&quot;,&#10;            &quot;unsaved_changes_title&quot; to &quot;Cambios sin guardar&quot;,&#10;            &quot;unsaved_changes_text&quot; to &quot;Tienes cambios sin guardar. ¿Seguro que quieres salir?&quot;,&#10;            &quot;exit_label&quot; to &quot;Salir&quot;,&#10;            &quot;cancel_label&quot; to &quot;Cancelar&quot;,&#10;            &quot;delete_label&quot; to &quot;Eliminar&quot;,&#10;&#10;        ),&#10;&#10;        // ENGLISH&#10;        &quot;english&quot; to mapOf(&#10;            // Config Screen&#10;            &quot;config_title&quot; to &quot;plyr_config&quot;,&#10;            &quot;theme&quot; to &quot;&gt; theme&quot;,&#10;            &quot;theme_dark&quot; to &quot;dark&quot;,&#10;            &quot;theme_light&quot; to &quot;light&quot;,&#10;            &quot;search_engine&quot; to &quot;&gt; search_engine&quot;,&#10;            &quot;search_spotify&quot; to &quot;spotify&quot;,&#10;            &quot;search_youtube&quot; to &quot;youtube&quot;,&#10;            &quot;audio_quality&quot; to &quot;&gt; audio_quality&quot;,&#10;            &quot;quality_low&quot; to &quot;low&quot;,&#10;            &quot;quality_med&quot; to &quot;med&quot;,&#10;            &quot;quality_high&quot; to &quot;high&quot;,&#10;            &quot;language&quot; to &quot;&gt; language&quot;,&#10;            &quot;lang_spanish&quot; to &quot;es&quot;,&#10;            &quot;lang_english&quot; to &quot;en&quot;,&#10;            &quot;lang_catalan&quot; to &quot;ca&quot;,&#10;            &quot;lang_japanese&quot; to &quot;ja&quot;,&#10;            &quot;info&quot; to &quot;&gt; info&quot;,&#10;            &quot;info_text&quot; to &quot;    ● don't pirate music!\n    ● Change engine with yt: / sp:&quot;,&#10;            &quot;sptfy_status&quot; to &quot;&gt; sptfy_status&quot;,&#10;            &quot;client&quot; to &quot;    ● client:&quot;,&#10;            &quot;api&quot; to &quot;    ● api:&quot;,&#10;            &quot;connected&quot; to &quot;connected&quot;,&#10;            &quot;disconnected&quot; to &quot;disconnected&quot;,&#10;            &quot;configured&quot; to &quot;configured&quot;,&#10;            &quot;not_configured&quot; to &quot;not_configured&quot;,&#10;            &quot;credentials_required&quot; to &quot;credentials required&quot;,&#10;            &quot;configure_credentials_first&quot; to &quot;configure credentials first&quot;,&#10;            &quot;opening_browser&quot; to &quot;opening_browser...&quot;,&#10;            &quot;check_browser&quot; to &quot;check_browser&quot;,&#10;            &quot;error_starting_oauth&quot; to &quot;error_starting_oauth&quot;,&#10;            &quot;client_id&quot; to &quot;      client_id:&quot;,&#10;            &quot;client_secret&quot; to &quot;      client_secret:&quot;,&#10;            &quot;enter_client_id&quot; to &quot;enter your spotify client id&quot;,&#10;            &quot;enter_client_secret&quot; to &quot;enter your spotify client secret&quot;,&#10;            &quot;how_to_get_credentials&quot; to &quot;      &gt; how to get spotify api credentials:&quot;,&#10;            &quot;instruction_1&quot; to &quot;1. go to https://developer.spotify.com/dashboard&quot;,&#10;            &quot;instruction_2&quot; to &quot;2. log in with your spotify account&quot;,&#10;            &quot;instruction_3&quot; to &quot;3. click 'create app'&quot;,&#10;            &quot;instruction_4&quot; to &quot;4. fill app name (e.g., 'plyr mobile')&quot;,&#10;            &quot;instruction_5&quot; to &quot;5. set redirect uri: 'plyr://spotify/callback'&quot;,&#10;            &quot;instruction_6&quot; to &quot;6. select 'mobile' and 'web api'&quot;,&#10;            &quot;instruction_7&quot; to &quot;7. click 'save'&quot;,&#10;            &quot;instruction_8&quot; to &quot;8. copy client id and client secret&quot;,&#10;            &quot;instruction_9&quot; to &quot;9. paste them in the fields above&quot;,&#10;            &quot;note_local_storage&quot; to &quot;      note: these credentials are stored locally&quot;,&#10;&#10;            // Main Screen&#10;            &quot;plyr_title&quot; to &quot;$ plyr&quot;,&#10;            &quot;search_hint&quot; to &quot;search...&quot;,&#10;            &quot;no_results&quot; to &quot;no results found&quot;,&#10;            &quot;loading&quot; to &quot;loading...&quot;,&#10;&#10;            // Home Screen&#10;            &quot;home_search&quot; to &quot;search&quot;,&#10;            &quot;home_playlists&quot; to &quot;playlists&quot;,&#10;            &quot;home_queue&quot; to &quot;queue&quot;,&#10;            &quot;home_local&quot; to &quot;local&quot;,&#10;            &quot;home_settings&quot; to &quot;settings&quot;,&#10;            &quot;exit_message&quot; to &quot;Press back again to exit&quot;,&#10;&#10;            // Search Screen&#10;            &quot;search_title&quot; to &quot;plyr_search&quot;,&#10;            &quot;search_placeholder&quot; to &quot;search music...&quot;,&#10;            &quot;search_loading&quot; to &quot;loading...&quot;,&#10;            &quot;search_no_results&quot; to &quot;no results found&quot;,&#10;            &quot;search_error&quot; to &quot;error&quot;,&#10;            &quot;search_spotify_not_connected&quot; to &quot;Spotify is not connected&quot;,&#10;            &quot;search_token_not_available&quot; to &quot;Spotify token not available&quot;,&#10;            &quot;search_engine_not_recognized&quot; to &quot;Search engine not recognized&quot;,&#10;            &quot;search_error_loading_tracks&quot; to &quot;Error loading tracks&quot;,&#10;            &quot;search_loading_tracks&quot; to &quot;loading tracks...&quot;,&#10;            &quot;search_tracks&quot; to &quot;tracks&quot;,&#10;            &quot;search_albums&quot; to &quot;albums&quot;,&#10;            &quot;search_artists&quot; to &quot;artists&quot;,&#10;            &quot;search_playlists&quot; to &quot;playlists&quot;,&#10;            &quot;search_videos&quot; to &quot;videos&quot;,&#10;            &quot;search_youtube_playlists&quot; to &quot;youtube playlists&quot;,&#10;            &quot;search_start&quot; to &quot;start&quot;,&#10;            &quot;search_random&quot; to &quot;random&quot;,&#10;            &quot;search_save&quot; to &quot;save&quot;,&#10;            &quot;search_share&quot; to &quot;share&quot;,&#10;            &quot;search_saved&quot; to &quot;saved&quot;,&#10;            &quot;search_error_saving&quot; to &quot;error saving&quot;,&#10;            &quot;search_followers&quot; to &quot;followers&quot;,&#10;            &quot;search_monthly_listeners&quot; to &quot;monthly listeners&quot;,&#10;            &quot;search_scan_qr&quot; to &quot;qr&quot;,&#10;            &quot;playlist_cover&quot; to &quot;Playlist cover&quot;,&#10;            &quot;artist_image&quot; to &quot;Artist image&quot;,&#10;            &quot;search_query_empty_after_prefix&quot; to &quot;Query empty after prefix&quot;,&#10;            &quot;album_cover&quot; to &quot;Album cover&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;youtube results&quot;,&#10;            &quot;search_load_more&quot; to &quot;load more&quot;,&#10;&#10;            // Search Screen - Additional translations&#10;            &quot;search_select_playlist&quot; to &quot;Select playlist&quot;,&#10;            &quot;search_cancel&quot; to &quot;Cancel&quot;,&#10;            &quot;search_removing&quot; to &quot;removing...&quot;,&#10;            &quot;search_removed&quot; to &quot;removed!&quot;,&#10;            &quot;search_saving_status&quot; to &quot;saving...&quot;,&#10;            &quot;search_error_no_token&quot; to &quot;error: no token&quot;,&#10;            &quot;search_unsave&quot; to &quot;unsave&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;youtube results&quot;,&#10;            &quot;search_load_more&quot; to &quot;load more&quot;,&#10;            &quot;search_error_getting_track&quot; to &quot;Error getting track&quot;,&#10;            &quot;search_error_getting_playlist&quot; to &quot;Error getting playlist&quot;,&#10;            &quot;search_error_getting_album&quot; to &quot;Error getting album&quot;,&#10;            &quot;search_error_getting_artist&quot; to &quot;Error getting artist&quot;,&#10;            &quot;search_error_processing_qr&quot; to &quot;Error processing QR&quot;,&#10;            &quot;search_adding_to_playlist&quot; to &quot;adding song to playlist&quot;,&#10;&#10;            // Player&#10;            &quot;now_playing&quot; to &quot;now playing&quot;,&#10;            &quot;play&quot; to &quot;play&quot;,&#10;            &quot;pause&quot; to &quot;pause&quot;,&#10;            &quot;next&quot; to &quot;next&quot;,&#10;            &quot;previous&quot; to &quot;previous&quot;,&#10;            &quot;repeat&quot; to &quot;repeat&quot;,&#10;            &quot;shuffle&quot; to &quot;shuffle&quot;,&#10;&#10;            // ADDITIONAL KEYS (ENGLISH)&#10;            &quot;connected_successfully&quot; to &quot;Connected successfully&quot;,&#10;            &quot;token_exchange_failed&quot; to &quot;Token exchange failed&quot;,&#10;            &quot;cancelled_by_user&quot; to &quot;Cancelled by user&quot;,&#10;            &quot;error_obtaining_audio&quot; to &quot;Could not obtain audio&quot;,&#10;            &quot;error_prefix&quot; to &quot;Error: &quot;,&#10;&#10;            // Playlist actions and dialogs&#10;            &quot;btn_start&quot; to &quot;&lt;start&gt;&quot;,&#10;            &quot;btn_stop&quot; to &quot;&lt;stop&gt;&quot;,&#10;            &quot;btn_rand&quot; to &quot;&lt;rand&gt;&quot;,&#10;            &quot;btn_share&quot; to &quot;&lt;share&gt;&quot;,&#10;            &quot;btn_save&quot; to &quot;&lt;save&gt;&quot;,&#10;            &quot;btn_edit&quot; to &quot;&lt;edit&gt;&quot;,&#10;            &quot;btn_delete&quot; to &quot;&lt;delete&gt;&quot;,&#10;            &quot;creating&quot; to &quot;&lt;creating...&gt;&quot;,&#10;            &quot;create&quot; to &quot;&lt;create&gt;&quot;,&#10;            &quot;delete_playlist_title&quot; to &quot;Delete playlist&quot;,&#10;            &quot;delete_playlist_confirm&quot; to &quot;Are you sure you want to delete '%s'? This action cannot be undone.&quot;,&#10;            &quot;unsaved_changes_title&quot; to &quot;Unsaved changes&quot;,&#10;            &quot;unsaved_changes_text&quot; to &quot;You have unsaved changes. Are you sure you want to exit?&quot;,&#10;            &quot;exit_label&quot; to &quot;Exit&quot;,&#10;            &quot;cancel_label&quot; to &quot;Cancel&quot;,&#10;            &quot;delete_label&quot; to &quot;Delete&quot;,&#10;&#10;        ),&#10;&#10;        // CATALÀ&#10;        &quot;català&quot; to mapOf(&#10;            // Config Screen&#10;            &quot;config_title&quot; to &quot;plyr_configuració&quot;,&#10;            &quot;theme&quot; to &quot;&gt; tema&quot;,&#10;            &quot;theme_dark&quot; to &quot;fosc&quot;,&#10;            &quot;theme_light&quot; to &quot;clar&quot;,&#10;            &quot;search_engine&quot; to &quot;&gt; motor_cerca&quot;,&#10;            &quot;search_spotify&quot; to &quot;spotify&quot;,&#10;            &quot;search_youtube&quot; to &quot;youtube&quot;,&#10;            &quot;audio_quality&quot; to &quot;&gt; qualitat_audio&quot;,&#10;            &quot;quality_low&quot; to &quot;baixa&quot;,&#10;            &quot;quality_med&quot; to &quot;mitjana&quot;,&#10;            &quot;quality_high&quot; to &quot;alta&quot;,&#10;            &quot;language&quot; to &quot;&gt; idioma&quot;,&#10;            &quot;lang_spanish&quot; to &quot;es&quot;,&#10;            &quot;lang_english&quot; to &quot;en&quot;,&#10;            &quot;lang_catalan&quot; to &quot;ca&quot;,&#10;            &quot;lang_japanese&quot; to &quot;ja&quot;,&#10;            &quot;info&quot; to &quot;&gt; info&quot;,&#10;            &quot;info_text&quot; to &quot;    ● no piratejis música!\n    ● Canvia motor amb yt: / sp:&quot;,&#10;            &quot;sptfy_status&quot; to &quot;&gt; estat_sptfy&quot;,&#10;            &quot;client&quot; to &quot;    ● client:&quot;,&#10;            &quot;api&quot; to &quot;    ● api:&quot;,&#10;            &quot;connected&quot; to &quot;connectat&quot;,&#10;            &quot;disconnected&quot; to &quot;desconnectat&quot;,&#10;            &quot;configured&quot; to &quot;configurat&quot;,&#10;            &quot;not_configured&quot; to &quot;no_configurat&quot;,&#10;            &quot;credentials_required&quot; to &quot;credencials requerides&quot;,&#10;            &quot;configure_credentials_first&quot; to &quot;configura les credencials primer&quot;,&#10;            &quot;opening_browser&quot; to &quot;obrint_navegador...&quot;,&#10;            &quot;check_browser&quot; to &quot;comprova_navegador&quot;,&#10;            &quot;error_starting_oauth&quot; to &quot;error_iniciant_oauth&quot;,&#10;            &quot;client_id&quot; to &quot;      client_id:&quot;,&#10;            &quot;client_secret&quot; to &quot;      client_secret:&quot;,&#10;            &quot;enter_client_id&quot; to &quot;introdueix el teu spotify client id&quot;,&#10;            &quot;enter_client_secret&quot; to &quot;introdueix el teu spotify client secret&quot;,&#10;            &quot;how_to_get_credentials&quot; to &quot;      &gt; com obtenir credencials api spotify:&quot;,&#10;            &quot;instruction_1&quot; to &quot;1. ves a https://developer.spotify.com/dashboard&quot;,&#10;            &quot;instruction_2&quot; to &quot;2. inicia sessió amb el teu compte spotify&quot;,&#10;            &quot;instruction_3&quot; to &quot;3. clica 'create app'&quot;,&#10;            &quot;instruction_4&quot; to &quot;4. omple el nom app (ex., 'plyr mobile')&quot;,&#10;            &quot;instruction_5&quot; to &quot;5. estableix redirect uri: 'plyr://spotify/callback'&quot;,&#10;            &quot;instruction_6&quot; to &quot;6. selecciona 'mobile' i 'web api'&quot;,&#10;            &quot;instruction_7&quot; to &quot;7. clica 'save'&quot;,&#10;            &quot;instruction_8&quot; to &quot;8. copia client id i client secret&quot;,&#10;            &quot;instruction_9&quot; to &quot;9. enganxa'ls als camps de dalt&quot;,&#10;            &quot;note_local_storage&quot; to &quot;      nota: aquestes credencials es guarden localment&quot;,&#10;&#10;            // Main Screen&#10;            &quot;plyr_title&quot; to &quot;$ plyr&quot;,&#10;            &quot;search_hint&quot; to &quot;cercar...&quot;,&#10;            &quot;no_results&quot; to &quot;no s'han trobat resultats&quot;,&#10;            &quot;loading&quot; to &quot;carregant...&quot;,&#10;&#10;            // Home Screen&#10;            &quot;home_search&quot; to &quot;cercar&quot;,&#10;            &quot;home_playlists&quot; to &quot;llistes&quot;,&#10;            &quot;home_queue&quot; to &quot;cua&quot;,&#10;            &quot;home_local&quot; to &quot;local&quot;,&#10;            &quot;home_settings&quot; to &quot;ajustos&quot;,&#10;            &quot;exit_message&quot; to &quot;Prem de nou per sortir&quot;,&#10;&#10;            // Search Screen&#10;            &quot;search_title&quot; to &quot;plyr_cercar&quot;,&#10;            &quot;search_placeholder&quot; to &quot;cercar música...&quot;,&#10;            &quot;search_loading&quot; to &quot;carregant...&quot;,&#10;            &quot;search_no_results&quot; to &quot;no s'han trobat resultats&quot;,&#10;            &quot;search_error&quot; to &quot;error&quot;,&#10;            &quot;search_spotify_not_connected&quot; to &quot;Spotify no està connectat&quot;,&#10;            &quot;search_token_not_available&quot; to &quot;Token de Spotify no disponible&quot;,&#10;            &quot;search_engine_not_recognized&quot; to &quot;Motor de cerca no reconegut&quot;,&#10;            &quot;search_error_loading_tracks&quot; to &quot;Error carregant cançons&quot;,&#10;            &quot;search_loading_tracks&quot; to &quot;carregant cançons...&quot;,&#10;            &quot;search_tracks&quot; to &quot;cançons&quot;,&#10;            &quot;search_albums&quot; to &quot;àlbums&quot;,&#10;            &quot;search_artists&quot; to &quot;artistes&quot;,&#10;            &quot;search_playlists&quot; to &quot;llistes&quot;,&#10;            &quot;search_videos&quot; to &quot;vídeos&quot;,&#10;            &quot;search_youtube_playlists&quot; to &quot;llistes youtube&quot;,&#10;            &quot;search_start&quot; to &quot;iniciar&quot;,&#10;            &quot;search_random&quot; to &quot;aleatori&quot;,&#10;            &quot;search_save&quot; to &quot;desar&quot;,&#10;            &quot;search_share&quot; to &quot;compartir&quot;,&#10;            &quot;search_saved&quot; to &quot;desat&quot;,&#10;            &quot;search_error_saving&quot; to &quot;error al desar&quot;,&#10;            &quot;search_followers&quot; to &quot;seguidors&quot;,&#10;            &quot;search_monthly_listeners&quot; to &quot;oients mensuals&quot;,&#10;            &quot;search_scan_qr&quot; to &quot;qr&quot;,&#10;            &quot;playlist_cover&quot; to &quot;Portada de la playlist&quot;,&#10;            &quot;artist_image&quot; to &quot;Imatge de l'artista&quot;,&#10;            &quot;search_query_empty_after_prefix&quot; to &quot;Querry buida després del prefix&quot;,&#10;            &quot;album_cover&quot; to &quot;Portada del album&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;resultats de youtube&quot;,&#10;            &quot;search_load_more&quot; to &quot;carregar més&quot;,&#10;&#10;            // Search Screen - Additional translations&#10;            &quot;search_select_playlist&quot; to &quot;Seleccionar playlist&quot;,&#10;            &quot;search_cancel&quot; to &quot;Cancelar&quot;,&#10;            &quot;search_removing&quot; to &quot;eliminant...&quot;,&#10;            &quot;search_removed&quot; to &quot;eliminat!&quot;,&#10;            &quot;search_saving_status&quot; to &quot;desant...&quot;,&#10;            &quot;search_error_no_token&quot; to &quot;error: no hi ha token&quot;,&#10;            &quot;search_unsave&quot; to &quot;desguardar&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;resultats youtube&quot;,&#10;            &quot;search_load_more&quot; to &quot;carregar més&quot;,&#10;            &quot;search_error_getting_track&quot; to &quot;Error obtenint track&quot;,&#10;            &quot;search_error_getting_playlist&quot; to &quot;Error obtenint playlist&quot;,&#10;            &quot;search_error_getting_album&quot; to &quot;Error obtenint àlbum&quot;,&#10;            &quot;search_error_getting_artist&quot; to &quot;Error obtenint artista&quot;,&#10;            &quot;search_error_processing_qr&quot; to &quot;Error processant QR&quot;,&#10;            &quot;search_adding_to_playlist&quot; to &quot;afegint cançó a la playlist&quot;,&#10;&#10;            // Player&#10;            &quot;now_playing&quot; to &quot;reproduint ara&quot;,&#10;            &quot;play&quot; to &quot;reproduir&quot;,&#10;            &quot;pause&quot; to &quot;pausa&quot;,&#10;            &quot;next&quot; to &quot;següent&quot;,&#10;            &quot;previous&quot; to &quot;anterior&quot;,&#10;            &quot;repeat&quot; to &quot;repetir&quot;,&#10;            &quot;shuffle&quot; to &quot;aleatori&quot;,&#10;&#10;            // ADDITIONAL KEYS (CATALAN)&#10;            &quot;connected_successfully&quot; to &quot;connectat correctament&quot;,&#10;            &quot;token_exchange_failed&quot; to &quot;intercanvi de token fallit&quot;,&#10;            &quot;cancelled_by_user&quot; to &quot;cancel·lat per l'usuari&quot;,&#10;            &quot;error_obtaining_audio&quot; to &quot;No s'ha pogut obtenir l'àudio&quot;,&#10;            &quot;error_prefix&quot; to &quot;Error: &quot;,&#10;&#10;            &quot;btn_start&quot; to &quot;&lt;start&gt;&quot;,&#10;            &quot;btn_stop&quot; to &quot;&lt;stop&gt;&quot;,&#10;            &quot;btn_rand&quot; to &quot;&lt;rand&gt;&quot;,&#10;            &quot;btn_share&quot; to &quot;&lt;share&gt;&quot;,&#10;            &quot;btn_save&quot; to &quot;&lt;save&gt;&quot;,&#10;            &quot;btn_edit&quot; to &quot;&lt;edit&gt;&quot;,&#10;            &quot;btn_delete&quot; to &quot;&lt;delete&gt;&quot;,&#10;            &quot;creating&quot; to &quot;&lt;creating...&gt;&quot;,&#10;            &quot;create&quot; to &quot;&lt;create&gt;&quot;,&#10;            &quot;delete_playlist_title&quot; to &quot;Eliminar playlist&quot;,&#10;            &quot;delete_playlist_confirm&quot; to &quot;Segur que vols eliminar '%s'? Aquesta acció no es pot desfer.&quot;,&#10;            &quot;unsaved_changes_title&quot; to &quot;Canvis sense desar&quot;,&#10;            &quot;unsaved_changes_text&quot; to &quot;Tens canvis sense desar. Segur que vols sortir?&quot;,&#10;            &quot;exit_label&quot; to &quot;Sortir&quot;,&#10;            &quot;cancel_label&quot; to &quot;Cancel·la&quot;,&#10;            &quot;delete_label&quot; to &quot;Eliminar&quot;,&#10;&#10;        ),&#10;        // JAPANESE&#10;        &quot;日本語&quot; to mapOf(&#10;            // Config Screen&#10;            &quot;config_title&quot; to &quot;plyr_設定&quot;,&#10;            &quot;theme&quot; to &quot;&gt; テーマ&quot;,&#10;            &quot;theme_dark&quot; to &quot;ダーク&quot;,&#10;            &quot;theme_light&quot; to &quot;ライト&quot;,&#10;            &quot;search_engine&quot; to &quot;&gt; 検索エンジン&quot;,&#10;            &quot;search_spotify&quot; to &quot;spotify&quot;,&#10;            &quot;search_youtube&quot; to &quot;youtube&quot;,&#10;            &quot;audio_quality&quot; to &quot;&gt; 音質&quot;,&#10;            &quot;quality_low&quot; to &quot;低&quot;,&#10;            &quot;quality_med&quot; to &quot;中&quot;,&#10;            &quot;quality_high&quot; to &quot;高&quot;,&#10;            &quot;language&quot; to &quot;&gt; 言語&quot;,&#10;            &quot;lang_spanish&quot; to &quot;es&quot;,&#10;            &quot;lang_english&quot; to &quot;en&quot;,&#10;            &quot;lang_catalan&quot; to &quot;ca&quot;,&#10;            &quot;lang_japanese&quot; to &quot;ja&quot;,&#10;            &quot;info&quot; to &quot;&gt; 情報&quot;,&#10;            &quot;info_text&quot; to &quot;    ● 音楽を違法にダウンロードしないでください！\n    ● エンジンを変更するには yt: / sp: を使用&quot;,&#10;            &quot;sptfy_status&quot; to &quot;&gt; sptfy_ステータス&quot;,&#10;            &quot;client&quot; to &quot;    ● クライアント:&quot;,&#10;            &quot;api&quot; to &quot;    ● API:&quot;,&#10;            &quot;connected&quot; to &quot;接続済み&quot;,&#10;            &quot;disconnected&quot; to &quot;未接続&quot;,&#10;            &quot;configured&quot; to &quot;設定済み&quot;,&#10;            &quot;not_configured&quot; to &quot;未設定&quot;,&#10;            &quot;credentials_required&quot; to &quot;認証情報が必要です&quot;,&#10;            &quot;configure_credentials_first&quot; to &quot;先に認証情報を設定してください&quot;,&#10;            &quot;opening_browser&quot; to &quot;ブラウザを開いています...&quot;,&#10;            &quot;check_browser&quot; to &quot;ブラウザを確認してください&quot;,&#10;            &quot;error_starting_oauth&quot; to &quot;OAuth の開始エラー&quot;,&#10;            &quot;client_id&quot; to &quot;      クライアントID:&quot;,&#10;            &quot;client_secret&quot; to &quot;      クライアントシークレット:&quot;,&#10;            &quot;enter_client_id&quot; to &quot;Spotify クライアントIDを入力してください&quot;,&#10;            &quot;enter_client_secret&quot; to &quot;Spotify クライアントシークレットを入力してください&quot;,&#10;            &quot;how_to_get_credentials&quot; to &quot;      &gt; Spotify API の認証情報を取得する方法:&quot;,&#10;            &quot;instruction_1&quot; to &quot;1. https://developer.spotify.com/dashboard にアクセス&quot;,&#10;            &quot;instruction_2&quot; to &quot;2. Spotify アカウントでログイン&quot;,&#10;            &quot;instruction_3&quot; to &quot;3. 「アプリを作成」をクリック&quot;,&#10;            &quot;instruction_4&quot; to &quot;4. アプリ名を入力 (例: 'plyr mobile')&quot;,&#10;            &quot;instruction_5&quot; to &quot;5. リダイレクトURIを設定: 'plyr://spotify/callback'&quot;,&#10;            &quot;instruction_6&quot; to &quot;6. 「mobile」と「web api」を選択&quot;,&#10;            &quot;instruction_7&quot; to &quot;7. 「保存」をクリック&quot;,&#10;            &quot;instruction_8&quot; to &quot;8. client_id と client_secret をコピー&quot;,&#10;            &quot;instruction_9&quot; to &quot;9. 上のフィールドに貼り付ける&quot;,&#10;            &quot;note_local_storage&quot; to &quot;      注: 認証情報はローカルに保存されます&quot;,&#10;&#10;            // Main Screen&#10;            &quot;plyr_title&quot; to &quot;$ plyr&quot;,&#10;            &quot;search_hint&quot; to &quot;検索...&quot;,&#10;            &quot;no_results&quot; to &quot;結果が見つかりません&quot;,&#10;            &quot;loading&quot; to &quot;読み込み中...&quot;,&#10;&#10;            // Home Screen&#10;            &quot;home_search&quot; to &quot;検索&quot;,&#10;            &quot;home_playlists&quot; to &quot;プレイリスト&quot;,&#10;            &quot;home_queue&quot; to &quot;キュー&quot;,&#10;            &quot;home_local&quot; to &quot;ローカル&quot;,&#10;            &quot;home_settings&quot; to &quot;設定&quot;,&#10;            &quot;exit_message&quot; to &quot;もう一度押すと終了します&quot;,&#10;&#10;            // Search Screen&#10;            &quot;search_title&quot; to &quot;plyr_検索&quot;,&#10;            &quot;search_placeholder&quot; to &quot;音楽を検索...&quot;,&#10;            &quot;search_loading&quot; to &quot;読み込み中...&quot;,&#10;            &quot;search_no_results&quot; to &quot;結果が見つかりません&quot;,&#10;            &quot;search_error&quot; to &quot;エラー&quot;,&#10;            &quot;search_spotify_not_connected&quot; to &quot;Spotify が接続されていません&quot;,&#10;            &quot;search_token_not_available&quot; to &quot;Spotify トークンが利用できません&quot;,&#10;            &quot;search_engine_not_recognized&quot; to &quot;検索エンジンが認識されません&quot;,&#10;            &quot;search_error_loading_tracks&quot; to &quot;曲の読み込みエラー&quot;,&#10;            &quot;search_loading_tracks&quot; to &quot;曲を読み込み中...&quot;,&#10;            &quot;search_tracks&quot; to &quot;曲&quot;,&#10;            &quot;search_albums&quot; to &quot;アルバム&quot;,&#10;            &quot;search_artists&quot; to &quot;アーティスト&quot;,&#10;            &quot;search_playlists&quot; to &quot;プレイリスト&quot;,&#10;            &quot;search_videos&quot; to &quot;動画&quot;,&#10;            &quot;search_youtube_playlists&quot; to &quot;YouTube プレイリスト&quot;,&#10;            &quot;search_start&quot; to &quot;開始&quot;,&#10;            &quot;search_random&quot; to &quot;ランダム&quot;,&#10;            &quot;search_save&quot; to &quot;保存&quot;,&#10;            &quot;search_share&quot; to &quot;共有&quot;,&#10;            &quot;search_saved&quot; to &quot;保存しました&quot;,&#10;            &quot;search_error_saving&quot; to &quot;保存中にエラー&quot;,&#10;            &quot;search_followers&quot; to &quot;フォロワー&quot;,&#10;            &quot;search_monthly_listeners&quot; to &quot;月間リスナー&quot;,&#10;            &quot;search_scan_qr&quot; to &quot;QR&quot;,&#10;            &quot;playlist_cover&quot; to &quot;プレイリストのカバー&quot;,&#10;            &quot;artist_image&quot; to &quot;アーティスト画像&quot;,&#10;            &quot;search_query_empty_after_prefix&quot; to &quot;プレフィックス後のクエリが空です&quot;,&#10;            &quot;album_cover&quot; to &quot;アルバムカバー&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;YouTube の結果&quot;,&#10;            &quot;search_load_more&quot; to &quot;もっと読み込む&quot;,&#10;&#10;            // Search Screen - Additional&#10;            &quot;search_select_playlist&quot; to &quot;プレイリストを選択&quot;,&#10;            &quot;search_cancel&quot; to &quot;キャンセル&quot;,&#10;            &quot;search_removing&quot; to &quot;削除中...&quot;,&#10;            &quot;search_removed&quot; to &quot;削除しました！&quot;,&#10;            &quot;search_saving_status&quot; to &quot;保存中...&quot;,&#10;            &quot;search_error_no_token&quot; to &quot;エラー: トークンがありません&quot;,&#10;            &quot;search_unsave&quot; to &quot;保存を解除&quot;,&#10;            &quot;search_error_getting_track&quot; to &quot;曲の取得エラー&quot;,&#10;            &quot;search_error_getting_playlist&quot; to &quot;プレイリストの取得エラー&quot;,&#10;            &quot;search_error_getting_album&quot; to &quot;アルバムの取得エラー&quot;,&#10;            &quot;search_error_getting_artist&quot; to &quot;アーティストの取得エラー&quot;,&#10;            &quot;search_error_processing_qr&quot; to &quot;QR の処理中にエラー&quot;,&#10;            &quot;search_adding_to_playlist&quot; to &quot;プレイリストに曲を追加中...&quot;,&#10;&#10;            // Player&#10;            &quot;now_playing&quot; to &quot;再生中&quot;,&#10;            &quot;play&quot; to &quot;再生&quot;,&#10;            &quot;pause&quot; to &quot;一時停止&quot;,&#10;            &quot;next&quot; to &quot;次へ&quot;,&#10;            &quot;previous&quot; to &quot;前へ&quot;,&#10;            &quot;repeat&quot; to &quot;リピート&quot;,&#10;            &quot;shuffle&quot; to &quot;シャッフル&quot;,&#10;&#10;            // Playlist actions and dialogs&#10;            &quot;btn_start&quot; to &quot;&lt;開始&gt;&quot;,&#10;            &quot;btn_stop&quot; to &quot;&lt;停止&gt;&quot;,&#10;            &quot;btn_rand&quot; to &quot;&lt;ランダム&gt;&quot;,&#10;            &quot;btn_share&quot; to &quot;&lt;共有&gt;&quot;,&#10;            &quot;btn_save&quot; to &quot;&lt;保存&gt;&quot;,&#10;            &quot;btn_edit&quot; to &quot;&lt;編集&gt;&quot;,&#10;            &quot;btn_delete&quot; to &quot;&lt;削除&gt;&quot;,&#10;            &quot;creating&quot; to &quot;&lt;作成中...&gt;&quot;,&#10;            &quot;create&quot; to &quot;&lt;作成&gt;&quot;,&#10;            &quot;delete_playlist_title&quot; to &quot;プレイリストを削除&quot;,&#10;            &quot;delete_playlist_confirm&quot; to &quot;「%s」を削除してもよろしいですか？この操作は元に戻せません。&quot;,&#10;            &quot;unsaved_changes_title&quot; to &quot;未保存の変更&quot;,&#10;            &quot;unsaved_changes_text&quot; to &quot;未保存の変更があります。本当に終了しますか？&quot;,&#10;            &quot;exit_label&quot; to &quot;終了&quot;,&#10;            &quot;cancel_label&quot; to &quot;キャンセル&quot;,&#10;            &quot;delete_label&quot; to &quot;削除&quot;,&#10;&#10;            // Additional&#10;            &quot;connected_successfully&quot; to &quot;正常に接続されました&quot;,&#10;            &quot;token_exchange_failed&quot; to &quot;トークンの交換に失敗しました&quot;,&#10;            &quot;cancelled_by_user&quot; to &quot;ユーザーによりキャンセルされました&quot;,&#10;            &quot;error_obtaining_audio&quot; to &quot;音声を取得できませんでした&quot;,&#10;            &quot;error_prefix&quot; to &quot;エラー: &quot;,&#10;&#10;            // Local Screen&#10;            &quot;plyr_local&quot; to &quot;plyr_ローカル&quot;,&#10;            &quot;unknown error&quot; to &quot;不明なエラー&quot;,&#10;            &quot;No tracks downloaded&quot; to &quot;ダウンロードされた曲はありません&quot;,&#10;            &quot;delete track&quot; to &quot;曲を削除&quot;,&#10;            &quot;Song {{track_name}} will be removed permanently&quot; to &quot;曲 {{track_name}} は完全に削除されます&quot;,&#10;            &quot;delete&quot; to &quot;削除&quot;,&#10;            &quot;cancel&quot; to &quot;キャンセル&quot;,&#10;&#10;            // Queue Screen&#10;            &quot;plyr_queue&quot; to &quot;plyr_キュー&quot;,&#10;            &quot;No tracks loaded&quot; to &quot;曲が読み込まれていません&quot;,&#10;            &quot;Play a track to start a playlist&quot; to &quot;曲を再生してプレイリストを開始します&quot;,&#10;            &quot;player_not_available&quot; to &quot;プレイヤーが利用できません&quot;,&#10;&#10;            // Playlists Screen&#10;            &quot;plyr_lists&quot; to &quot;plyr_リスト&quot;,&#10;            &quot;&lt;syncing...&gt;&quot; to &quot;&lt;同期中...&gt;&quot;,&#10;            &quot;&lt;sync&gt;&quot; to &quot;&lt;同期&gt;&quot;,&#10;            &quot;&lt;new&gt;&quot; to &quot;&lt;新規作成&gt;&quot;,&#10;            &quot;Spotify not connected&quot; to &quot;Spotify が接続されていません&quot;,&#10;            &quot;Loading tracks...&quot; to &quot;曲を読み込み中...&quot;&#10;        ),&#10;&#10;        )&#10;&#10;    /**&#10;     * Obtiene una traducción para una clave específica según el idioma actual&#10;     * @param context Contexto de la aplicación&#10;     * @param key Clave de la traducción&#10;     * @return Traducción correspondiente o la clave si no existe&#10;     */&#10;    fun get(context: Context, key: String): String {&#10;        val language = Config.getLanguage(context)&#10;        return translations[language]?.get(key) ?: key&#10;    }&#10;&#10;    /**&#10;     * Obtiene una traducción para una clave específica según un idioma específico&#10;     * @param language Idioma deseado&#10;     * @param key Clave de la traducción&#10;     * @return Traducción correspondiente o la clave si no existe&#10;     */&#10;    fun get(language: String, key: String): String {&#10;        return translations[language]?.get(key) ?: key&#10;    }&#10;&#10;    /**&#10;     * Verifica si existe una traducción para una clave específica&#10;     * @param context Contexto de la aplicación&#10;     * @param key Clave de la traducción&#10;     * @return true si existe, false en caso contrario&#10;     */&#10;    fun exists(context: Context, key: String): Boolean {&#10;        val language = Config.getLanguage(context)&#10;        return translations[language]?.containsKey(key) ?: false&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;&#10;/**&#10; * Sistema de traducciones para la aplicación plyr&#10; * Maneja las traducciones para Español, English y Català&#10; */&#10;object Translations {&#10;&#10;    // Mapa de traducciones por idioma&#10;    private val translations = mapOf(&#10;        // ESPAÑOL&#10;        &quot;español&quot; to mapOf(&#10;            // Config Screen&#10;            &quot;config_title&quot; to &quot;plyr_ajustes&quot;,&#10;            &quot;theme&quot; to &quot;&gt; tema&quot;,&#10;            &quot;theme_dark&quot; to &quot;oscuro&quot;,&#10;            &quot;theme_light&quot; to &quot;claro&quot;,&#10;            &quot;search_engine&quot; to &quot;&gt; motor_de_búsqueda&quot;,&#10;            &quot;search_spotify&quot; to &quot;spotify&quot;,&#10;            &quot;search_youtube&quot; to &quot;youtube&quot;,&#10;            &quot;audio_quality&quot; to &quot;&gt; calidad_de_audio&quot;,&#10;            &quot;quality_low&quot; to &quot;baja&quot;,&#10;            &quot;quality_med&quot; to &quot;media&quot;,&#10;            &quot;quality_high&quot; to &quot;alta&quot;,&#10;            &quot;language&quot; to &quot;&gt; idioma&quot;,&#10;            &quot;lang_spanish&quot; to &quot;es&quot;,&#10;            &quot;lang_english&quot; to &quot;en&quot;,&#10;            &quot;lang_catalan&quot; to &quot;ca&quot;,&#10;            &quot;lang_japanese&quot; to &quot;ja&quot;,&#10;            &quot;info&quot; to &quot;&gt; información&quot;,&#10;            &quot;info_text&quot; to &quot;    ● ¡no piratees música!\n    ● cambia el motor con yt: / sp:&quot;,&#10;            &quot;sptfy_status&quot; to &quot;&gt; estado_sptfy&quot;,&#10;            &quot;client&quot; to &quot;    ● cliente:&quot;,&#10;            &quot;api&quot; to &quot;    ● api:&quot;,&#10;            &quot;connected&quot; to &quot;conectado&quot;,&#10;            &quot;disconnected&quot; to &quot;desconectado&quot;,&#10;            &quot;configured&quot; to &quot;configurado&quot;,&#10;            &quot;not_configured&quot; to &quot;no configurado&quot;,&#10;            &quot;credentials_required&quot; to &quot;se requieren credenciales&quot;,&#10;            &quot;configure_credentials_first&quot; to &quot;configura las credenciales primero&quot;,&#10;            &quot;opening_browser&quot; to &quot;abriendo navegador...&quot;,&#10;            &quot;check_browser&quot; to &quot;revisa el navegador&quot;,&#10;            &quot;error_starting_oauth&quot; to &quot;error al iniciar oauth&quot;,&#10;            &quot;client_id&quot; to &quot;      id del client:&quot;,&#10;            &quot;client_secret&quot; to &quot;      secreto del client:&quot;,&#10;            &quot;enter_client_id&quot; to &quot;introduce tu id del cliente de spotify&quot;,&#10;            &quot;enter_client_secret&quot; to &quot;introduce tu secreto del cliente de spotify &quot;,&#10;            &quot;how_to_get_credentials&quot; to &quot;      &gt; cómo obtener credenciales de la api de spotify:&quot;,&#10;            &quot;instruction_1&quot; to &quot;1. ve a https://developer.spotify.com/dashboard&quot;,&#10;            &quot;instruction_2&quot; to &quot;2. inicia sesión con tu cuenta de spotify&quot;,&#10;            &quot;instruction_3&quot; to &quot;3. selecciona 'crear aplicación'&quot;,&#10;            &quot;instruction_4&quot; to &quot;4. rellena el nombre (por ejemplo, 'plyr mobile')&quot;,&#10;            &quot;instruction_5&quot; to &quot;5. establece el redirect uri: 'plyr://spotify/callback'&quot;,&#10;            &quot;instruction_6&quot; to &quot;6. selecciona 'mobile' y 'web  pi'&quot;,&#10;            &quot;instruction_7&quot; to &quot;7. haz clic en 'guardar'&quot;,&#10;            &quot;instruction_8&quot; to &quot;8. copia el client_id y el client_secret&quot;,&#10;            &quot;instruction_9&quot; to &quot;9. pegalos en los campos de arriba&quot;,&#10;            &quot;note_local_storage&quot; to &quot;      nota: estas credenciales se guardan localmente&quot;,&#10;&#10;            // Main Screen&#10;            &quot;plyr_title&quot; to &quot;$ plyr&quot;, //QUITAR EL TITLE GENERAL&#10;            &quot;search_hint&quot; to &quot;search...&quot;,&#10;            &quot;no_results&quot; to &quot;no results found&quot;,&#10;            &quot;loading&quot; to &quot;loading...&quot;,&#10;&#10;            // Home Screen&#10;            &quot;home_search&quot; to &quot;buscar&quot;,&#10;            &quot;home_playlists&quot; to &quot;listas&quot;,&#10;            &quot;home_queue&quot; to &quot;cola&quot;,&#10;            &quot;home_local&quot; to &quot;local&quot;,&#10;            &quot;home_settings&quot; to &quot;ajustes&quot;,&#10;            &quot;exit_message&quot; to &quot;Presiona de nuevo para salir&quot;,&#10;&#10;            // Search Screen&#10;            &quot;search_title&quot; to &quot;plyr_buscar&quot;,&#10;            &quot;search_placeholder&quot; to &quot;buscar música...&quot;,&#10;            &quot;search_loading&quot; to &quot;cargando...&quot;,&#10;            &quot;search_no_results&quot; to &quot;no se encontraron resultados&quot;,&#10;            &quot;search_error&quot; to &quot;error&quot;,&#10;            &quot;search_spotify_not_connected&quot; to &quot;Spotify no está conectado&quot;,&#10;            &quot;search_token_not_available&quot; to &quot;Token de Spotify no disponible&quot;,&#10;            &quot;search_engine_not_recognized&quot; to &quot;Motor de búsqueda no reconocido&quot;,&#10;            &quot;search_error_loading_tracks&quot; to &quot;Error cargando canciones&quot;,&#10;            &quot;search_loading_tracks&quot; to &quot;cargando canciones...&quot;,&#10;            &quot;search_tracks&quot; to &quot;canciones&quot;,&#10;            &quot;search_albums&quot; to &quot;álbumes&quot;,&#10;            &quot;search_artists&quot; to &quot;artistas&quot;,&#10;            &quot;search_playlists&quot; to &quot;listas&quot;,&#10;            &quot;search_videos&quot; to &quot;videos&quot;,&#10;            &quot;search_youtube_playlists&quot; to &quot;listas youtube&quot;,&#10;            &quot;search_start&quot; to &quot;iniciar&quot;,&#10;            &quot;search_random&quot; to &quot;aleatorio&quot;,&#10;            &quot;search_save&quot; to &quot;guardar&quot;,&#10;            &quot;search_share&quot; to &quot;compartir&quot;,&#10;            &quot;search_saved&quot; to &quot;guardado&quot;,&#10;            &quot;search_error_saving&quot; to &quot;error al guardar&quot;,&#10;            &quot;search_followers&quot; to &quot;seguidores&quot;,&#10;            &quot;search_monthly_listeners&quot; to &quot;oyentes mensuales&quot;,&#10;            &quot;search_scan_qr&quot; to &quot;qr&quot;,&#10;            &quot;playlist_cover&quot; to &quot;Portada de la playlist&quot;,&#10;            &quot;artist_image&quot; to &quot;Imagen del artista&quot;,&#10;            &quot;search_query_empty_after_prefix&quot; to &quot;Querry vacía después del prefijo&quot;,&#10;            &quot;album_cover&quot; to &quot;Portada del album&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;resultados de youtube&quot;,&#10;            &quot;search_load_more&quot; to &quot;cargar más&quot;,&#10;&#10;            // Search Screen - Additional translations&#10;            &quot;search_select_playlist&quot; to &quot;Seleccionar playlist&quot;,&#10;            &quot;search_cancel&quot; to &quot;Cancelar&quot;,&#10;            &quot;search_removing&quot; to &quot;eliminando...&quot;,&#10;            &quot;search_removed&quot; to &quot;¡eliminado!&quot;,&#10;            &quot;search_saving_status&quot; to &quot;guardando...&quot;,&#10;            &quot;search_error_no_token&quot; to &quot;error: no hay token&quot;,&#10;            &quot;search_unsave&quot; to &quot;desguardar&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;resultados youtube&quot;,&#10;            &quot;search_load_more&quot; to &quot;cargar más&quot;,&#10;            &quot;search_error_getting_track&quot; to &quot;Error obteniendo track&quot;,&#10;            &quot;search_error_getting_playlist&quot; to &quot;Error obteniendo playlist&quot;,&#10;            &quot;search_error_getting_album&quot; to &quot;Error obteniendo álbum&quot;,&#10;            &quot;search_error_getting_artist&quot; to &quot;Error obteniendo artista&quot;,&#10;            &quot;search_error_processing_qr&quot; to &quot;Error procesando QR&quot;,&#10;            &quot;search_adding_to_playlist&quot; to &quot;añadiendo canción a la playlist&quot;,&#10;&#10;            // Player&#10;            &quot;now_playing&quot; to &quot;now playing&quot;,&#10;            &quot;play&quot; to &quot;play&quot;,&#10;            &quot;pause&quot; to &quot;pause&quot;,&#10;            &quot;next&quot; to &quot;siguiente&quot;,&#10;            &quot;previous&quot; to &quot;anterior&quot;,&#10;            &quot;repeat&quot; to &quot;repetir&quot;,&#10;            &quot;shuffle&quot; to &quot;mezclar&quot;,&#10;&#10;            // Playlist / Form labels&#10;            &quot;playlist_name&quot; to &quot;Nombre de la playlist&quot;,&#10;            &quot;description&quot; to &quot;Descripción&quot;,&#10;            &quot;description_optional&quot; to &quot;Descripción (opcional)&quot;,&#10;            &quot;search_tracks_label&quot; to &quot;Buscar canciones&quot;,&#10;            &quot;create_playlist&quot; to &quot;Crear playlist&quot;,&#10;            &quot;playlist_name_placeholder&quot; to &quot;Nombre de la playlist&quot;,&#10;&#10;            // Local Screen&#10;            &quot;plyr_local&quot; to &quot;plyr_local&quot;,&#10;            &quot;unknown error&quot; to &quot;error desconocido&quot;,&#10;            &quot;No tracks downloaded&quot; to &quot;Ninguna canción descargada&quot;,&#10;            &quot;delete track&quot; to &quot;eliminar canción&quot;,&#10;            &quot;Song {{track_name}} will be removed permanently&quot; to &quot;La canción {{track_name}} será eliminada permanentemente&quot;,&#10;            &quot;delete&quot; to &quot;eliminar&quot;,&#10;            &quot;cancel&quot; to &quot;cancelar&quot;,&#10;&#10;            // Queue Screen&#10;            &quot;plyr_queue&quot; to &quot;plyr_cola&quot;,&#10;            &quot;No tracks loaded&quot; to &quot;Ninguna lista cargada&quot;,&#10;            &quot;Play a track to start a playlist&quot; to &quot;Reproduce una canción para iniciar una lista&quot;,&#10;            &quot;player_not_available&quot; to &quot;reproductor_no_disponible&quot;,&#10;&#10;            //Playlists Screen&#10;            &quot;plyr_lists&quot; to &quot;plyr_listas&quot;,&#10;            &quot;&lt;syncing...&gt;&quot; to &quot;&lt;sincronizando...&gt;&quot;,&#10;            &quot;&lt;sync&gt;&quot; to &quot;&lt;sincronizar&gt;&quot;,&#10;            &quot;&lt;new&gt;&quot; to &quot;&lt;crear&gt;&quot;,&#10;            &quot;Spotify not connected&quot; to &quot;Spotify no conectado&quot;,&#10;            &quot;Loading tracks...&quot; to &quot;Cargando canciones...&quot;,&#10;&#10;            // ADDITIONAL KEYS (SPANISH)&#10;            &quot;connected_successfully&quot; to &quot;conectado correctamente&quot;,&#10;            &quot;token_exchange_failed&quot; to &quot;intercambio de token fallido&quot;,&#10;            &quot;cancelled_by_user&quot; to &quot;cancelado por el usuario&quot;,&#10;            &quot;error_obtaining_audio&quot; to &quot;No se pudo obtener audio&quot;,&#10;            &quot;error_prefix&quot; to &quot;Error: &quot;,&#10;&#10;            // Playlist actions and dialogs&#10;            &quot;btn_start&quot; to &quot;&lt;start&gt;&quot;,&#10;            &quot;btn_stop&quot; to &quot;&lt;stop&gt;&quot;,&#10;            &quot;btn_rand&quot; to &quot;&lt;rand&gt;&quot;,&#10;            &quot;btn_share&quot; to &quot;&lt;share&gt;&quot;,&#10;            &quot;btn_save&quot; to &quot;&lt;save&gt;&quot;,&#10;            &quot;btn_edit&quot; to &quot;&lt;edit&gt;&quot;,&#10;            &quot;btn_delete&quot; to &quot;&lt;delete&gt;&quot;,&#10;            &quot;creating&quot; to &quot;&lt;creating...&gt;&quot;,&#10;            &quot;create&quot; to &quot;&lt;create&gt;&quot;,&#10;            &quot;delete_playlist_title&quot; to &quot;Eliminar playlist&quot;,&#10;            &quot;delete_playlist_confirm&quot; to &quot;¿Seguro que quieres eliminar '%s'? Esta acción no se puede deshacer.&quot;,&#10;            &quot;unsaved_changes_title&quot; to &quot;Cambios sin guardar&quot;,&#10;            &quot;unsaved_changes_text&quot; to &quot;Tienes cambios sin guardar. ¿Seguro que quieres salir?&quot;,&#10;            &quot;exit_label&quot; to &quot;Salir&quot;,&#10;            &quot;cancel_label&quot; to &quot;Cancelar&quot;,&#10;            &quot;delete_label&quot; to &quot;Eliminar&quot;,&#10;&#10;            // SongListItem&#10;            &quot;add_to_playlist&quot; to &quot;añadir a playlist&quot;,&#10;            &quot;add_to_queue&quot; to &quot;añadir a cola&quot;,&#10;            &quot;share&quot; to &quot;compartir&quot;,&#10;            &quot;add_to_liked_songs&quot; to &quot;añadir a favoritos&quot;,&#10;            &quot;remove_from_liked_songs&quot; to &quot;quitar de favoritos&quot;,&#10;            &quot;download&quot; to &quot;descargar&quot;,&#10;            &quot;error_fetching_track_info&quot; to &quot;Error obteniendo info del track&quot;,&#10;            &quot;spotify_token_unavailable&quot; to &quot;Token de Spotify no disponible&quot;,&#10;            &quot;error_generic&quot; to &quot;Error&quot;,&#10;            &quot;album_colon&quot; to &quot;Álbum: %s&quot;,&#10;            &quot;release_colon&quot; to &quot;Lanzamiento: %s&quot;,&#10;            &quot;duration_colon&quot; to &quot;Duración: %s&quot;,&#10;            &quot;not_available&quot; to &quot;N/A&quot;,&#10;            &quot;error_loading_playlists&quot; to &quot;Error cargando playlists&quot;,&#10;            &quot;track_already_downloaded&quot; to &quot;Track ya descargado&quot;,&#10;            &quot;loading_playlists&quot; to &quot;cargando playlists...&quot;,&#10;            &quot;track_added_successfully&quot; to &quot;¡Canción añadida exitosamente!&quot;,&#10;            &quot;no_playlists_found&quot; to &quot;No se encontraron playlists&quot;,&#10;&#10;        ),&#10;&#10;        // ENGLISH&#10;        &quot;english&quot; to mapOf(&#10;            // Config Screen&#10;            &quot;config_title&quot; to &quot;plyr_config&quot;,&#10;            &quot;theme&quot; to &quot;&gt; theme&quot;,&#10;            &quot;theme_dark&quot; to &quot;dark&quot;,&#10;            &quot;theme_light&quot; to &quot;light&quot;,&#10;            &quot;search_engine&quot; to &quot;&gt; search_engine&quot;,&#10;            &quot;search_spotify&quot; to &quot;spotify&quot;,&#10;            &quot;search_youtube&quot; to &quot;youtube&quot;,&#10;            &quot;audio_quality&quot; to &quot;&gt; audio_quality&quot;,&#10;            &quot;quality_low&quot; to &quot;low&quot;,&#10;            &quot;quality_med&quot; to &quot;med&quot;,&#10;            &quot;quality_high&quot; to &quot;high&quot;,&#10;            &quot;language&quot; to &quot;&gt; language&quot;,&#10;            &quot;lang_spanish&quot; to &quot;es&quot;,&#10;            &quot;lang_english&quot; to &quot;en&quot;,&#10;            &quot;lang_catalan&quot; to &quot;ca&quot;,&#10;            &quot;lang_japanese&quot; to &quot;ja&quot;,&#10;            &quot;info&quot; to &quot;&gt; info&quot;,&#10;            &quot;info_text&quot; to &quot;    ● don't pirate music!\n    ● Change engine with yt: / sp:&quot;,&#10;            &quot;sptfy_status&quot; to &quot;&gt; sptfy_status&quot;,&#10;            &quot;client&quot; to &quot;    ● client:&quot;,&#10;            &quot;api&quot; to &quot;    ● api:&quot;,&#10;            &quot;connected&quot; to &quot;connected&quot;,&#10;            &quot;disconnected&quot; to &quot;disconnected&quot;,&#10;            &quot;configured&quot; to &quot;configured&quot;,&#10;            &quot;not_configured&quot; to &quot;not_configured&quot;,&#10;            &quot;credentials_required&quot; to &quot;credentials required&quot;,&#10;            &quot;configure_credentials_first&quot; to &quot;configure credentials first&quot;,&#10;            &quot;opening_browser&quot; to &quot;opening_browser...&quot;,&#10;            &quot;check_browser&quot; to &quot;check_browser&quot;,&#10;            &quot;error_starting_oauth&quot; to &quot;error_starting_oauth&quot;,&#10;            &quot;client_id&quot; to &quot;      client_id:&quot;,&#10;            &quot;client_secret&quot; to &quot;      client_secret:&quot;,&#10;            &quot;enter_client_id&quot; to &quot;enter your spotify client id&quot;,&#10;            &quot;enter_client_secret&quot; to &quot;enter your spotify client secret&quot;,&#10;            &quot;how_to_get_credentials&quot; to &quot;      &gt; how to get spotify api credentials:&quot;,&#10;            &quot;instruction_1&quot; to &quot;1. go to https://developer.spotify.com/dashboard&quot;,&#10;            &quot;instruction_2&quot; to &quot;2. log in with your spotify account&quot;,&#10;            &quot;instruction_3&quot; to &quot;3. click 'create app'&quot;,&#10;            &quot;instruction_4&quot; to &quot;4. fill app name (e.g., 'plyr mobile')&quot;,&#10;            &quot;instruction_5&quot; to &quot;5. set redirect uri: 'plyr://spotify/callback'&quot;,&#10;            &quot;instruction_6&quot; to &quot;6. select 'mobile' and 'web api'&quot;,&#10;            &quot;instruction_7&quot; to &quot;7. click 'save'&quot;,&#10;            &quot;instruction_8&quot; to &quot;8. copy client id and client secret&quot;,&#10;            &quot;instruction_9&quot; to &quot;9. paste them in the fields above&quot;,&#10;            &quot;note_local_storage&quot; to &quot;      note: these credentials are stored locally&quot;,&#10;&#10;            // Main Screen&#10;            &quot;plyr_title&quot; to &quot;$ plyr&quot;,&#10;            &quot;search_hint&quot; to &quot;search...&quot;,&#10;            &quot;no_results&quot; to &quot;no results found&quot;,&#10;            &quot;loading&quot; to &quot;loading...&quot;,&#10;&#10;            // Home Screen&#10;            &quot;home_search&quot; to &quot;search&quot;,&#10;            &quot;home_playlists&quot; to &quot;playlists&quot;,&#10;            &quot;home_queue&quot; to &quot;queue&quot;,&#10;            &quot;home_local&quot; to &quot;local&quot;,&#10;            &quot;home_settings&quot; to &quot;settings&quot;,&#10;            &quot;exit_message&quot; to &quot;Press back again to exit&quot;,&#10;&#10;            // Search Screen&#10;            &quot;search_title&quot; to &quot;plyr_search&quot;,&#10;            &quot;search_placeholder&quot; to &quot;search music...&quot;,&#10;            &quot;search_loading&quot; to &quot;loading...&quot;,&#10;            &quot;search_no_results&quot; to &quot;no results found&quot;,&#10;            &quot;search_error&quot; to &quot;error&quot;,&#10;            &quot;search_spotify_not_connected&quot; to &quot;Spotify is not connected&quot;,&#10;            &quot;search_token_not_available&quot; to &quot;Spotify token not available&quot;,&#10;            &quot;search_engine_not_recognized&quot; to &quot;Search engine not recognized&quot;,&#10;            &quot;search_error_loading_tracks&quot; to &quot;Error loading tracks&quot;,&#10;            &quot;search_loading_tracks&quot; to &quot;loading tracks...&quot;,&#10;            &quot;search_tracks&quot; to &quot;tracks&quot;,&#10;            &quot;search_albums&quot; to &quot;albums&quot;,&#10;            &quot;search_artists&quot; to &quot;artists&quot;,&#10;            &quot;search_playlists&quot; to &quot;playlists&quot;,&#10;            &quot;search_videos&quot; to &quot;videos&quot;,&#10;            &quot;search_youtube_playlists&quot; to &quot;youtube playlists&quot;,&#10;            &quot;search_start&quot; to &quot;start&quot;,&#10;            &quot;search_random&quot; to &quot;random&quot;,&#10;            &quot;search_save&quot; to &quot;save&quot;,&#10;            &quot;search_share&quot; to &quot;share&quot;,&#10;            &quot;search_saved&quot; to &quot;saved&quot;,&#10;            &quot;search_error_saving&quot; to &quot;error saving&quot;,&#10;            &quot;search_followers&quot; to &quot;followers&quot;,&#10;            &quot;search_monthly_listeners&quot; to &quot;monthly listeners&quot;,&#10;            &quot;search_scan_qr&quot; to &quot;qr&quot;,&#10;            &quot;playlist_cover&quot; to &quot;Playlist cover&quot;,&#10;            &quot;artist_image&quot; to &quot;Artist image&quot;,&#10;            &quot;search_query_empty_after_prefix&quot; to &quot;Query empty after prefix&quot;,&#10;            &quot;album_cover&quot; to &quot;Album cover&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;youtube results&quot;,&#10;            &quot;search_load_more&quot; to &quot;load more&quot;,&#10;&#10;            // Search Screen - Additional translations&#10;            &quot;search_select_playlist&quot; to &quot;Select playlist&quot;,&#10;            &quot;search_cancel&quot; to &quot;Cancel&quot;,&#10;            &quot;search_removing&quot; to &quot;removing...&quot;,&#10;            &quot;search_removed&quot; to &quot;removed!&quot;,&#10;            &quot;search_saving_status&quot; to &quot;saving...&quot;,&#10;            &quot;search_error_no_token&quot; to &quot;error: no token&quot;,&#10;            &quot;search_unsave&quot; to &quot;unsave&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;youtube results&quot;,&#10;            &quot;search_load_more&quot; to &quot;load more&quot;,&#10;            &quot;search_error_getting_track&quot; to &quot;Error getting track&quot;,&#10;            &quot;search_error_getting_playlist&quot; to &quot;Error getting playlist&quot;,&#10;            &quot;search_error_getting_album&quot; to &quot;Error getting album&quot;,&#10;            &quot;search_error_getting_artist&quot; to &quot;Error getting artist&quot;,&#10;            &quot;search_error_processing_qr&quot; to &quot;Error processing QR&quot;,&#10;            &quot;search_adding_to_playlist&quot; to &quot;adding song to playlist&quot;,&#10;&#10;            // Player&#10;            &quot;now_playing&quot; to &quot;now playing&quot;,&#10;            &quot;play&quot; to &quot;play&quot;,&#10;            &quot;pause&quot; to &quot;pause&quot;,&#10;            &quot;next&quot; to &quot;next&quot;,&#10;            &quot;previous&quot; to &quot;previous&quot;,&#10;            &quot;repeat&quot; to &quot;repeat&quot;,&#10;            &quot;shuffle&quot; to &quot;shuffle&quot;,&#10;&#10;            // ADDITIONAL KEYS (ENGLISH)&#10;            &quot;connected_successfully&quot; to &quot;Connected successfully&quot;,&#10;            &quot;token_exchange_failed&quot; to &quot;Token exchange failed&quot;,&#10;            &quot;cancelled_by_user&quot; to &quot;Cancelled by user&quot;,&#10;            &quot;error_obtaining_audio&quot; to &quot;Could not obtain audio&quot;,&#10;            &quot;error_prefix&quot; to &quot;Error: &quot;,&#10;&#10;            // Playlist actions and dialogs&#10;            &quot;btn_start&quot; to &quot;&lt;start&gt;&quot;,&#10;            &quot;btn_stop&quot; to &quot;&lt;stop&gt;&quot;,&#10;            &quot;btn_rand&quot; to &quot;&lt;rand&gt;&quot;,&#10;            &quot;btn_share&quot; to &quot;&lt;share&gt;&quot;,&#10;            &quot;btn_save&quot; to &quot;&lt;save&gt;&quot;,&#10;            &quot;btn_edit&quot; to &quot;&lt;edit&gt;&quot;,&#10;            &quot;btn_delete&quot; to &quot;&lt;delete&gt;&quot;,&#10;            &quot;creating&quot; to &quot;&lt;creating...&gt;&quot;,&#10;            &quot;create&quot; to &quot;&lt;create&gt;&quot;,&#10;            &quot;delete_playlist_title&quot; to &quot;Delete playlist&quot;,&#10;            &quot;delete_playlist_confirm&quot; to &quot;Are you sure you want to delete '%s'? This action cannot be undone.&quot;,&#10;            &quot;unsaved_changes_title&quot; to &quot;Unsaved changes&quot;,&#10;            &quot;unsaved_changes_text&quot; to &quot;You have unsaved changes. Are you sure you want to exit?&quot;,&#10;            &quot;exit_label&quot; to &quot;Exit&quot;,&#10;            &quot;cancel_label&quot; to &quot;Cancel&quot;,&#10;            &quot;delete_label&quot; to &quot;Delete&quot;,&#10;&#10;            // SongListItem&#10;            &quot;add_to_playlist&quot; to &quot;add to playlist&quot;,&#10;            &quot;add_to_queue&quot; to &quot;add to queue&quot;,&#10;            &quot;share&quot; to &quot;share&quot;,&#10;            &quot;add_to_liked_songs&quot; to &quot;add to liked songs&quot;,&#10;            &quot;remove_from_liked_songs&quot; to &quot;remove from liked songs&quot;,&#10;            &quot;download&quot; to &quot;download&quot;,&#10;            &quot;error_fetching_track_info&quot; to &quot;Error fetching track info&quot;,&#10;            &quot;spotify_token_unavailable&quot; to &quot;Spotify token unavailable&quot;,&#10;            &quot;error_generic&quot; to &quot;Error&quot;,&#10;            &quot;album_colon&quot; to &quot;Album: %s&quot;,&#10;            &quot;release_colon&quot; to &quot;Release: %s&quot;,&#10;            &quot;duration_colon&quot; to &quot;Duration: %s&quot;,&#10;            &quot;not_available&quot; to &quot;N/A&quot;,&#10;            &quot;error_loading_playlists&quot; to &quot;Error loading playlists&quot;,&#10;            &quot;track_already_downloaded&quot; to &quot;Track already downloaded&quot;,&#10;            &quot;loading_playlists&quot; to &quot;loading playlists...&quot;,&#10;            &quot;track_added_successfully&quot; to &quot;Track added successfully!&quot;,&#10;            &quot;no_playlists_found&quot; to &quot;No playlists found&quot;,&#10;&#10;        ),&#10;&#10;        // CATALÀ&#10;        &quot;català&quot; to mapOf(&#10;            // Config Screen&#10;            &quot;config_title&quot; to &quot;plyr_configuració&quot;,&#10;            &quot;theme&quot; to &quot;&gt; tema&quot;,&#10;            &quot;theme_dark&quot; to &quot;fosc&quot;,&#10;            &quot;theme_light&quot; to &quot;clar&quot;,&#10;            &quot;search_engine&quot; to &quot;&gt; motor_cerca&quot;,&#10;            &quot;search_spotify&quot; to &quot;spotify&quot;,&#10;            &quot;search_youtube&quot; to &quot;youtube&quot;,&#10;            &quot;audio_quality&quot; to &quot;&gt; qualitat_audio&quot;,&#10;            &quot;quality_low&quot; to &quot;baixa&quot;,&#10;            &quot;quality_med&quot; to &quot;mitjana&quot;,&#10;            &quot;quality_high&quot; to &quot;alta&quot;,&#10;            &quot;language&quot; to &quot;&gt; idioma&quot;,&#10;            &quot;lang_spanish&quot; to &quot;es&quot;,&#10;            &quot;lang_english&quot; to &quot;en&quot;,&#10;            &quot;lang_catalan&quot; to &quot;ca&quot;,&#10;            &quot;lang_japanese&quot; to &quot;ja&quot;,&#10;            &quot;info&quot; to &quot;&gt; info&quot;,&#10;            &quot;info_text&quot; to &quot;    ● no piratejis música!\n    ● Canvia motor amb yt: / sp:&quot;,&#10;            &quot;sptfy_status&quot; to &quot;&gt; estat_sptfy&quot;,&#10;            &quot;client&quot; to &quot;    ● client:&quot;,&#10;            &quot;api&quot; to &quot;    ● api:&quot;,&#10;            &quot;connected&quot; to &quot;connectat&quot;,&#10;            &quot;disconnected&quot; to &quot;desconnectat&quot;,&#10;            &quot;configured&quot; to &quot;configurat&quot;,&#10;            &quot;not_configurat&quot; to &quot;no_configurat&quot;,&#10;            &quot;credentials_required&quot; to &quot;credencials requerides&quot;,&#10;            &quot;configure_credentials_first&quot; to &quot;configura les credencials primer&quot;,&#10;            &quot;opening_browser&quot; to &quot;obrint_navegador...&quot;,&#10;            &quot;check_browser&quot; to &quot;comprova_navegador&quot;,&#10;            &quot;error_starting_oauth&quot; to &quot;error_iniciant_oauth&quot;,&#10;            &quot;client_id&quot; to &quot;      client_id:&quot;,&#10;            &quot;client_secret&quot; to &quot;      client_secret:&quot;,&#10;            &quot;enter_client_id&quot; to &quot;introdueix el teu spotify client id&quot;,&#10;            &quot;enter_client_secret&quot; to &quot;introdueix el teu spotify client secret&quot;,&#10;            &quot;how_to_get_credentials&quot; to &quot;      &gt; com obtenir credencials api spotify:&quot;,&#10;            &quot;instruction_1&quot; to &quot;1. ves a https://developer.spotify.com/dashboard&quot;,&#10;            &quot;instruction_2&quot; to &quot;2. inicia sessió amb el teu compte spotify&quot;,&#10;            &quot;instruction_3&quot; to &quot;3. clica 'create app'&quot;,&#10;            &quot;instruction_4&quot; to &quot;4. omple el nom app (ex., 'plyr mobile')&quot;,&#10;            &quot;instruction_5&quot; to &quot;5. estableix redirect uri: 'plyr://spotify/callback'&quot;,&#10;            &quot;instruction_6&quot; to &quot;6. selecciona 'mobile' i 'web api'&quot;,&#10;            &quot;instruction_7&quot; to &quot;7. clica 'save'&quot;,&#10;            &quot;instruction_8&quot; to &quot;8. copia client id i client secret&quot;,&#10;            &quot;instruction_9&quot; to &quot;9. enganxa'ls als camps de dalt&quot;,&#10;            &quot;note_local_storage&quot; to &quot;      nota: aquestes credencials es guarden localment&quot;,&#10;&#10;            // Main Screen&#10;            &quot;plyr_title&quot; to &quot;$ plyr&quot;,&#10;            &quot;search_hint&quot; to &quot;cercar...&quot;,&#10;            &quot;no_results&quot; to &quot;no s'han trobat resultats&quot;,&#10;            &quot;loading&quot; to &quot;carregant...&quot;,&#10;&#10;            // Home Screen&#10;            &quot;home_search&quot; to &quot;cercar&quot;,&#10;            &quot;home_playlists&quot; to &quot;llistes&quot;,&#10;            &quot;home_queue&quot; to &quot;cua&quot;,&#10;            &quot;home_local&quot; to &quot;local&quot;,&#10;            &quot;home_settings&quot; to &quot;ajustos&quot;,&#10;            &quot;exit_message&quot; to &quot;Prem de nou per sortir&quot;,&#10;&#10;            // Search Screen&#10;            &quot;search_title&quot; to &quot;plyr_cercar&quot;,&#10;            &quot;search_placeholder&quot; to &quot;cercar música...&quot;,&#10;            &quot;search_loading&quot; to &quot;carregant...&quot;,&#10;            &quot;search_no_results&quot; to &quot;no s'han trobat resultats&quot;,&#10;            &quot;search_error&quot; to &quot;error&quot;,&#10;            &quot;search_spotify_not_connected&quot; to &quot;Spotify no està connectat&quot;,&#10;            &quot;search_token_not_available&quot; to &quot;Token de Spotify no disponible&quot;,&#10;            &quot;search_engine_not_recognized&quot; to &quot;Motor de cerca no reconegut&quot;,&#10;            &quot;search_error_loading_tracks&quot; to &quot;Error carregant cançons&quot;,&#10;            &quot;search_loading_tracks&quot; to &quot;carregant cançons...&quot;,&#10;            &quot;search_tracks&quot; to &quot;cançons&quot;,&#10;            &quot;search_albums&quot; to &quot;àlbums&quot;,&#10;            &quot;search_artists&quot; to &quot;artistes&quot;,&#10;            &quot;search_playlists&quot; to &quot;llistes&quot;,&#10;            &quot;search_videos&quot; to &quot;vídeos&quot;,&#10;            &quot;search_youtube_playlists&quot; to &quot;llistes youtube&quot;,&#10;            &quot;search_start&quot; to &quot;iniciar&quot;,&#10;            &quot;search_random&quot; to &quot;aleatori&quot;,&#10;            &quot;search_save&quot; to &quot;desar&quot;,&#10;            &quot;search_share&quot; to &quot;compartir&quot;,&#10;            &quot;search_saved&quot; to &quot;desat&quot;,&#10;            &quot;search_error_saving&quot; to &quot;error al desar&quot;,&#10;            &quot;search_followers&quot; to &quot;seguidors&quot;,&#10;            &quot;search_monthly_listeners&quot; to &quot;oients mensuals&quot;,&#10;            &quot;search_scan_qr&quot; to &quot;qr&quot;,&#10;            &quot;playlist_cover&quot; to &quot;Portada de la playlist&quot;,&#10;            &quot;artist_image&quot; to &quot;Imatge de l'artista&quot;,&#10;            &quot;search_query_empty_after_prefix&quot; to &quot;Querry buida després del prefix&quot;,&#10;            &quot;album_cover&quot; to &quot;Portada del album&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;resultats de youtube&quot;,&#10;            &quot;search_load_more&quot; to &quot;carregar més&quot;,&#10;&#10;            // Search Screen - Additional translations&#10;            &quot;search_select_playlist&quot; to &quot;Seleccionar playlist&quot;,&#10;            &quot;search_cancel&quot; to &quot;Cancelar&quot;,&#10;            &quot;search_removing&quot; to &quot;eliminant...&quot;,&#10;            &quot;search_removed&quot; to &quot;eliminat!&quot;,&#10;            &quot;search_saving_status&quot; to &quot;desant...&quot;,&#10;            &quot;search_error_no_token&quot; to &quot;error: no hi ha token&quot;,&#10;            &quot;search_unsave&quot; to &quot;desguardar&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;resultats youtube&quot;,&#10;            &quot;search_load_more&quot; to &quot;carregar més&quot;,&#10;            &quot;search_error_getting_track&quot; to &quot;Error obtenint track&quot;,&#10;            &quot;search_error_getting_playlist&quot; to &quot;Error obtenint playlist&quot;,&#10;            &quot;search_error_getting_album&quot; to &quot;Error obtenint àlbum&quot;,&#10;            &quot;search_error_getting_artist&quot; to &quot;Error obtenint artista&quot;,&#10;            &quot;search_error_processing_qr&quot; to &quot;Error processant QR&quot;,&#10;            &quot;search_adding_to_playlist&quot; to &quot;afegint cançó a la playlist&quot;,&#10;&#10;            // Player&#10;            &quot;now_playing&quot; to &quot;reproduint ara&quot;,&#10;            &quot;play&quot; to &quot;reproduir&quot;,&#10;            &quot;pause&quot; to &quot;pausa&quot;,&#10;            &quot;next&quot; to &quot;següent&quot;,&#10;            &quot;previous&quot; to &quot;anterior&quot;,&#10;            &quot;repeat&quot; to &quot;repetir&quot;,&#10;            &quot;shuffle&quot; to &quot;aleatori&quot;,&#10;&#10;            // ADDITIONAL KEYS (CATALAN)&#10;            &quot;connected_successfully&quot; to &quot;connectat correctament&quot;,&#10;            &quot;token_exchange_failed&quot; to &quot;intercanvi de token fallit&quot;,&#10;            &quot;cancelled_by_user&quot; to &quot;cancel·lat per l'usuari&quot;,&#10;            &quot;error_obtaining_audio&quot; to &quot;No s'ha pogut obtenir l'àudio&quot;,&#10;            &quot;error_prefix&quot; to &quot;Error: &quot;,&#10;&#10;            &quot;btn_start&quot; to &quot;&lt;start&gt;&quot;,&#10;            &quot;btn_stop&quot; to &quot;&lt;stop&gt;&quot;,&#10;            &quot;btn_rand&quot; to &quot;&lt;rand&gt;&quot;,&#10;            &quot;btn_share&quot; to &quot;&lt;share&gt;&quot;,&#10;            &quot;btn_save&quot; to &quot;&lt;save&gt;&quot;,&#10;            &quot;btn_edit&quot; to &quot;&lt;edit&gt;&quot;,&#10;            &quot;btn_delete&quot; to &quot;&lt;delete&gt;&quot;,&#10;            &quot;creating&quot; to &quot;&lt;creating...&gt;&quot;,&#10;            &quot;create&quot; to &quot;&lt;create&gt;&quot;,&#10;            &quot;delete_playlist_title&quot; to &quot;Eliminar playlist&quot;,&#10;            &quot;delete_playlist_confirm&quot; to &quot;Segur que vols eliminar '%s'? Aquesta acció no es pot desfer.&quot;,&#10;            &quot;unsaved_changes_title&quot; to &quot;Canvis sense desar&quot;,&#10;            &quot;unsaved_changes_text&quot; to &quot;Tens canvis sense desar. Segur que vols sortir?&quot;,&#10;            &quot;exit_label&quot; to &quot;Sortir&quot;,&#10;            &quot;cancel_label&quot; to &quot;Cancel·la&quot;,&#10;            &quot;delete_label&quot; to &quot;Eliminar&quot;,&#10;&#10;            // SongListItem&#10;            &quot;add_to_playlist&quot; to &quot;afegir a playlist&quot;,&#10;            &quot;add_to_queue&quot; to &quot;afegir a cua&quot;,&#10;            &quot;share&quot; to &quot;compartir&quot;,&#10;            &quot;add_to_liked_songs&quot; to &quot;afegir a favorits&quot;,&#10;            &quot;remove_from_liked_songs&quot; to &quot;treure de favorits&quot;,&#10;            &quot;download&quot; to &quot;descarregar&quot;,&#10;            &quot;error_fetching_track_info&quot; to &quot;Error obtenint info del track&quot;,&#10;            &quot;spotify_token_unavailable&quot; to &quot;Token de Spotify no disponible&quot;,&#10;            &quot;error_generic&quot; to &quot;Error&quot;,&#10;            &quot;album_colon&quot; to &quot;Àlbum: %s&quot;,&#10;            &quot;release_colon&quot; to &quot;Llançament: %s&quot;,&#10;            &quot;duration_colon&quot; to &quot;Durada: %s&quot;,&#10;            &quot;not_available&quot; to &quot;N/A&quot;,&#10;            &quot;error_loading_playlists&quot; to &quot;Error carregant playlists&quot;,&#10;            &quot;track_already_downloaded&quot; to &quot;Track ja descarregat&quot;,&#10;            &quot;loading_playlists&quot; to &quot;carregant playlists...&quot;,&#10;            &quot;track_added_successfully&quot; to &quot;Cançó afegida correctament!&quot;,&#10;            &quot;no_playlists_found&quot; to &quot;No s'han trobat playlists&quot;,&#10;&#10;        ),&#10;        // JAPANESE&#10;        &quot;日本語&quot; to mapOf(&#10;            // Config Screen&#10;            &quot;config_title&quot; to &quot;plyr_設定&quot;,&#10;            &quot;theme&quot; to &quot;&gt; テーマ&quot;,&#10;            &quot;theme_dark&quot; to &quot;ダーク&quot;,&#10;            &quot;theme_light&quot; to &quot;ライト&quot;,&#10;            &quot;search_engine&quot; to &quot;&gt; 検索エンジン&quot;,&#10;            &quot;search_spotify&quot; to &quot;spotify&quot;,&#10;            &quot;search_youtube&quot; to &quot;youtube&quot;,&#10;            &quot;audio_quality&quot; to &quot;&gt; 音質&quot;,&#10;            &quot;quality_low&quot; to &quot;低&quot;,&#10;            &quot;quality_med&quot; to &quot;中&quot;,&#10;            &quot;quality_high&quot; to &quot;高&quot;,&#10;            &quot;language&quot; to &quot;&gt; 言語&quot;,&#10;            &quot;lang_spanish&quot; to &quot;es&quot;,&#10;            &quot;lang_english&quot; to &quot;en&quot;,&#10;            &quot;lang_catalan&quot; to &quot;ca&quot;,&#10;            &quot;lang_japanese&quot; to &quot;ja&quot;,&#10;            &quot;info&quot; to &quot;&gt; 情報&quot;,&#10;            &quot;info_text&quot; to &quot;    ● 音楽を違法にダウンロードしないでください！\n    ● エンジンを変更するには yt: / sp: を使用&quot;,&#10;            &quot;sptfy_status&quot; to &quot;&gt; sptfy_ステータス&quot;,&#10;            &quot;client&quot; to &quot;    ● クライアント:&quot;,&#10;            &quot;api&quot; to &quot;    ● API:&quot;,&#10;            &quot;connected&quot; to &quot;接続済み&quot;,&#10;            &quot;disconnected&quot; to &quot;未接続&quot;,&#10;            &quot;configured&quot; to &quot;設定済み&quot;,&#10;            &quot;not_configured&quot; to &quot;未設定&quot;,&#10;            &quot;credentials_required&quot; to &quot;認証情報が必要です&quot;,&#10;            &quot;configure_credentials_first&quot; to &quot;先に認証情報を設定してください&quot;,&#10;            &quot;opening_browser&quot; to &quot;ブラウザを開いています...&quot;,&#10;            &quot;check_browser&quot; to &quot;ブラウザを確認してください&quot;,&#10;            &quot;error_starting_oauth&quot; to &quot;OAuth の開始エラー&quot;,&#10;            &quot;client_id&quot; to &quot;      クライアントID:&quot;,&#10;            &quot;client_secret&quot; to &quot;      クライアントシークレット:&quot;,&#10;            &quot;enter_client_id&quot; to &quot;Spotify クライアントIDを入力してください&quot;,&#10;            &quot;enter_client_secret&quot; to &quot;Spotify クライアントシークレットを入力してください&quot;,&#10;            &quot;how_to_get_credentials&quot; to &quot;      &gt; Spotify API の認証情報を取得する方法:&quot;,&#10;            &quot;instruction_1&quot; to &quot;1. https://developer.spotify.com/dashboard にアクセス&quot;,&#10;            &quot;instruction_2&quot; to &quot;2. Spotify アカウントでログイン&quot;,&#10;            &quot;instruction_3&quot; to &quot;3. 「アプリを作成」をクリック&quot;,&#10;            &quot;instruction_4&quot; to &quot;4. アプリ名を入力 (例: 'plyr mobile')&quot;,&#10;            &quot;instruction_5&quot; to &quot;5. リダイレクトURIを設定: 'plyr://spotify/callback'&quot;,&#10;            &quot;instruction_6&quot; to &quot;6. 「mobile」と「web api」を選択&quot;,&#10;            &quot;instruction_7&quot; to &quot;7. 「保存」をクリック&quot;,&#10;            &quot;instruction_8&quot; to &quot;8. client_id と client_secret をコピー&quot;,&#10;            &quot;instruction_9&quot; to &quot;9. 上のフィールドに貼り付ける&quot;,&#10;            &quot;note_local_storage&quot; to &quot;      注: 認証情報はローカルに保存されます&quot;,&#10;&#10;            // Main Screen&#10;            &quot;plyr_title&quot; to &quot;$ plyr&quot;,&#10;            &quot;search_hint&quot; to &quot;検索...&quot;,&#10;            &quot;no_results&quot; to &quot;結果が見つかりません&quot;,&#10;            &quot;loading&quot; to &quot;読み込み中...&quot;,&#10;&#10;            // Home Screen&#10;            &quot;home_search&quot; to &quot;検索&quot;,&#10;            &quot;home_playlists&quot; to &quot;プレイリスト&quot;,&#10;            &quot;home_queue&quot; to &quot;キュー&quot;,&#10;            &quot;home_local&quot; to &quot;ローカル&quot;,&#10;            &quot;home_settings&quot; to &quot;設定&quot;,&#10;            &quot;exit_message&quot; to &quot;もう一度押すと終了します&quot;,&#10;&#10;            // Search Screen&#10;            &quot;search_title&quot; to &quot;plyr_検索&quot;,&#10;            &quot;search_placeholder&quot; to &quot;音楽を検索...&quot;,&#10;            &quot;search_loading&quot; to &quot;読み込み中...&quot;,&#10;            &quot;search_no_results&quot; to &quot;結果が見つかりません&quot;,&#10;            &quot;search_error&quot; to &quot;エラー&quot;,&#10;            &quot;search_spotify_not_connected&quot; to &quot;Spotify が接続されていません&quot;,&#10;            &quot;search_token_not_available&quot; to &quot;Spotify トークンが利用できません&quot;,&#10;            &quot;search_engine_not_recognized&quot; to &quot;検索エンジンが認識されません&quot;,&#10;            &quot;search_error_loading_tracks&quot; to &quot;曲の読み込みエラー&quot;,&#10;            &quot;search_loading_tracks&quot; to &quot;曲を読み込み中...&quot;,&#10;            &quot;search_tracks&quot; to &quot;曲&quot;,&#10;            &quot;search_albums&quot; to &quot;アルバム&quot;,&#10;            &quot;search_artists&quot; to &quot;アーティスト&quot;,&#10;            &quot;search_playlists&quot; to &quot;プレイリスト&quot;,&#10;            &quot;search_videos&quot; to &quot;動画&quot;,&#10;            &quot;search_youtube_playlists&quot; to &quot;YouTube プレイリスト&quot;,&#10;            &quot;search_start&quot; to &quot;開始&quot;,&#10;            &quot;search_random&quot; to &quot;ランダム&quot;,&#10;            &quot;search_save&quot; to &quot;保存&quot;,&#10;            &quot;search_share&quot; to &quot;共有&quot;,&#10;            &quot;search_saved&quot; to &quot;保存しました&quot;,&#10;            &quot;search_error_saving&quot; to &quot;保存中にエラー&quot;,&#10;            &quot;search_followers&quot; to &quot;フォロワー&quot;,&#10;            &quot;search_monthly_listeners&quot; to &quot;月間リスナー&quot;,&#10;            &quot;search_scan_qr&quot; to &quot;QR&quot;,&#10;            &quot;playlist_cover&quot; to &quot;プレイリストのカバー&quot;,&#10;            &quot;artist_image&quot; to &quot;アーティスト画像&quot;,&#10;            &quot;search_query_empty_after_prefix&quot; to &quot;プレフィックス後のクエリが空です&quot;,&#10;            &quot;album_cover&quot; to &quot;アルバムカバー&quot;,&#10;            &quot;search_youtube_results&quot; to &quot;YouTube の結果&quot;,&#10;            &quot;search_load_more&quot; to &quot;もっと読み込む&quot;,&#10;&#10;            // Search Screen - Additional&#10;            &quot;search_select_playlist&quot; to &quot;プレイリストを選択&quot;,&#10;            &quot;search_cancel&quot; to &quot;キャンセル&quot;,&#10;            &quot;search_removing&quot; to &quot;削除中...&quot;,&#10;            &quot;search_removed&quot; to &quot;削除しました！&quot;,&#10;            &quot;search_saving_status&quot; to &quot;保存中...&quot;,&#10;            &quot;search_error_no_token&quot; to &quot;エラー: トークンがありません&quot;,&#10;            &quot;search_unsave&quot; to &quot;保存を解除&quot;,&#10;            &quot;search_error_getting_track&quot; to &quot;曲の取得エラー&quot;,&#10;            &quot;search_error_getting_playlist&quot; to &quot;プレイリストの取得エラー&quot;,&#10;            &quot;search_error_getting_album&quot; to &quot;アルバムの取得エラー&quot;,&#10;            &quot;search_error_getting_artist&quot; to &quot;アーティストの取得エラー&quot;,&#10;            &quot;search_error_processing_qr&quot; to &quot;QR の処理中にエラー&quot;,&#10;            &quot;search_adding_to_playlist&quot; to &quot;プレイリストに曲を追加中...&quot;,&#10;&#10;            // Player&#10;            &quot;now_playing&quot; to &quot;再生中&quot;,&#10;            &quot;play&quot; to &quot;再生&quot;,&#10;            &quot;pause&quot; to &quot;一時停止&quot;,&#10;            &quot;next&quot; to &quot;次へ&quot;,&#10;            &quot;previous&quot; to &quot;前へ&quot;,&#10;            &quot;repeat&quot; to &quot;リピート&quot;,&#10;            &quot;shuffle&quot; to &quot;シャッフル&quot;,&#10;&#10;            // Playlist actions and dialogs&#10;            &quot;btn_start&quot; to &quot;&lt;開始&gt;&quot;,&#10;            &quot;btn_stop&quot; to &quot;&lt;停止&gt;&quot;,&#10;            &quot;btn_rand&quot; to &quot;&lt;ランダム&gt;&quot;,&#10;            &quot;btn_share&quot; to &quot;&lt;共有&gt;&quot;,&#10;            &quot;btn_save&quot; to &quot;&lt;保存&gt;&quot;,&#10;            &quot;btn_edit&quot; to &quot;&lt;編集&gt;&quot;,&#10;            &quot;btn_delete&quot; to &quot;&lt;削除&gt;&quot;,&#10;            &quot;creating&quot; to &quot;&lt;作成中...&gt;&quot;,&#10;            &quot;create&quot; to &quot;&lt;作成&gt;&quot;,&#10;            &quot;delete_playlist_title&quot; to &quot;プレイリストを削除&quot;,&#10;            &quot;delete_playlist_confirm&quot; to &quot;「%s」を削除してもよろしいですか？この操作は元に戻せません。&quot;,&#10;            &quot;unsaved_changes_title&quot; to &quot;未保存の変更&quot;,&#10;            &quot;unsaved_changes_text&quot; to &quot;未保存の変更があります。本当に終了しますか？&quot;,&#10;            &quot;exit_label&quot; to &quot;終了&quot;,&#10;            &quot;cancel_label&quot; to &quot;キャンセル&quot;,&#10;            &quot;delete_label&quot; to &quot;削除&quot;,&#10;&#10;            // SongListItem&#10;            &quot;add_to_playlist&quot; to &quot;プレイリストに追加&quot;,&#10;            &quot;add_to_queue&quot; to &quot;キューに追加&quot;,&#10;            &quot;share&quot; to &quot;共有&quot;,&#10;            &quot;add_to_liked_songs&quot; to &quot;お気に入りに追加&quot;,&#10;            &quot;remove_from_liked_songs&quot; to &quot;お気に入りから削除&quot;,&#10;            &quot;download&quot; to &quot;ダウンロード&quot;,&#10;            &quot;error_fetching_track_info&quot; to &quot;トラック情報の取得エラー&quot;,&#10;            &quot;spotify_token_unavailable&quot; to &quot;Spotify トークンが利用できません&quot;,&#10;            &quot;error_generic&quot; to &quot;エラー&quot;,&#10;            &quot;album_colon&quot; to &quot;アルバム: %s&quot;,&#10;            &quot;release_colon&quot; to &quot;リリース: %s&quot;,&#10;            &quot;duration_colon&quot; to &quot;再生時間: %s&quot;,&#10;            &quot;not_available&quot; to &quot;N/A&quot;,&#10;            &quot;error_loading_playlists&quot; to &quot;プレイリストの読み込みエラー&quot;,&#10;            &quot;track_already_downloaded&quot; to &quot;トラックは既にダウンロードされています&quot;,&#10;            &quot;loading_playlists&quot; to &quot;プレイリストを読み込み中...&quot;,&#10;            &quot;track_added_successfully&quot; to &quot;トラックが正常に追加されました！&quot;,&#10;            &quot;no_playlists_found&quot; to &quot;プレイリストが見つかりません&quot;,&#10;        ),&#10;&#10;        )&#10;&#10;    /**&#10;     * Obtiene una traducción para una clave específica según el idioma actual&#10;     * @param context Contexto de la aplicación&#10;     * @param key Clave de la traducción&#10;     * @return Traducción correspondiente o la clave si no existe&#10;     */&#10;    fun get(context: Context, key: String): String {&#10;        val language = Config.getLanguage(context)&#10;        return translations[language]?.get(key) ?: key&#10;    }&#10;&#10;    /**&#10;     * Obtiene una traducción para una clave específica según un idioma específico&#10;     * @param language Idioma deseado&#10;     * @param key Clave de la traducción&#10;     * @return Traducción correspondiente o la clave si no existe&#10;     */&#10;    fun get(language: String, key: String): String {&#10;        return translations[language]?.get(key) ?: key&#10;    }&#10;&#10;    /**&#10;     * Verifica si existe una traducción para una clave específica&#10;     * @param context Contexto de la aplicación&#10;     * @param key Clave de la traducción&#10;     * @return true si existe, false en caso contrario&#10;     */&#10;    fun exists(context: Context, key: String): Boolean {&#10;        val language = Config.getLanguage(context)&#10;        return translations[language]?.containsKey(key) ?: false&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>