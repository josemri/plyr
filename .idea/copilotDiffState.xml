<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/database/PlaylistLocalRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/database/PlaylistLocalRepository.kt" />
              <option name="originalContent" value="package com.plyr.database&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.asLiveData&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.utils.SpotifyTokenManager&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import android.util.Log&#10;&#10;/**&#10; * PlaylistLocalRepository - Repositorio para gestión local de playlists y tracks&#10; * &#10; * Esta clase maneja:&#10; * - Operaciones CRUD sobre playlists y tracks en base de datos local&#10; * - Sincronización automática con Spotify&#10; * - Caché inteligente para evitar consultas innecesarias&#10; * - Observación de cambios mediante LiveData/Flow&#10; * - Gestión de YouTube IDs para tracks&#10; * &#10; * Proporciona una capa de abstracción entre la UI y la base de datos,&#10; * asegurando que los datos estén siempre actualizados y sincronizados.&#10; */&#10;class PlaylistLocalRepository(context: Context) {&#10;&#10;    // === PROPIEDADES ===&#10;&#10;    /** Base de datos local para playlists y tracks */&#10;    private val database = PlaylistDatabase.getDatabase(context)&#10;&#10;    /** DAO para operaciones sobre playlists */&#10;    private val playlistDao = database.playlistDao()&#10;&#10;    /** DAO para operaciones sobre tracks */&#10;    private val trackDao = database.trackDao()&#10;&#10;    /** Contexto de aplicación para operaciones persistentes */&#10;    private val appContext = context.applicationContext&#10;&#10;    // === CONSTANTES ===&#10;&#10;    companion object {&#10;        private const val TAG = &quot;PlaylistLocalRepo&quot;&#10;&#10;        /** Intervalo de sincronización automática (24 horas) */&#10;        private const val SYNC_INTERVAL = 24 * 60 * 60 * 1000L&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - OBSERVACIÓN DE DATOS ===&#10;&#10;    /**&#10;     * Observa todas las playlists locales mediante LiveData.&#10;     * Los cambios se notifican automáticamente a los observadores.&#10;     *&#10;     * @return LiveData que emite la lista de playlists cuando cambian&#10;     */&#10;    fun getAllPlaylistsLiveData(): LiveData&lt;List&lt;PlaylistEntity&gt;&gt; {&#10;        return playlistDao.getAllPlaylists().asLiveData()&#10;    }&#10;&#10;    /**&#10;     * Observa los tracks de una playlist específica.&#10;     *&#10;     * @param playlistId ID de la playlist a observar&#10;     * @return LiveData que emite los tracks cuando cambian&#10;     */&#10;    fun getTracksByPlaylistLiveData(playlistId: String): LiveData&lt;List&lt;TrackEntity&gt;&gt; {&#10;        return trackDao.getTracksByPlaylist(playlistId).asLiveData()&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - SINCRONIZACIÓN AUTOMÁTICA ===&#10;&#10;    /**&#10;     * Obtiene todas las playlists con sincronización automática.&#10;     * Verifica si es necesario sincronizar con Spotify y lo hace automáticamente.&#10;     *&#10;     * @return Lista de playlists actualizadas&#10;     */&#10;    suspend fun getPlaylistsWithAutoSync(): List&lt;PlaylistEntity&gt; = withContext(Dispatchers.IO) {&#10;        Log.d(TAG, &quot;Obteniendo playlists con sincronización automática&quot;)&#10;&#10;        val localPlaylists = playlistDao.getAllPlaylistsSync()&#10;&#10;        // Verificar si necesita sincronización&#10;        val shouldSync = shouldSyncPlaylists(localPlaylists)&#10;&#10;        return@withContext if (shouldSync) {&#10;            Log.d(TAG, &quot;Iniciando sincronización de playlists&quot;)&#10;            syncPlaylistsFromSpotify()&#10;            playlistDao.getAllPlaylistsSync()&#10;        } else {&#10;            Log.d(TAG, &quot;Las playlists están actualizadas&quot;)&#10;            localPlaylists&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Obtiene los tracks de una playlist con sincronización automática.&#10;     * Verifica si es necesario sincronizar con Spotify y lo hace automáticamente.&#10;     *&#10;     * @param playlistId ID de la playlist&#10;     * @return Lista de tracks actualizados&#10;     */&#10;    suspend fun getTracksWithAutoSync(playlistId: String): List&lt;TrackEntity&gt; =&#10;        withContext(Dispatchers.IO) {&#10;            Log.d(TAG, &quot;Obteniendo tracks para playlist $playlistId con sincronización automática&quot;)&#10;&#10;            val localTracks = trackDao.getTracksByPlaylistSync(playlistId)&#10;            val playlist = playlistDao.getPlaylistById(playlistId)&#10;&#10;            // Verificar si necesita sincronización&#10;            val shouldSync = shouldSyncTracks(playlist)&#10;&#10;            if (shouldSync) {&#10;                Log.d(TAG, &quot;Iniciando sincronización de tracks para playlist $playlistId&quot;)&#10;                syncTracksFromSpotify(playlistId)&#10;                trackDao.getTracksByPlaylistSync(playlistId)&#10;            } else {&#10;                Log.d(TAG, &quot;Los tracks están actualizados&quot;)&#10;                localTracks&#10;            }&#10;        }&#10;&#10;    // === MÉTODOS PÚBLICOS - SINCRONIZACIÓN MANUAL ===&#10;&#10;    /**&#10;     * Sincroniza todas las playlists desde Spotify de forma manual.&#10;     *&#10;     * @return true si la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun syncPlaylistsFromSpotify(): Boolean = withContext(Dispatchers.IO) {&#10;        try {&#10;            Log.d(TAG, &quot;Sincronizando playlists desde Spotify&quot;)&#10;&#10;            val accessToken = getValidAccessToken()&#10;            if (accessToken == null) {&#10;                Log.e(TAG, &quot;No se pudo obtener token de acceso válido&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            // Obtener playlists del usuario con paginación&#10;            var success = false&#10;            SpotifyRepository.getUserPlaylists(accessToken) { playlists, error -&gt;&#10;                if (error != null) {&#10;                    Log.e(TAG, &quot;Error al obtener playlists: $error&quot;)&#10;                } else if (playlists != null) {&#10;                    Log.d(TAG, &quot;Recibidas ${playlists.size} playlists de Spotify&quot;)&#10;&#10;                    // Convertir y guardar playlists&#10;                    val playlistEntities = playlists.map { playlist -&gt;&#10;                        PlaylistEntity(&#10;                            spotifyId = playlist.id,&#10;                            name = playlist.name,&#10;                            description = playlist.description,&#10;                            trackCount = playlist.tracks?.total ?: 0,&#10;                            imageUrl = playlist.getImageUrl(),&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Usar runBlocking dentro del callback para operaciones suspend&#10;                    kotlinx.coroutines.runBlocking {&#10;                        playlistDao.insertPlaylists(playlistEntities)&#10;                        Log.d(&#10;                            TAG,&#10;                            &quot;Guardadas ${playlistEntities.size} playlists en base de datos local&quot;&#10;                        )&#10;                    }&#10;                    success = true&#10;                }&#10;            }&#10;&#10;            // Esperar a que termine el callback&#10;            var attempts = 0&#10;            while (!success &amp;&amp; attempts &lt; 50) { // 5 segundos máximo&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            success&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error en sincronización de playlists&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sincroniza los tracks de una playlist específica desde Spotify.&#10;     *&#10;     * @param playlistId ID de la playlist a sincronizar&#10;     * @return true si la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun syncTracksFromSpotify(playlistId: String): Boolean = withContext(Dispatchers.IO) {&#10;        try {&#10;            Log.d(TAG, &quot;Sincronizando tracks para playlist $playlistId desde Spotify&quot;)&#10;&#10;            val accessToken = getValidAccessToken()&#10;            if (accessToken == null) {&#10;                Log.e(TAG, &quot;No se pudo obtener token de acceso válido&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            var success = false&#10;            SpotifyRepository.getPlaylistTracks(accessToken, playlistId) { tracks, error -&gt;&#10;                if (error != null) {&#10;                    Log.e(TAG, &quot;Error al obtener tracks: $error&quot;)&#10;                } else if (tracks != null) {&#10;                    Log.d(&#10;                        TAG,&#10;                        &quot;Recibidos ${tracks.size} tracks de Spotify para playlist $playlistId&quot;&#10;                    )&#10;&#10;                    // Convertir y guardar tracks&#10;                    val trackEntities = tracks.mapIndexedNotNull { index, playlistTrack -&gt;&#10;                        val track = playlistTrack.track&#10;                        if (track != null) {&#10;                            TrackEntity(&#10;                                id = &quot;${playlistId}_${track.id}&quot;,&#10;                                playlistId = playlistId,&#10;                                spotifyTrackId = track.id,&#10;                                name = track.name,&#10;                                artists = track.getArtistNames(),&#10;                                youtubeVideoId = null, // Se llenará después si es necesario&#10;                                position = index,&#10;                                lastSyncTime = System.currentTimeMillis()&#10;                            )&#10;                        } else {&#10;                            null&#10;                        }&#10;                    }&#10;&#10;                    // Usar runBlocking dentro del callback&#10;                    kotlinx.coroutines.runBlocking {&#10;                        // Eliminar tracks antiguos de esta playlist&#10;                        trackDao.deleteTracksByPlaylist(playlistId)&#10;                        // Insertar nuevos tracks&#10;                        trackDao.insertTracks(trackEntities)&#10;&#10;                        // Actualizar tiempo de sincronización de la playlist&#10;                        val playlist = playlistDao.getPlaylistById(playlistId)&#10;                        playlist?.let {&#10;                            playlistDao.updatePlaylist(it.copy(lastSyncTime = System.currentTimeMillis()))&#10;                        }&#10;&#10;                        Log.d(TAG, &quot;Guardados ${trackEntities.size} tracks en base de datos local&quot;)&#10;                    }&#10;                    success = true&#10;                }&#10;            }&#10;&#10;            // Esperar a que termine el callback&#10;            var attempts = 0&#10;            while (!success &amp;&amp; attempts &lt; 50) { // 5 segundos máximo&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            success&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error en sincronización de tracks&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Actualiza el YouTube video ID para un track específico.&#10;     * Permite asociar un video de YouTube con un track de Spotify.&#10;     *&#10;     * @param trackId ID único del track&#10;     * @param youtubeVideoId ID del video de YouTube&#10;     */&#10;    suspend fun updateTrackYoutubeId(trackId: String, youtubeVideoId: String) =&#10;        withContext(Dispatchers.IO) {&#10;            try {&#10;                trackDao.updateYoutubeVideoId(trackId, youtubeVideoId)&#10;                Log.d(TAG, &quot;YouTube ID actualizado para track $trackId: $youtubeVideoId&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;Error actualizando YouTube ID&quot;, e)&#10;            }&#10;        }&#10;&#10;    // === MÉTODOS PRIVADOS - VERIFICACIÓN DE SINCRONIZACIÓN ===&#10;&#10;    /**&#10;     * Verifica si las playlists necesitan sincronización con Spotify.&#10;     *&#10;     * @param localPlaylists Lista de playlists locales&#10;     * @return true si necesita sincronización, false en caso contrario&#10;     */&#10;    private fun shouldSyncPlaylists(localPlaylists: List&lt;PlaylistEntity&gt;): Boolean {&#10;        if (localPlaylists.isEmpty()) {&#10;            Log.d(TAG, &quot;No hay playlists locales, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val oldestSync = localPlaylists.minOfOrNull { it.lastSyncTime } ?: 0L&#10;        val needsSync = (System.currentTimeMillis() - oldestSync) &gt; SYNC_INTERVAL&#10;&#10;        Log.d(TAG, &quot;Verificación de sincronización de playlists: needsSync=$needsSync&quot;)&#10;        return needsSync&#10;    }&#10;&#10;    /**&#10;     * Verifica si los tracks de una playlist necesitan sincronización.&#10;     *&#10;     * @param playlist Entidad de la playlist a verificar&#10;     * @return true si necesita sincronización, false en caso contrario&#10;     */&#10;    private suspend fun shouldSyncTracks(playlist: PlaylistEntity?): Boolean {&#10;        if (playlist == null) {&#10;            Log.d(TAG, &quot;Playlist no encontrada, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val localTracks = trackDao.getTracksByPlaylistSync(playlist.spotifyId)&#10;        if (localTracks.isEmpty()) {&#10;            Log.d(TAG, &quot;No hay tracks locales, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val needsSync = (System.currentTimeMillis() - playlist.lastSyncTime) &gt; SYNC_INTERVAL&#10;        Log.d(TAG, &quot;Verificación de sincronización de tracks: needsSync=$needsSync&quot;)&#10;        return needsSync&#10;    }&#10;&#10;    /**&#10;     * Obtiene un token de acceso válido para Spotify.&#10;     * Usa el nuevo SpotifyTokenManager para renovación automática.&#10;     *&#10;     * @return Token de acceso válido o null si no se pudo obtener&#10;     */&#10;    private suspend fun getValidAccessToken(): String? = withContext(Dispatchers.IO) {&#10;        return@withContext SpotifyTokenManager.getValidAccessToken(appContext)&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - OPERACIONES ESPECIALES ===&#10;&#10;    /**&#10;     * Fuerza una sincronización completa de todas las playlists y tracks.&#10;     * Útil para refrescar completamente los datos locales.&#10;     *&#10;     * @return true si toda la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun forceSyncAll(): Boolean = withContext(Dispatchers.IO) {&#10;        Log.d(TAG, &quot;Forzando sincronización completa&quot;)&#10;        val playlistsSuccess = syncPlaylistsFromSpotify()&#10;&#10;        if (playlistsSuccess) {&#10;            val playlists = playlistDao.getAllPlaylistsSync()&#10;            var allTracksSuccess = true&#10;&#10;            for (playlist in playlists) {&#10;                val tracksSuccess = syncTracksFromSpotify(playlist.spotifyId)&#10;                if (!tracksSuccess) {&#10;                    allTracksSuccess = false&#10;                }&#10;            }&#10;&#10;            return@withContext allTracksSuccess&#10;        }&#10;&#10;        return@withContext false&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.database&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.asLiveData&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.utils.SpotifyTokenManager&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import android.util.Log&#10;&#10;/**&#10; * PlaylistLocalRepository - Repositorio para gestión local de playlists y tracks&#10; * &#10; * Esta clase maneja:&#10; * - Operaciones CRUD sobre playlists y tracks en base de datos local&#10; * - Sincronización automática con Spotify&#10; * - Caché inteligente para evitar consultas innecesarias&#10; * - Observación de cambios mediante LiveData/Flow&#10; * - Gestión de YouTube IDs para tracks&#10; * &#10; * Proporciona una capa de abstracción entre la UI y la base de datos,&#10; * asegurando que los datos estén siempre actualizados y sincronizados.&#10; */&#10;class PlaylistLocalRepository(context: Context) {&#10;&#10;    // === PROPIEDADES ===&#10;&#10;    /** Base de datos local para playlists y tracks */&#10;    private val database = PlaylistDatabase.getDatabase(context)&#10;&#10;    /** DAO para operaciones sobre playlists */&#10;    private val playlistDao = database.playlistDao()&#10;&#10;    /** DAO para operaciones sobre tracks */&#10;    private val trackDao = database.trackDao()&#10;&#10;    /** Contexto de aplicación para operaciones persistentes */&#10;    private val appContext = context.applicationContext&#10;&#10;    // === CONSTANTES ===&#10;&#10;    companion object {&#10;        private const val TAG = &quot;PlaylistLocalRepo&quot;&#10;&#10;        /** Intervalo de sincronización automática (24 horas) */&#10;        private const val SYNC_INTERVAL = 24 * 60 * 60 * 1000L&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - OBSERVACIÓN DE DATOS ===&#10;&#10;    /**&#10;     * Observa todas las playlists locales mediante LiveData.&#10;     * Los cambios se notifican automáticamente a los observadores.&#10;     *&#10;     * @return LiveData que emite la lista de playlists cuando cambian&#10;     */&#10;    fun getAllPlaylistsLiveData(): LiveData&lt;List&lt;PlaylistEntity&gt;&gt; {&#10;        return playlistDao.getAllPlaylists().asLiveData()&#10;    }&#10;&#10;    /**&#10;     * Observa los tracks de una playlist específica.&#10;     *&#10;     * @param playlistId ID de la playlist a observar&#10;     * @return LiveData que emite los tracks cuando cambian&#10;     */&#10;    fun getTracksByPlaylistLiveData(playlistId: String): LiveData&lt;List&lt;TrackEntity&gt;&gt; {&#10;        return trackDao.getTracksByPlaylist(playlistId).asLiveData()&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - SINCRONIZACIÓN AUTOMÁTICA ===&#10;&#10;    /**&#10;     * Obtiene todas las playlists con sincronización automática.&#10;     * Verifica si es necesario sincronizar con Spotify y lo hace automáticamente.&#10;     *&#10;     * @return Lista de playlists actualizadas&#10;     */&#10;    suspend fun getPlaylistsWithAutoSync(): List&lt;PlaylistEntity&gt; = withContext(Dispatchers.IO) {&#10;        Log.d(TAG, &quot;Obteniendo playlists con sincronización automática&quot;)&#10;&#10;        val localPlaylists = playlistDao.getAllPlaylistsSync()&#10;&#10;        // Verificar si necesita sincronización&#10;        val shouldSync = shouldSyncPlaylists(localPlaylists)&#10;&#10;        return@withContext if (shouldSync) {&#10;            Log.d(TAG, &quot;Iniciando sincronización de playlists&quot;)&#10;            syncPlaylistsFromSpotify()&#10;            playlistDao.getAllPlaylistsSync()&#10;        } else {&#10;            Log.d(TAG, &quot;Las playlists están actualizadas&quot;)&#10;            localPlaylists&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Obtiene los tracks de una playlist con sincronización automática.&#10;     * Verifica si es necesario sincronizar con Spotify y lo hace automáticamente.&#10;     *&#10;     * @param playlistId ID de la playlist&#10;     * @return Lista de tracks actualizados&#10;     */&#10;    suspend fun getTracksWithAutoSync(playlistId: String): List&lt;TrackEntity&gt; =&#10;        withContext(Dispatchers.IO) {&#10;            Log.d(TAG, &quot;Obteniendo tracks para playlist $playlistId con sincronización automática&quot;)&#10;&#10;            val localTracks = trackDao.getTracksByPlaylistSync(playlistId)&#10;            val playlist = playlistDao.getPlaylistById(playlistId)&#10;&#10;            // Verificar si necesita sincronización&#10;            val shouldSync = shouldSyncTracks(playlist)&#10;&#10;            if (shouldSync) {&#10;                Log.d(TAG, &quot;Iniciando sincronización de tracks para playlist $playlistId&quot;)&#10;                syncTracksFromSpotify(playlistId)&#10;                trackDao.getTracksByPlaylistSync(playlistId)&#10;            } else {&#10;                Log.d(TAG, &quot;Los tracks están actualizados&quot;)&#10;                localTracks&#10;            }&#10;        }&#10;&#10;    // === MÉTODOS PÚBLICOS - SINCRONIZACIÓN MANUAL ===&#10;&#10;    /**&#10;     * Sincroniza todas las playlists desde Spotify de forma manual.&#10;     *&#10;     * @return true si la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun syncPlaylistsFromSpotify(): Boolean = withContext(Dispatchers.IO) {&#10;        try {&#10;            Log.d(TAG, &quot;Sincronizando playlists desde Spotify&quot;)&#10;&#10;            val accessToken = getValidAccessToken()&#10;            if (accessToken == null) {&#10;                Log.e(TAG, &quot;No se pudo obtener token de acceso válido&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            // Obtener playlists del usuario con paginación&#10;            var success = false&#10;            SpotifyRepository.getUserPlaylists(accessToken) { playlists, error -&gt;&#10;                if (error != null) {&#10;                    Log.e(TAG, &quot;Error al obtener playlists: $error&quot;)&#10;                } else if (playlists != null) {&#10;                    Log.d(TAG, &quot;Recibidas ${playlists.size} playlists de Spotify&quot;)&#10;&#10;                    // Convertir y guardar playlists&#10;                    val playlistEntities = playlists.map { playlist -&gt;&#10;                        PlaylistEntity(&#10;                            spotifyId = playlist.id,&#10;                            name = playlist.name,&#10;                            description = playlist.description,&#10;                            trackCount = playlist.tracks?.total ?: 0,&#10;                            imageUrl = playlist.getImageUrl(),&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Usar runBlocking dentro del callback para operaciones suspend&#10;                    kotlinx.coroutines.runBlocking {&#10;                        // Obtener IDs de playlists de Spotify&#10;                        val spotifyPlaylistIds = playlists.map { it.id }.toSet()&#10;                        &#10;                        // Obtener todas las playlists locales&#10;                        val localPlaylists = playlistDao.getAllPlaylistsSync()&#10;                        &#10;                        // Encontrar playlists que están en local pero no en Spotify&#10;                        val playlistsToDelete = localPlaylists.filter { localPlaylist -&gt;&#10;                            localPlaylist.spotifyId !in spotifyPlaylistIds&#10;                        }&#10;                        &#10;                        // Eliminar playlists que ya no existen en Spotify&#10;                        if (playlistsToDelete.isNotEmpty()) {&#10;                            Log.d(TAG, &quot;Eliminando ${playlistsToDelete.size} playlists que ya no existen en Spotify&quot;)&#10;                            playlistsToDelete.forEach { playlist -&gt;&#10;                                Log.d(TAG, &quot;Eliminando playlist local: ${playlist.name} (${playlist.spotifyId})&quot;)&#10;                                // Primero eliminar los tracks de esta playlist&#10;                                trackDao.deleteTracksByPlaylist(playlist.spotifyId)&#10;                                // Luego eliminar la playlist&#10;                                playlistDao.deletePlaylistById(playlist.spotifyId)&#10;                            }&#10;                        }&#10;                        &#10;                        // Insertar o actualizar playlists de Spotify&#10;                        playlistDao.insertPlaylists(playlistEntities)&#10;                        Log.d(&#10;                            TAG,&#10;                            &quot;Guardadas ${playlistEntities.size} playlists en base de datos local&quot;&#10;                        )&#10;                    }&#10;                    success = true&#10;                }&#10;            }&#10;&#10;            // Esperar a que termine el callback&#10;            var attempts = 0&#10;            while (!success &amp;&amp; attempts &lt; 50) { // 5 segundos máximo&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            success&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error en sincronización de playlists&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sincroniza los tracks de una playlist específica desde Spotify.&#10;     *&#10;     * @param playlistId ID de la playlist a sincronizar&#10;     * @return true si la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun syncTracksFromSpotify(playlistId: String): Boolean = withContext(Dispatchers.IO) {&#10;        try {&#10;            Log.d(TAG, &quot;Sincronizando tracks para playlist $playlistId desde Spotify&quot;)&#10;&#10;            val accessToken = getValidAccessToken()&#10;            if (accessToken == null) {&#10;                Log.e(TAG, &quot;No se pudo obtener token de acceso válido&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            var success = false&#10;            SpotifyRepository.getPlaylistTracks(accessToken, playlistId) { tracks, error -&gt;&#10;                if (error != null) {&#10;                    Log.e(TAG, &quot;Error al obtener tracks: $error&quot;)&#10;                } else if (tracks != null) {&#10;                    Log.d(&#10;                        TAG,&#10;                        &quot;Recibidos ${tracks.size} tracks de Spotify para playlist $playlistId&quot;&#10;                    )&#10;&#10;                    // Convertir y guardar tracks&#10;                    val trackEntities = tracks.mapIndexedNotNull { index, playlistTrack -&gt;&#10;                        val track = playlistTrack.track&#10;                        if (track != null) {&#10;                            TrackEntity(&#10;                                id = &quot;${playlistId}_${track.id}&quot;,&#10;                                playlistId = playlistId,&#10;                                spotifyTrackId = track.id,&#10;                                name = track.name,&#10;                                artists = track.getArtistNames(),&#10;                                youtubeVideoId = null, // Se llenará después si es necesario&#10;                                position = index,&#10;                                lastSyncTime = System.currentTimeMillis()&#10;                            )&#10;                        } else {&#10;                            null&#10;                        }&#10;                    }&#10;&#10;                    // Usar runBlocking dentro del callback&#10;                    kotlinx.coroutines.runBlocking {&#10;                        // Eliminar tracks antiguos de esta playlist&#10;                        trackDao.deleteTracksByPlaylist(playlistId)&#10;                        // Insertar nuevos tracks&#10;                        trackDao.insertTracks(trackEntities)&#10;&#10;                        // Actualizar tiempo de sincronización de la playlist&#10;                        val playlist = playlistDao.getPlaylistById(playlistId)&#10;                        playlist?.let {&#10;                            playlistDao.updatePlaylist(it.copy(lastSyncTime = System.currentTimeMillis()))&#10;                        }&#10;&#10;                        Log.d(TAG, &quot;Guardados ${trackEntities.size} tracks en base de datos local&quot;)&#10;                    }&#10;                    success = true&#10;                }&#10;            }&#10;&#10;            // Esperar a que termine el callback&#10;            var attempts = 0&#10;            while (!success &amp;&amp; attempts &lt; 50) { // 5 segundos máximo&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            success&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error en sincronización de tracks&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Actualiza el YouTube video ID para un track específico.&#10;     * Permite asociar un video de YouTube con un track de Spotify.&#10;     *&#10;     * @param trackId ID único del track&#10;     * @param youtubeVideoId ID del video de YouTube&#10;     */&#10;    suspend fun updateTrackYoutubeId(trackId: String, youtubeVideoId: String) =&#10;        withContext(Dispatchers.IO) {&#10;            try {&#10;                trackDao.updateYoutubeVideoId(trackId, youtubeVideoId)&#10;                Log.d(TAG, &quot;YouTube ID actualizado para track $trackId: $youtubeVideoId&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;Error actualizando YouTube ID&quot;, e)&#10;            }&#10;        }&#10;&#10;    // === MÉTODOS PRIVADOS - VERIFICACIÓN DE SINCRONIZACIÓN ===&#10;&#10;    /**&#10;     * Verifica si las playlists necesitan sincronización con Spotify.&#10;     *&#10;     * @param localPlaylists Lista de playlists locales&#10;     * @return true si necesita sincronización, false en caso contrario&#10;     */&#10;    private fun shouldSyncPlaylists(localPlaylists: List&lt;PlaylistEntity&gt;): Boolean {&#10;        if (localPlaylists.isEmpty()) {&#10;            Log.d(TAG, &quot;No hay playlists locales, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val oldestSync = localPlaylists.minOfOrNull { it.lastSyncTime } ?: 0L&#10;        val needsSync = (System.currentTimeMillis() - oldestSync) &gt; SYNC_INTERVAL&#10;&#10;        Log.d(TAG, &quot;Verificación de sincronización de playlists: needsSync=$needsSync&quot;)&#10;        return needsSync&#10;    }&#10;&#10;    /**&#10;     * Verifica si los tracks de una playlist necesitan sincronización.&#10;     *&#10;     * @param playlist Entidad de la playlist a verificar&#10;     * @return true si necesita sincronización, false en caso contrario&#10;     */&#10;    private suspend fun shouldSyncTracks(playlist: PlaylistEntity?): Boolean {&#10;        if (playlist == null) {&#10;            Log.d(TAG, &quot;Playlist no encontrada, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val localTracks = trackDao.getTracksByPlaylistSync(playlist.spotifyId)&#10;        if (localTracks.isEmpty()) {&#10;            Log.d(TAG, &quot;No hay tracks locales, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val needsSync = (System.currentTimeMillis() - playlist.lastSyncTime) &gt; SYNC_INTERVAL&#10;        Log.d(TAG, &quot;Verificación de sincronización de tracks: needsSync=$needsSync&quot;)&#10;        return needsSync&#10;    }&#10;&#10;    /**&#10;     * Obtiene un token de acceso válido para Spotify.&#10;     * Usa el nuevo SpotifyTokenManager para renovación automática.&#10;     *&#10;     * @return Token de acceso válido o null si no se pudo obtener&#10;     */&#10;    private suspend fun getValidAccessToken(): String? = withContext(Dispatchers.IO) {&#10;        return@withContext SpotifyTokenManager.getValidAccessToken(appContext)&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - OPERACIONES ESPECIALES ===&#10;&#10;    /**&#10;     * Fuerza una sincronización completa de todas las playlists y tracks.&#10;     * Útil para refrescar completamente los datos locales.&#10;     *&#10;     * @return true si toda la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun forceSyncAll(): Boolean = withContext(Dispatchers.IO) {&#10;        Log.d(TAG, &quot;Forzando sincronización completa&quot;)&#10;        val playlistsSuccess = syncPlaylistsFromSpotify()&#10;&#10;        if (playlistsSuccess) {&#10;            val playlists = playlistDao.getAllPlaylistsSync()&#10;            var allTracksSuccess = true&#10;&#10;            for (playlist in playlists) {&#10;                val tracksSuccess = syncTracksFromSpotify(playlist.spotifyId)&#10;                if (!tracksSuccess) {&#10;                    allTracksSuccess = false&#10;                }&#10;            }&#10;&#10;            return@withContext allTracksSuccess&#10;        }&#10;&#10;        return@withContext false&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt" />
              <option name="updatedContent" value="package com.plyr.examples&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de integración del sistema de notificaciones de música&#10; * &#10; * Este archivo muestra cómo implementar las notificaciones en tu MainActivity.&#10; * Copia este código a tu MainActivity existente.&#10; */&#10;class NotificationIntegrationExample {&#10;    &#10;    // En tu MainActivity, agrega estas propiedades:&#10;    private lateinit var notificationManager: MusicNotificationManager&#10;    private lateinit var playerViewModel: PlayerViewModel&#10;    &#10;    // Launcher para pedir permisos de notificación (Android 13+)&#10;    private val notificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Permiso concedido, continuar con la inicialización&#10;            initializeNotificationSystem()&#10;        } else {&#10;            // Permiso denegado, manejar el caso apropiadamente&#10;            // Puedes mostrar un mensaje al usuario explicando por qué necesitas el permiso&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Llama este método en onCreate() de tu MainActivity&#10;     */&#10;    fun setupNotificationSystem(activity: ComponentActivity, viewModel: PlayerViewModel) {&#10;        playerViewModel = viewModel&#10;        &#10;        // Verificar y pedir permisos de notificación para Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            when {&#10;                ContextCompat.checkSelfPermission(&#10;                    activity,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10;                    // Permiso ya concedido&#10;                    initializeNotificationSystem()&#10;                }&#10;                else -&gt; {&#10;                    // Pedir permiso&#10;                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                }&#10;            }&#10;        } else {&#10;            // Android 12 y menores no necesitan permiso explícito&#10;            initializeNotificationSystem()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicializa el sistema de notificaciones&#10;     */&#10;    private fun initializeNotificationSystem() {&#10;        notificationManager = MusicNotificationManager(this)&#10;        notificationManager.startService()&#10;        &#10;        // Configurar listeners para actualizar notificación cuando cambie el track&#10;        setupNotificationListeners()&#10;    }&#10;    &#10;    /**&#10;     * Configura los listeners para sincronizar el PlayerViewModel con las notificaciones&#10;     */&#10;    private fun setupNotificationListeners() {&#10;        // Observar cambios en el track actual&#10;        playerViewModel.currentTrack.observe(this) { track -&gt;&#10;            track?.let {&#10;                notificationManager.updateSongInfo(it.name, it.artists)&#10;            }&#10;        }&#10;        &#10;        // Observar cambios en el título actual&#10;        playerViewModel.currentTitle.observe(this) { title -&gt;&#10;            title?.let {&#10;                // Si tienes información del artista disponible&#10;                val artist = &quot;Artista Desconocido&quot; // Reemplaza con la fuente real del artista&#10;                notificationManager.updateSongInfo(it, artist)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo de cómo reproducir una canción con notificación&#10;     */&#10;    fun playTrackWithNotification(audioUrl: String, title: String, artist: String) {&#10;        lifecycleScope.launch {&#10;            // Actualizar información en la notificación&#10;            notificationManager.updateSongInfo(title, artist)&#10;            &#10;            // Reproducir el audio en el servicio de notificación&#10;            notificationManager.playAudio(audioUrl, title, artist)&#10;            &#10;            // También reproducir en tu PlayerViewModel existente&#10;            // playerViewModel.playAudio(audioUrl) // Tu método existente&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Limpieza en onDestroy()&#10;     */&#10;    fun cleanupNotificationSystem() {&#10;        if (::notificationManager.isInitialized) {&#10;            notificationManager.stopService()&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * INTEGRACIÓN COMPLETA EN TU MAINACTIVITY:&#10; * &#10; * class MainActivity : ComponentActivity() {&#10; *     private lateinit var notificationManager: MusicNotificationManager&#10; *     private lateinit var playerViewModel: PlayerViewModel&#10; *     &#10; *     // Launcher para permisos de notificación&#10; *     private val notificationPermissionLauncher = registerForActivityResult(&#10; *         ActivityResultContracts.RequestPermission()&#10; *     ) { isGranted -&gt;&#10; *         if (isGranted) {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onCreate(savedInstanceState: Bundle?) {&#10; *         super.onCreate(savedInstanceState)&#10; *         &#10; *         // Tu código existente...&#10; *         playerViewModel = ViewModelProvider(this)[PlayerViewModel::class.java]&#10; *         &#10; *         // Configurar notificaciones&#10; *         setupNotificationSystem()&#10; *         &#10; *         // Tu código de Compose...&#10; *     }&#10; *     &#10; *     private fun setupNotificationSystem() {&#10; *         if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10; *             when {&#10; *                 ContextCompat.checkSelfPermission(&#10; *                     this, Manifest.permission.POST_NOTIFICATIONS&#10; *                 ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10; *                     initializeNotificationSystem()&#10; *                 }&#10; *                 else -&gt; {&#10; *                     notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10; *                 }&#10; *             }&#10; *         } else {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     private fun initializeNotificationSystem() {&#10; *         notificationManager = MusicNotificationManager(this)&#10; *         notificationManager.startService()&#10; *         &#10; *         // Observar cambios en el track actual&#10; *         playerViewModel.currentTrack.observe(this) { track -&gt;&#10; *             track?.let {&#10; *                 notificationManager.updateSongInfo(it.name, it.artists)&#10; *             }&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onDestroy() {&#10; *         super.onDestroy()&#10; *         if (::notificationManager.isInitialized) {&#10; *             notificationManager.stopService()&#10; *         }&#10; *     }&#10; * }&#10; */" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.IBinder&#10;import android.util.Log&#10;import com.plyr.database.TrackEntity&#10;&#10;/**&#10; * MusicNotificationManager - Clase helper para gestionar la notificación de música&#10; * &#10; * Esta clase actúa como puente entre tu PlayerViewModel y el MusicService,&#10; * facilitando el control de la notificación sin tener que manejar directamente&#10; * el service binding en el ViewModel.&#10; */&#10;class MusicNotificationManager(private val context: Context) {&#10;    &#10;    private var musicService: MusicService? = null&#10;    private var isBound = false&#10;    &#10;    companion object {&#10;        private const val TAG = &quot;MusicNotificationManager&quot;&#10;    }&#10;    &#10;    /**&#10;     * Conexión con el servicio de música&#10;     */&#10;    private val serviceConnection = object : ServiceConnection {&#10;        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {&#10;            Log.d(TAG, &quot;Service connected&quot;)&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            isBound = true&#10;        }&#10;        &#10;        override fun onServiceDisconnected(name: ComponentName?) {&#10;            Log.d(TAG, &quot;Service disconnected&quot;)&#10;            musicService = null&#10;            isBound = false&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicia el servicio y se conecta a él&#10;     */&#10;    fun startService() {&#10;        Log.d(TAG, &quot;Starting MusicService&quot;)&#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.startService(serviceIntent)&#10;        context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;    }&#10;    &#10;    /**&#10;     * Para el servicio y se desconecta&#10;     */&#10;    fun stopService() {&#10;        Log.d(TAG, &quot;Stopping MusicService&quot;)&#10;        if (isBound) {&#10;            context.unbindService(serviceConnection)&#10;            isBound = false&#10;        }&#10;        &#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.stopService(serviceIntent)&#10;        musicService = null&#10;    }&#10;    &#10;    /**&#10;     * Inicia la reproducción de audio con notificación&#10;     */&#10;    fun playAudio(audioUrl: String, title: String, artist: String) {&#10;        Log.d(TAG, &quot;Playing audio: $title by $artist&quot;)&#10;        &#10;        if (!isBound) {&#10;            // Si no está conectado, iniciar el servicio con los datos&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;AUDIO_URL&quot;, audioUrl)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;            context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;        } else {&#10;            // Si ya está conectado, usar el servicio directamente&#10;            musicService?.updateSongInfo(title, artist)&#10;            musicService?.playAudio(audioUrl)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza la información de la canción en la notificación&#10;     */&#10;    fun updateSongInfo(title: String, artist: String) {&#10;        Log.d(TAG, &quot;Updating song info: $title by $artist&quot;)&#10;        &#10;        if (isBound &amp;&amp; musicService != null) {&#10;            musicService?.updateSongInfo(title, artist)&#10;        } else {&#10;            // Si no está conectado, enviar intent de actualización&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;UPDATE_INFO&quot;, true)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza usando un TrackEntity&#10;     */&#10;    fun updateSongInfo(track: TrackEntity) {&#10;        updateSongInfo(track.name, track.artists)&#10;    }&#10;    &#10;    /**&#10;     * Pausa/reanuda la reproducción desde la notificación&#10;     */&#10;    fun togglePlayPause() {&#10;        musicService?.togglePlayPause()&#10;    }&#10;    &#10;    /**&#10;     * Para completamente la reproducción&#10;     */&#10;    fun stopPlayback() {&#10;        musicService?.stopPlayback()&#10;    }&#10;    &#10;    /**&#10;     * Verifica si está reproduciendo&#10;     */&#10;    fun isPlaying(): Boolean {&#10;        return musicService?.isPlaying() ?: false&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el servicio está conectado&#10;     */&#10;    fun isServiceConnected(): Boolean {&#10;        return isBound &amp;&amp; musicService != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.navigation&#10;&#10;import androidx.compose.runtime.Stable&#10;&#10;// Estados para navegación&#10;enum class Screen {&#10;    HOME,&#10;    SEARCH,&#10;    QUEUE,&#10;    CONFIG,&#10;    PLAYLISTS&#10;}&#10;&#10;@Stable&#10;data class MenuOption(val screen: Screen, val title: String)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.ui.navigation.MenuOption&#10;import com.plyr.ui.navigation.Screen&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    context: Context,&#10;    onNavigateToScreen: (Screen) -&gt; Unit&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var backPressedTime by remember { mutableStateOf(0L) }&#10;    var showExitMessage by remember { mutableStateOf(false) }&#10;    &#10;    // Handle double back press to exit&#10;    BackHandler {&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - backPressedTime &gt; 2000) {&#10;            backPressedTime = currentTime&#10;            showExitMessage = true&#10;            // Hide message after 2 seconds&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(2000)&#10;                showExitMessage = false&#10;            }&#10;        } else {&#10;            // Exit app&#10;            (context as? Activity)?.finish()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Terminal-style header&#10;        Text(&#10;            text = &quot;$ plyr_home&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Lista de opciones disponibles&#10;        val options = remember {&#10;            listOf(&#10;                MenuOption(Screen.SEARCH, &quot;&gt; search&quot;),&#10;                MenuOption(Screen.PLAYLISTS, &quot;&gt; playlists&quot;),&#10;                MenuOption(Screen.QUEUE, &quot;&gt; queue&quot;),&#10;                MenuOption(Screen.CONFIG, &quot;&gt; settings&quot;)&#10;            )&#10;        }&#10;        &#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                Text(&#10;                    text = option.title,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 20.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable {&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                            onNavigateToScreen(option.screen)&#10;                        }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Exit message&#10;        if (showExitMessage) {&#10;            Text(&#10;                text = &quot;&gt; Press back again to exit&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(top = 8.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun QueueScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_queue&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Queue content&#10;        if (playerViewModel != null) {&#10;            val queueState by playerViewModel.queueState.collectAsStateWithLifecycle()&#10;            val currentQueue = queueState.queue&#10;            &#10;            if (currentQueue.isNotEmpty()) {&#10;                // Queue header&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Current queue [${currentQueue.size}]&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFFFFD93D)&#10;                        )&#10;                    )&#10;                    &#10;                    // Clear queue button&#10;                    TextButton(&#10;                        onClick = { &#10;                            playerViewModel.clearQueue()&#10;                            Log.d(&quot;QueueScreen&quot;, &quot;Queue cleared by user&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;clear&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(Modifier.height(16.dp))&#10;                &#10;                // Queue track list&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(&#10;                        count = currentQueue.size,&#10;                        key = { index -&gt; currentQueue[index].id }&#10;                    ) { index -&gt;&#10;                        val track = currentQueue[index]&#10;                        val isCurrentTrack = queueState.currentIndex == index&#10;                        &#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp, horizontal = 4.dp)&#10;                                .clickable {&#10;                                    coroutineScope.launch {&#10;                                        if (queueState.currentIndex != index) {&#10;                                            playerViewModel.playQueueFromIndex(index)&#10;                                        } else {&#10;                                            playerViewModel.resumeIfPaused()&#10;                                        }&#10;                                    }&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Starting queue from index: $index&quot;)&#10;                                },&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Position and status indicator&#10;                            Text(&#10;                                text = if (isCurrentTrack) &quot;♪ &quot; else &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            // Track name&#10;                            MarqueeText(&#10;                                text = track.name,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFFE0E0E0) else Color(0xFFBDC3C7)&#10;                                ),&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            &#10;                            // Remove from queue button&#10;                            TextButton(&#10;                                onClick = { &#10;                                    playerViewModel.removeFromQueue(index)&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Removed track from queue at index: $index&quot;)&#10;                                }&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;×&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Empty queue message&#10;                Text(&#10;                    text = &quot;Queue is empty&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(32.dp)&#10;                )&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Player not available&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;&#10;/**&#10; * Extensiones para integrar PlayerViewModel con notificaciones de música&#10; * &#10; * Estas extensiones facilitan el uso del sistema de notificaciones&#10; * sin modificar directamente el PlayerViewModel existente.&#10; */&#10;&#10;/**&#10; * Inicializa el manager de notificaciones&#10; */&#10;fun PlayerViewModel.initializeNotifications(context: Context): MusicNotificationManager {&#10;    return MusicNotificationManager(context).apply {&#10;        startService()&#10;    }&#10;}&#10;&#10;/**&#10; * Reproduce un track con notificación&#10; */&#10;fun PlayerViewModel.playWithNotification(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity,&#10;    onAudioUrlReady: (String) -&gt; Unit&#10;) {&#10;    // Actualizar la información del track en la notificación&#10;    notificationManager.updateSongInfo(track)&#10;    &#10;    // Tu lógica existente de reproducción aquí&#10;    // Cuando tengas la URL de audio, llamar:&#10;    // onAudioUrlReady(audioUrl)&#10;}&#10;&#10;/**&#10; * Actualiza la notificación cuando cambia el track&#10; */&#10;fun PlayerViewModel.updateNotificationTrack(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity?&#10;) {&#10;    track?.let {&#10;        notificationManager.updateSongInfo(it.name, it.artists)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>