<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/MainActivity.kt" />
              <option name="originalContent" value="package com.plyr&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.Bundle&#10;import android.os.IBinder&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.*&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.plyr.service.MusicService&#10;import com.plyr.ui.AudioListScreen&#10;import com.plyr.ui.ExoPlyrScreen&#10;import com.plyr.ui.FloatingMusicControls&#10;import com.plyr.ui.theme.TerminalTheme&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyTokens&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyAuthEvent&#10;import com.plyr.model.AudioItem&#10;import com.plyr.database.TrackEntity&#10;import android.net.Uri&#10;&#10;/**&#10; * MainActivity - Actividad principal de la aplicación&#10; * &#10; * Esta actividad maneja:&#10; * - Conexión con el MusicService para reproducción en segundo plano&#10; * - Navegación entre pantallas (lista de audio, reproductor, configuración)&#10; * - Callbacks de OAuth de Spotify para autenticación&#10; * - Configuración del tema de la aplicación&#10; * - Coordinación entre UI y PlayerViewModel&#10; * &#10; * La aplicación usa un diseño modular con:&#10; * - PlayerViewModel para lógica de reproducción&#10; * - MusicService para reproducción en segundo plano&#10; * - Componentes UI independientes y reutilizables&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    &#10;    // === PROPIEDADES ===&#10;    &#10;    /** Referencia al servicio de música para reproducción en segundo plano */&#10;    private var musicService: MusicService? = null&#10;    &#10;    /** Indica si el servicio está conectado */&#10;    private var bound = false&#10;    &#10;    // === CONFIGURACIÓN DEL SERVICIO ===&#10;    &#10;    /**&#10;     * Conexión con el MusicService para comunicación bidireccional.&#10;     */&#10;    private val connection = object : ServiceConnection {&#10;        override fun onServiceConnected(className: ComponentName, service: IBinder) {&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            bound = true&#10;            println(&quot;MainActivity: Servicio de música conectado&quot;)&#10;        }&#10;        &#10;        override fun onServiceDisconnected(arg0: ComponentName) {&#10;            bound = false&#10;            println(&quot;MainActivity: Servicio de música desconectado&quot;)&#10;        }&#10;    }    &#10;    // === CICLO DE VIDA DE LA ACTIVIDAD ===&#10;    &#10;    /**&#10;     * Inicializa la actividad, configura el servicio de música y establece el contenido UI.&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        &#10;        // Procesar callback de Spotify OAuth si existe&#10;        handleSpotifyCallback(intent)&#10;        &#10;        // Configurar UI edge-to-edge&#10;        enableEdgeToEdge()&#10;        &#10;        // Configurar servicio de música&#10;        setupMusicService()&#10;        &#10;        // Configurar contenido UI&#10;        setupUIContent()&#10;    }&#10;    &#10;    /**&#10;     * Configura e inicia el servicio de música.&#10;     */&#10;    private fun setupMusicService() {&#10;        Intent(this, MusicService::class.java).also { intent -&gt;&#10;            startService(intent)&#10;            bindService(intent, connection, Context.BIND_AUTO_CREATE)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Configura el contenido principal de la UI.&#10;     */&#10;    private fun setupUIContent() {&#10;        setContent {&#10;            var playerViewModel = (application as PlyrApp).playerViewModel&#10;            //val playerViewModel: PlayerViewModel = viewModel()&#10;            var currentScreen by remember { mutableStateOf(&quot;list&quot;) }&#10;            var selectedVideoId by remember { mutableStateOf&lt;String?&gt;(null) }&#10;            &#10;            // Gestión del tema&#10;            val selectedTheme = remember { mutableStateOf(Config.getTheme(this@MainActivity)) }&#10;            val isDarkTheme = selectedTheme.value == &quot;dark&quot;&#10;&#10;            TerminalTheme(isDark = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    MainScreenContainer(&#10;                        currentScreen = currentScreen,&#10;                        onScreenChange = { currentScreen = it },&#10;                        selectedVideoId = selectedVideoId,&#10;                        onVideoIdChange = { selectedVideoId = it },&#10;                        playerViewModel = playerViewModel,&#10;                        selectedTheme = selectedTheme&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Contenedor principal que organiza las pantallas y controles flotantes.&#10;     */&#10;    @Composable&#10;    private fun MainScreenContainer(&#10;        currentScreen: String,&#10;        onScreenChange: (String) -&gt; Unit,&#10;        selectedVideoId: String?,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel,&#10;        selectedTheme: MutableState&lt;String&gt;&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .statusBarsPadding()&#10;        ) {&#10;            // Área de contenido principal con padding para controles flotantes&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 140.dp)&#10;            ) {&#10;                ScreenContent(&#10;                    currentScreen = currentScreen,&#10;                    onScreenChange = onScreenChange,&#10;                    onVideoIdChange = onVideoIdChange,&#10;                    playerViewModel = playerViewModel,&#10;                    selectedTheme = selectedTheme&#10;                )&#10;            }&#10;&#10;            // Controles flotantes de música&#10;            FloatingMusicControls(&#10;                playerViewModel = playerViewModel,&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 48.dp)&#10;            )&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja el contenido de las diferentes pantallas.&#10;     */&#10;    @Composable&#10;    private fun ScreenContent(&#10;        currentScreen: String,&#10;        onScreenChange: (String) -&gt; Unit,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel,&#10;        selectedTheme: MutableState&lt;String&gt;&#10;    ) {&#10;        when (currentScreen) {&#10;            &quot;player&quot; -&gt; {&#10;                playerViewModel.exoPlayer?.let { player -&gt;&#10;                    ExoPlyrScreen(&#10;                        player = player,&#10;                        onBack = { onScreenChange(&quot;list&quot;) }&#10;                    )&#10;                }&#10;            }&#10;            else -&gt; {&#10;                AudioListScreen(&#10;                    context = this@MainActivity,&#10;                    onVideoSelected = { videoId, title -&gt;&#10;                        handleVideoSelection(videoId, title, onVideoIdChange, playerViewModel)&#10;                    },&#10;                    onVideoSelectedFromSearch = { videoId, title, searchResults, selectedIndex -&gt;&#10;                        handleVideoSelectionFromSearch(videoId, title, searchResults, selectedIndex, onVideoIdChange, playerViewModel)&#10;                    },&#10;                    onThemeChanged = { newTheme -&gt;&#10;                        selectedTheme.value = newTheme&#10;                    },&#10;                    playerViewModel = playerViewModel&#10;                )&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja la selección de un video para reproducir.&#10;     * Si el video viene de una búsqueda, configura toda la lista como playlist.&#10;     */&#10;    private fun handleVideoSelection(&#10;        videoId: String,&#10;        title: String,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel&#10;    ) {&#10;        onVideoIdChange(videoId)&#10;        playerViewModel.initializePlayer()&#10;        playerViewModel.loadAudio(videoId, title)&#10;&#10;        // Si hay una playlist activa, pasarla al servicio para reproducción en background&#10;        val playlist = playerViewModel.currentPlaylist.value&#10;        val currentIndex = playerViewModel.currentTrackIndex.value ?: 0&#10;        if (playlist != null &amp;&amp; playlist.isNotEmpty()) {&#10;            // Obtener las URLs de audio para cada track&#10;            // NOTA: Esto requiere que los YouTube IDs ya estén resueltos o que el servicio pueda resolverlos&#10;            val audioUrls = playlist.mapNotNull { track -&gt;&#10;                // Usar el YouTube ID del track para obtener la URL de audio&#10;                track.youtubeVideoId ?: track.spotifyTrackId&#10;            }&#10;            if (audioUrls.isNotEmpty()) {&#10;                musicService?.playPlaylist(audioUrls, currentIndex)&#10;            }&#10;        } else {&#10;            // Si no hay playlist, reproducir solo el videoId&#10;            musicService?.playAudio(videoId)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja la selección de un video desde resultados de búsqueda.&#10;     * Configura toda la lista de resultados como playlist temporal.&#10;     */&#10;    private fun handleVideoSelectionFromSearch(&#10;        videoId: String,&#10;        title: String,&#10;        searchResults: List&lt;AudioItem&gt;,&#10;        selectedIndex: Int,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel&#10;    ) {&#10;        onVideoIdChange(videoId)&#10;        playerViewModel.initializePlayer()&#10;        &#10;        // Convertir los resultados de búsqueda a TrackEntity para crear una playlist temporal&#10;        val searchPlaylist = searchResults.mapIndexed { index, audioItem -&gt;&#10;            TrackEntity(&#10;                id = &quot;search_${audioItem.videoId ?: audioItem.title}_$index&quot;,&#10;                playlistId = &quot;search_results_${System.currentTimeMillis()}&quot;,&#10;                spotifyTrackId = &quot;&quot;, // Empty string for YouTube tracks&#10;                name = audioItem.title,&#10;                artists = audioItem.channel ?: &quot;Desconocido&quot;,&#10;                youtubeVideoId = audioItem.videoId,&#10;                audioUrl = null,&#10;                position = index,&#10;                lastSyncTime = System.currentTimeMillis()&#10;            )&#10;        }&#10;        &#10;        // Establecer la playlist de búsqueda en el PlayerViewModel&#10;        playerViewModel.setCurrentPlaylist(searchPlaylist, selectedIndex)&#10;        &#10;        // Cargar el video seleccionado&#10;        playerViewModel.loadAudio(videoId, title)&#10;&#10;        // Configurar el servicio para reproducción en background&#10;        val audioUrls = searchPlaylist.mapNotNull { it.youtubeVideoId }&#10;        if (audioUrls.isNotEmpty()) {&#10;            musicService?.playPlaylist(audioUrls, selectedIndex)&#10;        }&#10;    }    &#10;    /**&#10;     * Limpia recursos al destruir la actividad.&#10;     */&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        disconnectMusicService()&#10;    }&#10;    &#10;    /**&#10;     * Desconecta el servicio de música si está conectado.&#10;     */&#10;    private fun disconnectMusicService() {&#10;        if (bound) {&#10;            unbindService(connection)&#10;            bound = false&#10;        }&#10;    }&#10;    &#10;    // === MANEJO DE INTENTS ===&#10;    &#10;    /**&#10;     * Maneja nuevos intents, especialmente callbacks de Spotify OAuth.&#10;     */&#10;    override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        setIntent(intent)&#10;        handleSpotifyCallback(intent)&#10;    }&#10;    &#10;    // === AUTENTICACIÓN DE SPOTIFY ===&#10;    &#10;    /**&#10;     * Procesa callbacks de OAuth de Spotify cuando el usuario autoriza la aplicación.&#10;     * &#10;     * @param intent Intent que puede contener datos de callback de Spotify&#10;     */&#10;    private fun handleSpotifyCallback(intent: Intent?) {&#10;        intent?.data?.let { uri -&gt;&#10;            if (isSpotifyCallback(uri)) {&#10;                processSpotifyAuthResult(uri)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el URI es un callback de Spotify OAuth.&#10;     * @param uri URI a verificar&#10;     * @return true si es un callback de Spotify&#10;     */&#10;    private fun isSpotifyCallback(uri: Uri): Boolean {&#10;        return uri.scheme == &quot;plyr&quot; &amp;&amp; uri.host == &quot;spotify&quot;&#10;    }&#10;    &#10;    /**&#10;     * Procesa el resultado de la autorización de Spotify.&#10;     * @param uri URI con los parámetros de respuesta de OAuth&#10;     */&#10;    private fun processSpotifyAuthResult(uri: Uri) {&#10;        val code = uri.getQueryParameter(&quot;code&quot;)&#10;        val error = uri.getQueryParameter(&quot;error&quot;)&#10;        &#10;        when {&#10;            error != null -&gt; handleSpotifyAuthError(error)&#10;            code != null -&gt; handleSpotifyAuthSuccess(code)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja errores en la autorización de Spotify.&#10;     * @param error Código de error recibido&#10;     */&#10;    private fun handleSpotifyAuthError(error: String) {&#10;        println(&quot;MainActivity: Spotify OAuth error: $error&quot;)&#10;        SpotifyAuthEvent.onAuthComplete(false, &quot;cancelled_by_user&quot;)&#10;    }&#10;    &#10;    /**&#10;     * Maneja la autorización exitosa de Spotify.&#10;     * @param code Código de autorización recibido&#10;     */&#10;    private fun handleSpotifyAuthSuccess(code: String) {&#10;        SpotifyRepository.exchangeCodeForTokens(this, code) { tokens, tokenError -&gt;&#10;            if (tokens != null &amp;&amp; tokenError == null) {&#10;                saveSpotifyTokens(tokens)&#10;                println(&quot;MainActivity: Spotify OAuth success: Tokens guardados&quot;)&#10;                SpotifyAuthEvent.onAuthComplete(true, &quot;connected_successfully&quot;)&#10;            } else {&#10;                println(&quot;MainActivity: Error intercambiando tokens: $tokenError&quot;)&#10;                SpotifyAuthEvent.onAuthComplete(false, &quot;token_exchange_failed&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Guarda los tokens de Spotify en las preferencias.&#10;     * @param tokens Tokens de acceso y refresh recibidos&#10;     */&#10;    private fun saveSpotifyTokens(tokens: SpotifyTokens) {&#10;        Config.setSpotifyTokens(&#10;            this,&#10;            tokens.accessToken,&#10;            tokens.refreshToken,&#10;            tokens.expiresIn&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr&#13;&#10;&#13;&#10;import android.content.ComponentName&#13;&#10;import android.content.Context&#13;&#10;import android.content.Intent&#13;&#10;import android.content.ServiceConnection&#13;&#10;import android.os.Bundle&#13;&#10;import android.os.IBinder&#13;&#10;import androidx.activity.ComponentActivity&#13;&#10;import androidx.activity.compose.setContent&#13;&#10;import androidx.activity.enableEdgeToEdge&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.foundation.layout.Box&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.foundation.layout.padding&#13;&#10;import androidx.compose.foundation.layout.statusBarsPadding&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.Surface&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#13;&#10;import com.plyr.service.MusicService&#13;&#10;import com.plyr.ui.AudioListScreen&#13;&#10;import com.plyr.ui.ExoPlyrScreen&#13;&#10;import com.plyr.ui.FloatingMusicControls&#13;&#10;import com.plyr.ui.theme.TerminalTheme&#13;&#10;import com.plyr.viewmodel.PlayerViewModel&#13;&#10;import com.plyr.network.SpotifyRepository&#13;&#10;import com.plyr.network.SpotifyTokens&#13;&#10;import com.plyr.utils.Config&#13;&#10;import com.plyr.utils.SpotifyAuthEvent&#13;&#10;import com.plyr.model.AudioItem&#13;&#10;import com.plyr.database.TrackEntity&#13;&#10;import android.net.Uri&#13;&#10;import androidx.lifecycle.lifecycleScope&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;/**&#13;&#10; * MainActivity - Actividad principal de la aplicación&#13;&#10; * &#13;&#10; * Esta actividad maneja:&#13;&#10; * - Conexión con el MusicService para reproducción en segundo plano&#13;&#10; * - Navegación entre pantallas (lista de audio, reproductor, configuración)&#13;&#10; * - Callbacks de OAuth de Spotify para autenticación&#13;&#10; * - Configuración del tema de la aplicación&#13;&#10; * - Coordinación entre UI y PlayerViewModel&#13;&#10; * &#13;&#10; * La aplicación usa un diseño modular con:&#13;&#10; * - PlayerViewModel para lógica de reproducción&#13;&#10; * - MusicService para reproducción en segundo plano&#13;&#10; * - Componentes UI independientes y reutilizables&#13;&#10; */&#13;&#10;class MainActivity : ComponentActivity() {&#13;&#10;    &#13;&#10;    // === PROPIEDADES ===&#13;&#10;    &#13;&#10;    /** Referencia al servicio de música para reproducción en segundo plano */&#13;&#10;    private var musicService: MusicService? = null&#13;&#10;    &#13;&#10;    /** Indica si el servicio está conectado */&#13;&#10;    private var bound = false&#13;&#10;    &#13;&#10;    /** Indica si la aplicación está siendo cerrada intencionalmente */&#13;&#10;    private var isAppClosing = false&#13;&#10;    &#13;&#10;    // === CONFIGURACIÓN DEL SERVICIO ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Conexión con el MusicService para comunicación bidireccional.&#13;&#10;     */&#13;&#10;    private val connection = object : ServiceConnection {&#13;&#10;        override fun onServiceConnected(className: ComponentName, service: IBinder) {&#13;&#10;            val binder = service as MusicService.MusicBinder&#13;&#10;            musicService = binder.getService()&#13;&#10;            bound = true&#13;&#10;            println(&quot;MainActivity: Servicio de música conectado&quot;)&#13;&#10;        }&#13;&#10;        &#13;&#10;        override fun onServiceDisconnected(arg0: ComponentName) {&#13;&#10;            bound = false&#13;&#10;            println(&quot;MainActivity: Servicio de música desconectado&quot;)&#13;&#10;        }&#13;&#10;    }    &#13;&#10;    // === CICLO DE VIDA DE LA ACTIVIDAD ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Inicializa la actividad, configura el servicio de música y establece el contenido UI.&#13;&#10;     */&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        &#13;&#10;        // Procesar callback de Spotify OAuth si existe&#13;&#10;        handleSpotifyCallback(intent)&#13;&#10;        &#13;&#10;        // Configurar UI edge-to-edge&#13;&#10;        enableEdgeToEdge()&#13;&#10;        &#13;&#10;        // Configurar servicio de música&#13;&#10;        setupMusicService()&#13;&#10;        &#13;&#10;        // Configurar contenido UI&#13;&#10;        setupUIContent()&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Configura e inicia el servicio de música.&#13;&#10;     */&#13;&#10;    private fun setupMusicService() {&#13;&#10;        Intent(this, MusicService::class.java).also { intent -&gt;&#13;&#10;            startService(intent)&#13;&#10;            bindService(intent, connection, Context.BIND_AUTO_CREATE)&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Configura el contenido principal de la UI.&#13;&#10;     */&#13;&#10;    private fun setupUIContent() {&#13;&#10;        setContent {&#13;&#10;            var playerViewModel = (application as PlyrApp).playerViewModel&#13;&#10;            //val playerViewModel: PlayerViewModel = viewModel()&#13;&#10;            var currentScreen by remember { mutableStateOf(&quot;list&quot;) }&#13;&#10;            var selectedVideoId by remember { mutableStateOf&lt;String?&gt;(null) }&#13;&#10;            &#13;&#10;            // Gestión del tema&#13;&#10;            val selectedTheme = remember { mutableStateOf(Config.getTheme(this@MainActivity)) }&#13;&#10;            val isDarkTheme = selectedTheme.value == &quot;dark&quot;&#13;&#10;&#13;&#10;            TerminalTheme(isDark = isDarkTheme) {&#13;&#10;                Surface(&#13;&#10;                    modifier = Modifier.fillMaxSize(),&#13;&#10;                    color = MaterialTheme.colorScheme.background&#13;&#10;                ) {&#13;&#10;                    MainScreenContainer(&#13;&#10;                        currentScreen = currentScreen,&#13;&#10;                        onScreenChange = { currentScreen = it },&#13;&#10;                        selectedVideoId = selectedVideoId,&#13;&#10;                        onVideoIdChange = { selectedVideoId = it },&#13;&#10;                        playerViewModel = playerViewModel,&#13;&#10;                        selectedTheme = selectedTheme&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Contenedor principal que organiza las pantallas y controles flotantes.&#13;&#10;     */&#13;&#10;    @Composable&#13;&#10;    private fun MainScreenContainer(&#13;&#10;        currentScreen: String,&#13;&#10;        onScreenChange: (String) -&gt; Unit,&#13;&#10;        selectedVideoId: String?,&#13;&#10;        onVideoIdChange: (String?) -&gt; Unit,&#13;&#10;        playerViewModel: PlayerViewModel,&#13;&#10;        selectedTheme: MutableState&lt;String&gt;&#13;&#10;    ) {&#13;&#10;        Box(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .statusBarsPadding()&#13;&#10;        ) {&#13;&#10;            // Área de contenido principal con padding para controles flotantes&#13;&#10;            Box(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxSize()&#13;&#10;                    .padding(bottom = 140.dp)&#13;&#10;            ) {&#13;&#10;                ScreenContent(&#13;&#10;                    currentScreen = currentScreen,&#13;&#10;                    onScreenChange = onScreenChange,&#13;&#10;                    onVideoIdChange = onVideoIdChange,&#13;&#10;                    playerViewModel = playerViewModel,&#13;&#10;                    selectedTheme = selectedTheme&#13;&#10;                )&#13;&#10;            }&#13;&#10;&#13;&#10;            // Controles flotantes de música&#13;&#10;            FloatingMusicControls(&#13;&#10;                playerViewModel = playerViewModel,&#13;&#10;                modifier = Modifier&#13;&#10;                    .align(Alignment.BottomCenter)&#13;&#10;                    .padding(bottom = 48.dp)&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Maneja el contenido de las diferentes pantallas.&#13;&#10;     */&#13;&#10;    @Composable&#13;&#10;    private fun ScreenContent(&#13;&#10;        currentScreen: String,&#13;&#10;        onScreenChange: (String) -&gt; Unit,&#13;&#10;        onVideoIdChange: (String?) -&gt; Unit,&#13;&#10;        playerViewModel: PlayerViewModel,&#13;&#10;        selectedTheme: MutableState&lt;String&gt;&#13;&#10;    ) {&#13;&#10;        when (currentScreen) {&#13;&#10;            &quot;player&quot; -&gt; {&#13;&#10;                playerViewModel.exoPlayer?.let { player -&gt;&#13;&#10;                    ExoPlyrScreen(&#13;&#10;                        player = player,&#13;&#10;                        onBack = { onScreenChange(&quot;list&quot;) }&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;            else -&gt; {&#13;&#10;                AudioListScreen(&#13;&#10;                    context = this@MainActivity,&#13;&#10;                    onVideoSelected = { videoId, title -&gt;&#13;&#10;                        handleVideoSelection(videoId, title, onVideoIdChange, playerViewModel)&#13;&#10;                    },&#13;&#10;                    onVideoSelectedFromSearch = { videoId, title, searchResults, selectedIndex -&gt;&#13;&#10;                        handleVideoSelectionFromSearch(videoId, title, searchResults, selectedIndex, onVideoIdChange, playerViewModel)&#13;&#10;                    },&#13;&#10;                    onThemeChanged = { newTheme -&gt;&#13;&#10;                        selectedTheme.value = newTheme&#13;&#10;                    },&#13;&#10;                    playerViewModel = playerViewModel&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Maneja la selección de un video para reproducir.&#13;&#10;     * Si el video viene de una búsqueda, configura toda la lista como playlist.&#13;&#10;     */&#13;&#10;    private fun handleVideoSelection(&#13;&#10;        videoId: String,&#13;&#10;        title: String,&#13;&#10;        onVideoIdChange: (String?) -&gt; Unit,&#13;&#10;        playerViewModel: PlayerViewModel&#13;&#10;    ) {&#13;&#10;        onVideoIdChange(videoId)&#13;&#10;        playerViewModel.initializePlayer()&#13;&#10;        playerViewModel.loadAudio(videoId, title)&#13;&#10;&#13;&#10;        // Si hay una playlist activa, pasarla al servicio para reproducción en background&#13;&#10;        val playlist = playerViewModel.currentPlaylist.value&#13;&#10;        val currentIndex = playerViewModel.currentTrackIndex.value ?: 0&#13;&#10;        if (playlist != null &amp;&amp; playlist.isNotEmpty()) {&#13;&#10;            // Obtener las URLs de audio para cada track&#13;&#10;            // NOTA: Esto requiere que los YouTube IDs ya estén resueltos o que el servicio pueda resolverlos&#13;&#10;            val audioUrls = playlist.mapNotNull { track -&gt;&#13;&#10;                // Usar el YouTube ID del track para obtener la URL de audio&#13;&#10;                track.youtubeVideoId ?: track.spotifyTrackId&#13;&#10;            }&#13;&#10;            if (audioUrls.isNotEmpty()) {&#13;&#10;                musicService?.playPlaylist(audioUrls, currentIndex)&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            // Si no hay playlist, reproducir solo el videoId&#13;&#10;            musicService?.playAudio(videoId)&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Maneja la selección de un video desde resultados de búsqueda.&#13;&#10;     * Configura toda la lista de resultados como playlist temporal.&#13;&#10;     */&#13;&#10;    private fun handleVideoSelectionFromSearch(&#13;&#10;        videoId: String,&#13;&#10;        title: String,&#13;&#10;        searchResults: List&lt;AudioItem&gt;,&#13;&#10;        selectedIndex: Int,&#13;&#10;        onVideoIdChange: (String?) -&gt; Unit,&#13;&#10;        playerViewModel: PlayerViewModel&#13;&#10;    ) {&#13;&#10;        onVideoIdChange(videoId)&#13;&#10;        playerViewModel.initializePlayer()&#13;&#10;        &#13;&#10;        // Convertir los resultados de búsqueda a TrackEntity para crear una playlist temporal&#13;&#10;        val searchPlaylist = searchResults.mapIndexed { index, audioItem -&gt;&#13;&#10;            TrackEntity(&#13;&#10;                id = &quot;search_${audioItem.videoId ?: audioItem.title}_$index&quot;,&#13;&#10;                playlistId = &quot;search_results_${System.currentTimeMillis()}&quot;,&#13;&#10;                spotifyTrackId = &quot;&quot;, // Empty string for YouTube tracks&#13;&#10;                name = audioItem.title,&#13;&#10;                artists = audioItem.channel ?: &quot;Desconocido&quot;,&#13;&#10;                youtubeVideoId = audioItem.videoId,&#13;&#10;                audioUrl = null,&#13;&#10;                position = index,&#13;&#10;                lastSyncTime = System.currentTimeMillis()&#13;&#10;            )&#13;&#10;        }&#13;&#10;        &#13;&#10;        // Establecer la playlist de búsqueda en el PlayerViewModel&#13;&#10;        playerViewModel.setCurrentPlaylist(searchPlaylist, selectedIndex)&#13;&#10;        &#13;&#10;        // Cargar el video seleccionado&#13;&#10;        playerViewModel.loadAudio(videoId, title)&#13;&#10;&#13;&#10;        // Configurar el servicio para reproducción en background&#13;&#10;        val audioUrls = searchPlaylist.mapNotNull { it.youtubeVideoId }&#13;&#10;        if (audioUrls.isNotEmpty()) {&#13;&#10;            musicService?.playPlaylist(audioUrls, selectedIndex)&#13;&#10;        }&#13;&#10;    }    &#13;&#10;    /**&#13;&#10;     * Limpia recursos al destruir la actividad.&#13;&#10;     */&#13;&#10;    override fun onDestroy() {&#13;&#10;        super.onDestroy()&#13;&#10;        &#13;&#10;        // Si la aplicación se está cerrando, detener completamente el servicio&#13;&#10;        if (isAppClosing || isFinishing) {&#13;&#10;            stopMusicServiceCompletely()&#13;&#10;        } else {&#13;&#10;            // Solo desconectar el binding, pero mantener el servicio para reproducción en background&#13;&#10;            disconnectMusicService()&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Maneja el botón de back para cerrar la aplicación completamente&#13;&#10;     */&#13;&#10;    override fun onBackPressed() {&#13;&#10;        // Marcar que la aplicación se está cerrando intencionalmente&#13;&#10;        isAppClosing = true&#13;&#10;        super.onBackPressed()&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Detiene completamente el servicio de música y cierra la aplicación&#13;&#10;     */&#13;&#10;    private fun stopMusicServiceCompletely() {&#13;&#10;        musicService?.let { service -&gt;&#13;&#10;            // Parar la reproducción&#13;&#10;            val playerViewModel = (application as PlyrApp).playerViewModel&#13;&#10;            playerViewModel.pausePlayer()&#13;&#10;            &#13;&#10;            // Detener el servicio foreground&#13;&#10;            service.stopForegroundService()&#13;&#10;        }&#13;&#10;        &#13;&#10;        // Desconectar el binding&#13;&#10;        disconnectMusicService()&#13;&#10;        &#13;&#10;        // Detener el servicio completamente&#13;&#10;        stopService(Intent(this, MusicService::class.java))&#13;&#10;    }&#13;&#10;    &#13;&#10;    // === MANEJO DE INTENTS ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Maneja nuevos intents, especialmente callbacks de Spotify OAuth.&#13;&#10;     */&#13;&#10;    override fun onNewIntent(intent: Intent) {&#13;&#10;        super.onNewIntent(intent)&#13;&#10;        setIntent(intent)&#13;&#10;        handleSpotifyCallback(intent)&#13;&#10;    }&#13;&#10;    &#13;&#10;    // === AUTENTICACIÓN DE SPOTIFY ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Procesa callbacks de OAuth de Spotify cuando el usuario autoriza la aplicación.&#13;&#10;     * &#13;&#10;     * @param intent Intent que puede contener datos de callback de Spotify&#13;&#10;     */&#13;&#10;    private fun handleSpotifyCallback(intent: Intent?) {&#13;&#10;        intent?.data?.let { uri -&gt;&#13;&#10;            if (isSpotifyCallback(uri)) {&#13;&#10;                processSpotifyAuthResult(uri)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Verifica si el URI es un callback de Spotify OAuth.&#13;&#10;     * @param uri URI a verificar&#13;&#10;     * @return true si es un callback de Spotify&#13;&#10;     */&#13;&#10;    private fun isSpotifyCallback(uri: Uri): Boolean {&#13;&#10;        return uri.scheme == &quot;plyr&quot; &amp;&amp; uri.host == &quot;spotify&quot;&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Procesa el resultado de la autorización de Spotify.&#13;&#10;     * @param uri URI con los parámetros de respuesta de OAuth&#13;&#10;     */&#13;&#10;    private fun processSpotifyAuthResult(uri: Uri) {&#13;&#10;        val code = uri.getQueryParameter(&quot;code&quot;)&#13;&#10;        val error = uri.getQueryParameter(&quot;error&quot;)&#13;&#10;        &#13;&#10;        when {&#13;&#10;            error != null -&gt; handleSpotifyAuthError(error)&#13;&#10;            code != null -&gt; handleSpotifyAuthSuccess(code)&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Maneja errores en la autorización de Spotify.&#13;&#10;     * @param error Código de error recibido&#13;&#10;     */&#13;&#10;    private fun handleSpotifyAuthError(error: String) {&#13;&#10;        println(&quot;MainActivity: Spotify OAuth error: $error&quot;)&#13;&#10;        SpotifyAuthEvent.onAuthComplete(false, &quot;cancelled_by_user&quot;)&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Maneja la autorización exitosa de Spotify.&#13;&#10;     * @param code Código de autorización recibido&#13;&#10;     */&#13;&#10;    private fun handleSpotifyAuthSuccess(code: String) {&#13;&#10;        SpotifyRepository.exchangeCodeForTokens(this, code) { tokens, tokenError -&gt;&#13;&#10;            if (tokens != null &amp;&amp; tokenError == null) {&#13;&#10;                saveSpotifyTokens(tokens)&#13;&#10;                println(&quot;MainActivity: Spotify OAuth success: Tokens guardados&quot;)&#13;&#10;                SpotifyAuthEvent.onAuthComplete(true, &quot;connected_successfully&quot;)&#13;&#10;            } else {&#13;&#10;                println(&quot;MainActivity: Error intercambiando tokens: $tokenError&quot;)&#13;&#10;                SpotifyAuthEvent.onAuthComplete(false, &quot;token_exchange_failed&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Guarda los tokens de Spotify en las preferencias.&#13;&#10;     * @param tokens Tokens de acceso y refresh recibidos&#13;&#10;     */&#13;&#10;    private fun saveSpotifyTokens(tokens: SpotifyTokens) {&#13;&#10;        Config.setSpotifyTokens(&#13;&#10;            this,&#13;&#10;            tokens.accessToken,&#13;&#10;            tokens.refreshToken,&#13;&#10;            tokens.expiresIn&#13;&#10;        )&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt" />
              <option name="updatedContent" value="package com.plyr.examples&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de integración del sistema de notificaciones de música&#10; * &#10; * Este archivo muestra cómo implementar las notificaciones en tu MainActivity.&#10; * Copia este código a tu MainActivity existente.&#10; */&#10;class NotificationIntegrationExample {&#10;    &#10;    // En tu MainActivity, agrega estas propiedades:&#10;    private lateinit var notificationManager: MusicNotificationManager&#10;    private lateinit var playerViewModel: PlayerViewModel&#10;    &#10;    // Launcher para pedir permisos de notificación (Android 13+)&#10;    private val notificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Permiso concedido, continuar con la inicialización&#10;            initializeNotificationSystem()&#10;        } else {&#10;            // Permiso denegado, manejar el caso apropiadamente&#10;            // Puedes mostrar un mensaje al usuario explicando por qué necesitas el permiso&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Llama este método en onCreate() de tu MainActivity&#10;     */&#10;    fun setupNotificationSystem(activity: ComponentActivity, viewModel: PlayerViewModel) {&#10;        playerViewModel = viewModel&#10;        &#10;        // Verificar y pedir permisos de notificación para Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            when {&#10;                ContextCompat.checkSelfPermission(&#10;                    activity,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10;                    // Permiso ya concedido&#10;                    initializeNotificationSystem()&#10;                }&#10;                else -&gt; {&#10;                    // Pedir permiso&#10;                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                }&#10;            }&#10;        } else {&#10;            // Android 12 y menores no necesitan permiso explícito&#10;            initializeNotificationSystem()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicializa el sistema de notificaciones&#10;     */&#10;    private fun initializeNotificationSystem() {&#10;        notificationManager = MusicNotificationManager(this)&#10;        notificationManager.startService()&#10;        &#10;        // Configurar listeners para actualizar notificación cuando cambie el track&#10;        setupNotificationListeners()&#10;    }&#10;    &#10;    /**&#10;     * Configura los listeners para sincronizar el PlayerViewModel con las notificaciones&#10;     */&#10;    private fun setupNotificationListeners() {&#10;        // Observar cambios en el track actual&#10;        playerViewModel.currentTrack.observe(this) { track -&gt;&#10;            track?.let {&#10;                notificationManager.updateSongInfo(it.name, it.artists)&#10;            }&#10;        }&#10;        &#10;        // Observar cambios en el título actual&#10;        playerViewModel.currentTitle.observe(this) { title -&gt;&#10;            title?.let {&#10;                // Si tienes información del artista disponible&#10;                val artist = &quot;Artista Desconocido&quot; // Reemplaza con la fuente real del artista&#10;                notificationManager.updateSongInfo(it, artist)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo de cómo reproducir una canción con notificación&#10;     */&#10;    fun playTrackWithNotification(audioUrl: String, title: String, artist: String) {&#10;        lifecycleScope.launch {&#10;            // Actualizar información en la notificación&#10;            notificationManager.updateSongInfo(title, artist)&#10;            &#10;            // Reproducir el audio en el servicio de notificación&#10;            notificationManager.playAudio(audioUrl, title, artist)&#10;            &#10;            // También reproducir en tu PlayerViewModel existente&#10;            // playerViewModel.playAudio(audioUrl) // Tu método existente&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Limpieza en onDestroy()&#10;     */&#10;    fun cleanupNotificationSystem() {&#10;        if (::notificationManager.isInitialized) {&#10;            notificationManager.stopService()&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * INTEGRACIÓN COMPLETA EN TU MAINACTIVITY:&#10; * &#10; * class MainActivity : ComponentActivity() {&#10; *     private lateinit var notificationManager: MusicNotificationManager&#10; *     private lateinit var playerViewModel: PlayerViewModel&#10; *     &#10; *     // Launcher para permisos de notificación&#10; *     private val notificationPermissionLauncher = registerForActivityResult(&#10; *         ActivityResultContracts.RequestPermission()&#10; *     ) { isGranted -&gt;&#10; *         if (isGranted) {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onCreate(savedInstanceState: Bundle?) {&#10; *         super.onCreate(savedInstanceState)&#10; *         &#10; *         // Tu código existente...&#10; *         playerViewModel = ViewModelProvider(this)[PlayerViewModel::class.java]&#10; *         &#10; *         // Configurar notificaciones&#10; *         setupNotificationSystem()&#10; *         &#10; *         // Tu código de Compose...&#10; *     }&#10; *     &#10; *     private fun setupNotificationSystem() {&#10; *         if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10; *             when {&#10; *                 ContextCompat.checkSelfPermission(&#10; *                     this, Manifest.permission.POST_NOTIFICATIONS&#10; *                 ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10; *                     initializeNotificationSystem()&#10; *                 }&#10; *                 else -&gt; {&#10; *                     notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10; *                 }&#10; *             }&#10; *         } else {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     private fun initializeNotificationSystem() {&#10; *         notificationManager = MusicNotificationManager(this)&#10; *         notificationManager.startService()&#10; *         &#10; *         // Observar cambios en el track actual&#10; *         playerViewModel.currentTrack.observe(this) { track -&gt;&#10; *             track?.let {&#10; *                 notificationManager.updateSongInfo(it.name, it.artists)&#10; *             }&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onDestroy() {&#10; *         super.onDestroy()&#10; *         if (::notificationManager.isInitialized) {&#10; *             notificationManager.stopService()&#10; *         }&#10; *     }&#10; * }&#10; */" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.IBinder&#10;import android.util.Log&#10;import com.plyr.database.TrackEntity&#10;&#10;/**&#10; * MusicNotificationManager - Clase helper para gestionar la notificación de música&#10; * &#10; * Esta clase actúa como puente entre tu PlayerViewModel y el MusicService,&#10; * facilitando el control de la notificación sin tener que manejar directamente&#10; * el service binding en el ViewModel.&#10; */&#10;class MusicNotificationManager(private val context: Context) {&#10;    &#10;    private var musicService: MusicService? = null&#10;    private var isBound = false&#10;    &#10;    companion object {&#10;        private const val TAG = &quot;MusicNotificationManager&quot;&#10;    }&#10;    &#10;    /**&#10;     * Conexión con el servicio de música&#10;     */&#10;    private val serviceConnection = object : ServiceConnection {&#10;        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {&#10;            Log.d(TAG, &quot;Service connected&quot;)&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            isBound = true&#10;        }&#10;        &#10;        override fun onServiceDisconnected(name: ComponentName?) {&#10;            Log.d(TAG, &quot;Service disconnected&quot;)&#10;            musicService = null&#10;            isBound = false&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicia el servicio y se conecta a él&#10;     */&#10;    fun startService() {&#10;        Log.d(TAG, &quot;Starting MusicService&quot;)&#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.startService(serviceIntent)&#10;        context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;    }&#10;    &#10;    /**&#10;     * Para el servicio y se desconecta&#10;     */&#10;    fun stopService() {&#10;        Log.d(TAG, &quot;Stopping MusicService&quot;)&#10;        if (isBound) {&#10;            context.unbindService(serviceConnection)&#10;            isBound = false&#10;        }&#10;        &#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.stopService(serviceIntent)&#10;        musicService = null&#10;    }&#10;    &#10;    /**&#10;     * Inicia la reproducción de audio con notificación&#10;     */&#10;    fun playAudio(audioUrl: String, title: String, artist: String) {&#10;        Log.d(TAG, &quot;Playing audio: $title by $artist&quot;)&#10;        &#10;        if (!isBound) {&#10;            // Si no está conectado, iniciar el servicio con los datos&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;AUDIO_URL&quot;, audioUrl)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;            context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;        } else {&#10;            // Si ya está conectado, usar el servicio directamente&#10;            musicService?.updateSongInfo(title, artist)&#10;            musicService?.playAudio(audioUrl)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza la información de la canción en la notificación&#10;     */&#10;    fun updateSongInfo(title: String, artist: String) {&#10;        Log.d(TAG, &quot;Updating song info: $title by $artist&quot;)&#10;        &#10;        if (isBound &amp;&amp; musicService != null) {&#10;            musicService?.updateSongInfo(title, artist)&#10;        } else {&#10;            // Si no está conectado, enviar intent de actualización&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;UPDATE_INFO&quot;, true)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza usando un TrackEntity&#10;     */&#10;    fun updateSongInfo(track: TrackEntity) {&#10;        updateSongInfo(track.name, track.artists)&#10;    }&#10;    &#10;    /**&#10;     * Pausa/reanuda la reproducción desde la notificación&#10;     */&#10;    fun togglePlayPause() {&#10;        musicService?.togglePlayPause()&#10;    }&#10;    &#10;    /**&#10;     * Para completamente la reproducción&#10;     */&#10;    fun stopPlayback() {&#10;        musicService?.stopPlayback()&#10;    }&#10;    &#10;    /**&#10;     * Verifica si está reproduciendo&#10;     */&#10;    fun isPlaying(): Boolean {&#10;        return musicService?.isPlaying() ?: false&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el servicio está conectado&#10;     */&#10;    fun isServiceConnected(): Boolean {&#10;        return isBound &amp;&amp; musicService != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicService.kt" />
              <option name="originalContent" value="package com.plyr.service&#10;&#10;import android.app.Notification&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.app.Service&#10;import android.content.Intent&#10;import android.os.Binder&#10;import android.os.Build&#10;import android.os.IBinder&#10;import android.os.PowerManager&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import androidx.media3.common.Player&#10;import androidx.media3.session.MediaSession&#10;import com.plyr.MainActivity&#10;import com.plyr.PlyrApp&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;class MusicService : Service() {&#10;&#10;    // === PROPIEDADES ===&#10;    private var mediaSession: MediaSession? = null&#10;    private lateinit var wakeLock: PowerManager.WakeLock&#10;    private var playlist: List&lt;String&gt; = emptyList()&#10;    private var currentIndex: Int = 0&#10;&#10;    // === CONSTANTES ===&#10;    companion object {&#10;        private const val NOTIFICATION_ID = 1&#10;        private const val CHANNEL_ID = &quot;music_channel&quot;&#10;        private const val CHANNEL_NAME = &quot;Music Playback&quot;&#10;        private const val CHANNEL_DESCRIPTION = &quot;Controls for music playback&quot;&#10;    }&#10;&#10;    // === CICLO DE VIDA DEL SERVICIO ===&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        val powerManager = getSystemService(POWER_SERVICE) as PowerManager&#10;        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &quot;MusicService::WakeLock&quot;)&#10;        wakeLock.acquire(10 * 60 * 1000L /* 10 minutos */)&#10;&#10;        createNotificationChannel()&#10;        // Iniciar foreground service con notificación persistente&#10;        startForeground(NOTIFICATION_ID, createNotification())&#10;        setupPlayerListener()&#10;        createMediaSession()&#10;    }&#10;&#10;    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        when (intent?.action) {&#10;            &quot;ACTION_PLAY&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot; ACTION_PLAY recibido&quot;)&#10;                plyr.playPlayer()&#10;&#10;                // Actualizar notificación después de un breve delay&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    kotlinx.coroutines.delay(200)&#10;                    updateNotification()&#10;                }&#10;            }&#10;            &quot;ACTION_PAUSE&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏸️ ACTION_PAUSE recibido&quot;)&#10;                plyr.pausePlayer()&#10;&#10;                // Actualizar notificación después de un breve delay&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    kotlinx.coroutines.delay(200)&#10;                    updateNotification()&#10;                }&#10;            }&#10;            &quot;ACTION_NEXT&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏭️ ACTION_NEXT recibido&quot;)&#10;                if (plyr.hasNext.value == true) {&#10;                    println(&quot;⏭️ NAVEGANDO: Siguiente canción...&quot;)&#10;&#10;                    // Ejecutar en el hilo principal&#10;                    CoroutineScope(Dispatchers.Main).launch {&#10;                        plyr.navigateToNext()&#10;                        val player = plyr.getPlayer()&#10;                        player?.playWhenReady = true&#10;&#10;                        kotlinx.coroutines.delay(300)&#10;                        updateNotification()&#10;                    }&#10;                } else {&#10;                    Log.d(&quot;MusicService&quot;, &quot;No next track available&quot;)&#10;                }&#10;            }&#10;            &quot;ACTION_PREV&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏮️ ACTION_PREV recibido&quot;)&#10;                if (plyr.hasPrevious.value == true) {&#10;                    println(&quot;⏮️ NAVEGANDO: Canción anterior...&quot;)&#10;&#10;                    // Ejecutar en el hilo principal&#10;                    CoroutineScope(Dispatchers.Main).launch {&#10;                        plyr.navigateToPrevious()&#10;                        val player = plyr.getPlayer()&#10;                        player?.playWhenReady = true&#10;&#10;                        kotlinx.coroutines.delay(300)&#10;                        updateNotification()&#10;                    }&#10;                } else {&#10;                    Log.d(&quot;MusicService&quot;, &quot;No previous track available&quot;)&#10;                }&#10;            }&#10;            else -&gt; {&#10;                val audioUrl = intent?.getStringExtra(&quot;AUDIO_URL&quot;)&#10;                if (audioUrl != null) playAudio(audioUrl)&#10;            }&#10;        }&#10;        return START_STICKY&#10;    }&#10;&#10;    // === CONFIGURACIÓN DE COMPONENTES ===&#10;    private fun createMediaSession() {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val sharedPlayer = plyr.getPlayer()&#10;&#10;        if (sharedPlayer != null) {&#10;            mediaSession = MediaSession.Builder(this, sharedPlayer).build()&#10;            Log.d(&quot;MusicService&quot;, &quot;✅ MediaSession creada correctamente&quot;)&#10;        } else {&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ No se pudo obtener el player de PlayerViewModel&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupPlayerListener() {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val sharedPlayer = plyr.getPlayer()&#10;&#10;        sharedPlayer?.addListener(object : Player.Listener {&#10;            override fun onIsPlayingChanged(isPlaying: Boolean) {&#10;                Log.d(&quot;MusicService&quot;, &quot; onIsPlayingChanged: isPlaying = $isPlaying&quot;)&#10;&#10;                // Printear el estado actual&#10;                if (isPlaying) {&#10;                    println(&quot; ESTADO: PLAYING - La canción está reproduciéndose&quot;)&#10;                    Log.d(&quot;MusicService&quot;, &quot; ESTADO: PLAYING&quot;)&#10;                } else {&#10;                    println(&quot;⏸️ ESTADO: PAUSED - La canción está pausada&quot;)&#10;                    Log.d(&quot;MusicService&quot;, &quot;⏸️ ESTADO: PAUSED&quot;)&#10;                }&#10;&#10;                // Ejecutar en el hilo principal&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    handlePlaybackStateChange(isPlaying)&#10;                }&#10;            }&#10;&#10;            override fun onPlaybackStateChanged(playbackState: Int) {&#10;                val stateName = when (playbackState) {&#10;                    Player.STATE_IDLE -&gt; &quot;IDLE&quot;&#10;                    Player.STATE_BUFFERING -&gt; &quot;BUFFERING&quot;&#10;                    Player.STATE_READY -&gt; &quot;READY&quot;&#10;                    Player.STATE_ENDED -&gt; &quot;ENDED&quot;&#10;                    else -&gt; &quot;UNKNOWN&quot;&#10;                }&#10;&#10;                // Printear los cambios de estado&#10;                when (playbackState) {&#10;                    Player.STATE_BUFFERING -&gt; {&#10;                        println(&quot;⏳ ESTADO: LOADING - Cargando canción...&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot;⏳ ESTADO: LOADING - Buffering&quot;)&#10;                    }&#10;                    Player.STATE_READY -&gt; {&#10;                        println(&quot;✅ ESTADO: READY - Canción lista para reproducir&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot;✅ ESTADO: READY&quot;)&#10;&#10;                        // Verificar si debe empezar a reproducir automáticamente (en hilo principal)&#10;                        CoroutineScope(Dispatchers.Main).launch {&#10;                            val player = plyr.getPlayer()&#10;                            if (player?.playWhenReady == true &amp;&amp; !player.isPlaying) {&#10;                                println(&quot; INICIANDO REPRODUCCIÓN AUTOMÁTICA&quot;)&#10;                                Log.d(&quot;MusicService&quot;, &quot; Iniciando reproducción automática&quot;)&#10;                                player.play()&#10;                            }&#10;                            updateNotification()&#10;                        }&#10;                    }&#10;                    Player.STATE_ENDED -&gt; {&#10;                        println(&quot; ESTADO: ENDED - Canción terminada&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot; ESTADO: ENDED&quot;)&#10;                        CoroutineScope(Dispatchers.Main).launch {&#10;                            handleTrackEnded()&#10;                        }&#10;                    }&#10;                    Player.STATE_IDLE -&gt; {&#10;                        println(&quot; ESTADO: IDLE - Player inactivo&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot; ESTADO: IDLE&quot;)&#10;                    }&#10;                }&#10;&#10;                Log.d(&quot;MusicService&quot;, &quot; onPlaybackStateChanged: state = $stateName ($playbackState)&quot;)&#10;            }&#10;&#10;            override fun onPlayerError(error: androidx.media3.common.PlaybackException) {&#10;                println(&quot;❌ ESTADO: ERROR - ${error.message}&quot;)&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Player error: ${error.message}&quot;, error)&#10;&#10;                // Ejecutar en el hilo principal&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    handlePlayerError(error)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // === MÉTODOS DE REPRODUCCIÓN ===&#10;    fun playAudio(audioUrl: String) {&#10;        Log.d(&quot;MusicService&quot;, &quot; playAudio llamado con: $audioUrl&quot;)&#10;        println(&quot; INICIANDO CARGA: $audioUrl&quot;)&#10;&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;&#10;        try {&#10;            plyr.loadAudio(audioUrl, &quot;Audio Track&quot;)&#10;&#10;            // Asegurar que se reproduce cuando esté listo (en hilo principal)&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                val player = plyr.getPlayer()&#10;                player?.playWhenReady = true&#10;&#10;                kotlinx.coroutines.delay(500)&#10;                startForeground(NOTIFICATION_ID, createNotification())&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;❌ ERROR AL CARGAR: ${e.message}&quot;)&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ Error al reproducir audio: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;    fun playPlaylist(urls: List&lt;String&gt;, startIndex: Int = 0) {&#10;        playlist = urls&#10;        currentIndex = startIndex.coerceIn(0, urls.size - 1)&#10;&#10;        if (playlist.isNotEmpty()) {&#10;            Log.d(&quot;MusicService&quot;, &quot; Playing playlist: ${playlist.size} tracks, starting at index $currentIndex&quot;)&#10;            playAudio(playlist[currentIndex])&#10;        } else {&#10;            Log.w(&quot;MusicService&quot;, &quot;⚠️ Attempted to play empty playlist&quot;)&#10;        }&#10;    }&#10;&#10;    // === MANEJO DE ESTADOS ===&#10;    private fun handlePlaybackStateChange(isPlaying: Boolean) {&#10;        Log.d(&quot;MusicService&quot;, &quot; handlePlaybackStateChange: isPlaying = $isPlaying&quot;)&#10;&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val hasMedia = plyr.getPlayer()?.currentMediaItem != null&#10;&#10;        if (hasMedia || isPlaying) {&#10;            Log.d(&quot;MusicService&quot;, &quot; Actualizando notificación - isPlaying: $isPlaying&quot;)&#10;            try {&#10;                // Para la primera vez, usar startForeground&#10;                if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                    updateNotification()&#10;                } else {&#10;                    startForeground(NOTIFICATION_ID, createNotification())&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Error al mostrar notificación: ${e.message}&quot;, e)&#10;            }&#10;        } else {&#10;            Log.d(&quot;MusicService&quot;, &quot;⏸️ Sin contenido, deteniendo servicio en primer plano&quot;)&#10;            stopForeground(STOP_FOREGROUND_DETACH)&#10;        }&#10;    }&#10;&#10;    private fun handleTrackEnded() {&#10;        if (playlist.isNotEmpty() &amp;&amp; currentIndex &lt; playlist.size - 1) {&#10;            currentIndex++&#10;            val nextUrl = playlist[currentIndex]&#10;            Log.d(&quot;MusicService&quot;, &quot;⏭️ Track ended, playing next: $nextUrl&quot;)&#10;            playAudio(nextUrl)&#10;        } else {&#10;            Log.d(&quot;MusicService&quot;, &quot; Playlist ended&quot;)&#10;            stopForeground(STOP_FOREGROUND_DETACH)&#10;        }&#10;    }&#10;&#10;    private fun handlePlayerError(error: androidx.media3.common.PlaybackException) {&#10;        Log.e(&quot;MusicService&quot;, &quot;❌ Manejando error del player: ${error.message}&quot;)&#10;&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            try {&#10;                // Limpiar MediaSession&#10;                cleanupResources()&#10;&#10;                // Esperar un momento antes de reintentar&#10;                kotlinx.coroutines.delay(1000)&#10;&#10;                // Recrear MediaSession con el player existente&#10;                createMediaSession()&#10;&#10;                // Reintentar la reproducción si hay un track actual&#10;                if (playlist.isNotEmpty() &amp;&amp; currentIndex &lt; playlist.size) {&#10;                    Log.d(&quot;MusicService&quot;, &quot; Reintentando reproducción del track actual&quot;)&#10;                    playAudio(playlist[currentIndex])&#10;                }&#10;&#10;                Log.d(&quot;MusicService&quot;, &quot; Recuperación de error completada&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Error durante la recuperación: ${e.message}&quot;, e)&#10;&#10;                // Si falla todo, detener el servicio&#10;                stopForeground(STOP_FOREGROUND_DETACH)&#10;                stopSelf()&#10;            }&#10;        }&#10;    }&#10;&#10;    // === CONFIGURACIÓN DE NOTIFICACIONES ===&#10;    private fun createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                CHANNEL_ID,&#10;                CHANNEL_NAME,&#10;                NotificationManager.IMPORTANCE_LOW&#10;            ).apply {&#10;                description = CHANNEL_DESCRIPTION&#10;                setShowBadge(false)&#10;                lockscreenVisibility = Notification.VISIBILITY_PUBLIC&#10;                setSound(null, null) // Sin sonido para la notificación&#10;            }&#10;&#10;            val notificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;    }&#10;    private fun createNotification(): Notification {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val player = plyr.getPlayer()&#10;        val currentMediaItem = player?.currentMediaItem&#10;        val title = currentMediaItem?.mediaMetadata?.title?.toString() ?: &quot;Music Player&quot;&#10;&#10;        // Obtener el estado correcto del player&#10;        val isCurrentlyPlaying = player?.isPlaying == true&#10;&#10;        Log.d(&quot;MusicService&quot;, &quot; Creando notificación - Playing: $isCurrentlyPlaying, Title: $title&quot;)&#10;&#10;        val playIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PLAY&quot; }&#10;        val pauseIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PAUSE&quot; }&#10;        val nextIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_NEXT&quot; }&#10;        val prevIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PREV&quot; }&#10;&#10;        val playPendingIntent = PendingIntent.getService(this, 0, playIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val pausePendingIntent = PendingIntent.getService(this, 1, pauseIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val nextPendingIntent = PendingIntent.getService(this, 2, nextIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val prevPendingIntent = PendingIntent.getService(this, 3, prevIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;&#10;        val builder = NotificationCompat.Builder(this, CHANNEL_ID)&#10;            .setContentTitle(title)&#10;            .setContentText(if (isCurrentlyPlaying) &quot;Reproduciendo...&quot; else &quot;En pausa&quot;)&#10;            .setSmallIcon(if (isCurrentlyPlaying) android.R.drawable.ic_media_pause else android.R.drawable.ic_media_play)&#10;            .setContentIntent(createMainActivityPendingIntent())&#10;            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)&#10;            .setPriority(NotificationCompat.PRIORITY_LOW)&#10;            .setOngoing(true) // Notificación persistente&#10;            .setShowWhen(false)&#10;            .setOnlyAlertOnce(true) // Evita alertas repetidas&#10;&#10;        val compactActions = mutableListOf&lt;Int&gt;()&#10;        var actionIndex = 0&#10;&#10;        // Botón anterior (si hay pista anterior)&#10;        if (plyr.hasPrevious.value == true) {&#10;            builder.addAction(android.R.drawable.ic_media_previous, &quot;Previous&quot;, prevPendingIntent)&#10;            compactActions.add(actionIndex)&#10;            actionIndex++&#10;        }&#10;&#10;        // Botón play/pause (siempre presente)&#10;        val playPauseIcon = if (isCurrentlyPlaying) android.R.drawable.ic_media_pause else android.R.drawable.ic_media_play&#10;        val playPauseText = if (isCurrentlyPlaying) &quot;Pause&quot; else &quot;Play&quot;&#10;        val playPauseIntent = if (isCurrentlyPlaying) pausePendingIntent else playPendingIntent&#10;&#10;        builder.addAction(playPauseIcon, playPauseText, playPauseIntent)&#10;        compactActions.add(actionIndex)&#10;        actionIndex++&#10;&#10;        // Botón siguiente (si hay pista siguiente)&#10;        if (plyr.hasNext.value == true) {&#10;            builder.addAction(android.R.drawable.ic_media_next, &quot;Next&quot;, nextPendingIntent)&#10;            compactActions.add(actionIndex)&#10;        }&#10;&#10;        // MediaStyle simplificado sin MediaSession token&#10;        builder.setStyle(androidx.media.app.NotificationCompat.MediaStyle()&#10;            .setShowActionsInCompactView(*compactActions.toIntArray())&#10;        )&#10;&#10;        return builder.build()&#10;    }&#10;&#10;    private fun createMainActivityPendingIntent(): PendingIntent {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        return PendingIntent.getActivity(&#10;            this, 0, intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;    }&#10;    /**&#10;     * Actualiza la notificación existente&#10;     */&#10;    private fun updateNotification() {&#10;        try {&#10;            val notification = createNotification()&#10;            val notificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.notify(NOTIFICATION_ID, notification)&#10;            Log.d(&quot;MusicService&quot;, &quot; Notificación actualizada&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ Error al actualizar notificación: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    // === BINDING ===&#10;    inner class MusicBinder : Binder() {&#10;        fun getService(): MusicService = this@MusicService&#10;    }&#10;&#10;    private val binder = MusicBinder()&#10;&#10;    override fun onBind(intent: Intent): IBinder {&#10;        return binder&#10;    }&#10;&#10;    // === LIMPIEZA DE RECURSOS ===&#10;    override fun onDestroy() {&#10;        Log.d(&quot;MusicService&quot;, &quot;️ Destruyendo MusicService&quot;)&#10;        if (::wakeLock.isInitialized &amp;&amp; wakeLock.isHeld) {&#10;            wakeLock.release()&#10;        }&#10;        cleanupResources()&#10;        super.onDestroy()&#10;    }&#10;&#10;    private fun cleanupResources() {&#10;        mediaSession?.run {&#10;            release()&#10;            mediaSession = null&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.app.Notification&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.app.Service&#10;import android.content.Intent&#10;import android.os.Binder&#10;import android.os.Build&#10;import android.os.IBinder&#10;import android.os.PowerManager&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import androidx.media3.common.Player&#10;import androidx.media3.session.MediaSession&#10;import com.plyr.MainActivity&#10;import com.plyr.PlyrApp&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;class MusicService : Service() {&#10;&#10;    // === PROPIEDADES ===&#10;    private var mediaSession: MediaSession? = null&#10;    private lateinit var wakeLock: PowerManager.WakeLock&#10;    private var playlist: List&lt;String&gt; = emptyList()&#10;    private var currentIndex: Int = 0&#10;&#10;    // === CONSTANTES ===&#10;    companion object {&#10;        private const val NOTIFICATION_ID = 1&#10;        private const val CHANNEL_ID = &quot;music_channel&quot;&#10;        private const val CHANNEL_NAME = &quot;Music Playback&quot;&#10;        private const val CHANNEL_DESCRIPTION = &quot;Controls for music playback&quot;&#10;    }&#10;&#10;    // === CICLO DE VIDA DEL SERVICIO ===&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        val powerManager = getSystemService(POWER_SERVICE) as PowerManager&#10;        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &quot;MusicService::WakeLock&quot;)&#10;        wakeLock.acquire(10 * 60 * 1000L /* 10 minutos */)&#10;&#10;        createNotificationChannel()&#10;        // Iniciar foreground service con notificación persistente&#10;        startForeground(NOTIFICATION_ID, createNotification())&#10;        setupPlayerListener()&#10;        createMediaSession()&#10;    }&#10;&#10;    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        when (intent?.action) {&#10;            &quot;ACTION_PLAY&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot; ACTION_PLAY recibido&quot;)&#10;                plyr.playPlayer()&#10;&#10;                // Actualizar notificación después de un breve delay&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    kotlinx.coroutines.delay(200)&#10;                    updateNotification()&#10;                }&#10;            }&#10;            &quot;ACTION_PAUSE&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏸️ ACTION_PAUSE recibido&quot;)&#10;                plyr.pausePlayer()&#10;&#10;                // Actualizar notificación después de un breve delay&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    kotlinx.coroutines.delay(200)&#10;                    updateNotification()&#10;                }&#10;            }&#10;            &quot;ACTION_NEXT&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏭️ ACTION_NEXT recibido&quot;)&#10;                if (plyr.hasNext.value == true) {&#10;                    println(&quot;⏭️ NAVEGANDO: Siguiente canción...&quot;)&#10;&#10;                    // Ejecutar en el hilo principal&#10;                    CoroutineScope(Dispatchers.Main).launch {&#10;                        plyr.navigateToNext()&#10;                        val player = plyr.getPlayer()&#10;                        player?.playWhenReady = true&#10;&#10;                        kotlinx.coroutines.delay(300)&#10;                        updateNotification()&#10;                    }&#10;                } else {&#10;                    Log.d(&quot;MusicService&quot;, &quot;No next track available&quot;)&#10;                }&#10;            }&#10;            &quot;ACTION_PREV&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏮️ ACTION_PREV recibido&quot;)&#10;                if (plyr.hasPrevious.value == true) {&#10;                    println(&quot;⏮️ NAVEGANDO: Canción anterior...&quot;)&#10;&#10;                    // Ejecutar en el hilo principal&#10;                    CoroutineScope(Dispatchers.Main).launch {&#10;                        plyr.navigateToPrevious()&#10;                        val player = plyr.getPlayer()&#10;                        player?.playWhenReady = true&#10;&#10;                        kotlinx.coroutines.delay(300)&#10;                        updateNotification()&#10;                    }&#10;                } else {&#10;                    Log.d(&quot;MusicService&quot;, &quot;No previous track available&quot;)&#10;                }&#10;            }&#10;            &quot;ACTION_STOP&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot; ACTION_STOP recibido - Deteniendo servicio&quot;)&#10;                stopForegroundService()&#10;                return START_NOT_STICKY&#10;            }&#10;            else -&gt; {&#10;                val audioUrl = intent?.getStringExtra(&quot;AUDIO_URL&quot;)&#10;                if (audioUrl != null) playAudio(audioUrl)&#10;            }&#10;        }&#10;        // Cambiar a START_NOT_STICKY para que no se reinicie automáticamente&#10;        return START_NOT_STICKY&#10;    }&#10;&#10;    // === CONFIGURACIÓN DE COMPONENTES ===&#10;    private fun createMediaSession() {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val sharedPlayer = plyr.getPlayer()&#10;&#10;        if (sharedPlayer != null) {&#10;            mediaSession = MediaSession.Builder(this, sharedPlayer).build()&#10;            Log.d(&quot;MusicService&quot;, &quot;✅ MediaSession creada correctamente&quot;)&#10;        } else {&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ No se pudo obtener el player de PlayerViewModel&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupPlayerListener() {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val sharedPlayer = plyr.getPlayer()&#10;&#10;        sharedPlayer?.addListener(object : Player.Listener {&#10;            override fun onIsPlayingChanged(isPlaying: Boolean) {&#10;                Log.d(&quot;MusicService&quot;, &quot; onIsPlayingChanged: isPlaying = $isPlaying&quot;)&#10;&#10;                // Printear el estado actual&#10;                if (isPlaying) {&#10;                    println(&quot; ESTADO: PLAYING - La canción está reproduciéndose&quot;)&#10;                    Log.d(&quot;MusicService&quot;, &quot; ESTADO: PLAYING&quot;)&#10;                } else {&#10;                    println(&quot;⏸️ ESTADO: PAUSED - La canción está pausada&quot;)&#10;                    Log.d(&quot;MusicService&quot;, &quot;⏸️ ESTADO: PAUSED&quot;)&#10;                }&#10;&#10;                // Ejecutar en el hilo principal&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    handlePlaybackStateChange(isPlaying)&#10;                }&#10;            }&#10;&#10;            override fun onPlaybackStateChanged(playbackState: Int) {&#10;                val stateName = when (playbackState) {&#10;                    Player.STATE_IDLE -&gt; &quot;IDLE&quot;&#10;                    Player.STATE_BUFFERING -&gt; &quot;BUFFERING&quot;&#10;                    Player.STATE_READY -&gt; &quot;READY&quot;&#10;                    Player.STATE_ENDED -&gt; &quot;ENDED&quot;&#10;                    else -&gt; &quot;UNKNOWN&quot;&#10;                }&#10;&#10;                // Printear los cambios de estado&#10;                when (playbackState) {&#10;                    Player.STATE_BUFFERING -&gt; {&#10;                        println(&quot;⏳ ESTADO: LOADING - Cargando canción...&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot;⏳ ESTADO: LOADING - Buffering&quot;)&#10;                    }&#10;                    Player.STATE_READY -&gt; {&#10;                        println(&quot;✅ ESTADO: READY - Canción lista para reproducir&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot;✅ ESTADO: READY&quot;)&#10;&#10;                        // Verificar si debe empezar a reproducir automáticamente (en hilo principal)&#10;                        CoroutineScope(Dispatchers.Main).launch {&#10;                            val player = plyr.getPlayer()&#10;                            if (player?.playWhenReady == true &amp;&amp; !player.isPlaying) {&#10;                                println(&quot; INICIANDO REPRODUCCIÓN AUTOMÁTICA&quot;)&#10;                                Log.d(&quot;MusicService&quot;, &quot; Iniciando reproducción automática&quot;)&#10;                                player.play()&#10;                            }&#10;                            updateNotification()&#10;                        }&#10;                    }&#10;                    Player.STATE_ENDED -&gt; {&#10;                        println(&quot; ESTADO: ENDED - Canción terminada&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot; ESTADO: ENDED&quot;)&#10;                        CoroutineScope(Dispatchers.Main).launch {&#10;                            handleTrackEnded()&#10;                        }&#10;                    }&#10;                    Player.STATE_IDLE -&gt; {&#10;                        println(&quot; ESTADO: IDLE - Player inactivo&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot; ESTADO: IDLE&quot;)&#10;                    }&#10;                }&#10;&#10;                Log.d(&quot;MusicService&quot;, &quot; onPlaybackStateChanged: state = $stateName ($playbackState)&quot;)&#10;            }&#10;&#10;            override fun onPlayerError(error: androidx.media3.common.PlaybackException) {&#10;                println(&quot;❌ ESTADO: ERROR - ${error.message}&quot;)&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Player error: ${error.message}&quot;, error)&#10;&#10;                // Ejecutar en el hilo principal&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    handlePlayerError(error)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // === MÉTODOS DE REPRODUCCIÓN ===&#10;    fun playAudio(audioUrl: String) {&#10;        Log.d(&quot;MusicService&quot;, &quot; playAudio llamado con: $audioUrl&quot;)&#10;        println(&quot; INICIANDO CARGA: $audioUrl&quot;)&#10;&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;&#10;        try {&#10;            plyr.loadAudio(audioUrl, &quot;Audio Track&quot;)&#10;&#10;            // Asegurar que se reproduce cuando esté listo (en hilo principal)&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                val player = plyr.getPlayer()&#10;                player?.playWhenReady = true&#10;&#10;                kotlinx.coroutines.delay(500)&#10;                startForeground(NOTIFICATION_ID, createNotification())&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;❌ ERROR AL CARGAR: ${e.message}&quot;)&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ Error al reproducir audio: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;    fun playPlaylist(urls: List&lt;String&gt;, startIndex: Int = 0) {&#10;        playlist = urls&#10;        currentIndex = startIndex.coerceIn(0, urls.size - 1)&#10;&#10;        if (playlist.isNotEmpty()) {&#10;            Log.d(&quot;MusicService&quot;, &quot; Playing playlist: ${playlist.size} tracks, starting at index $currentIndex&quot;)&#10;            playAudio(playlist[currentIndex])&#10;        } else {&#10;            Log.w(&quot;MusicService&quot;, &quot;⚠️ Attempted to play empty playlist&quot;)&#10;        }&#10;    }&#10;&#10;    // === MANEJO DE ESTADOS ===&#10;    private fun handlePlaybackStateChange(isPlaying: Boolean) {&#10;        Log.d(&quot;MusicService&quot;, &quot; handlePlaybackStateChange: isPlaying = $isPlaying&quot;)&#10;&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val hasMedia = plyr.getPlayer()?.currentMediaItem != null&#10;&#10;        if (hasMedia || isPlaying) {&#10;            Log.d(&quot;MusicService&quot;, &quot; Actualizando notificación - isPlaying: $isPlaying&quot;)&#10;            try {&#10;                // Para la primera vez, usar startForeground&#10;                if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                    updateNotification()&#10;                } else {&#10;                    startForeground(NOTIFICATION_ID, createNotification())&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Error al mostrar notificación: ${e.message}&quot;, e)&#10;            }&#10;        } else {&#10;            Log.d(&quot;MusicService&quot;, &quot;⏸️ Sin contenido, deteniendo servicio en primer plano&quot;)&#10;            stopForeground(STOP_FOREGROUND_DETACH)&#10;        }&#10;    }&#10;&#10;    private fun handleTrackEnded() {&#10;        if (playlist.isNotEmpty() &amp;&amp; currentIndex &lt; playlist.size - 1) {&#10;            currentIndex++&#10;            val nextUrl = playlist[currentIndex]&#10;            Log.d(&quot;MusicService&quot;, &quot;⏭️ Track ended, playing next: $nextUrl&quot;)&#10;            playAudio(nextUrl)&#10;        } else {&#10;            Log.d(&quot;MusicService&quot;, &quot; Playlist ended&quot;)&#10;            stopForeground(STOP_FOREGROUND_DETACH)&#10;        }&#10;    }&#10;&#10;    private fun handlePlayerError(error: androidx.media3.common.PlaybackException) {&#10;        Log.e(&quot;MusicService&quot;, &quot;❌ Manejando error del player: ${error.message}&quot;)&#10;&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            try {&#10;                // Limpiar MediaSession&#10;                cleanupResources()&#10;&#10;                // Esperar un momento antes de reintentar&#10;                kotlinx.coroutines.delay(1000)&#10;&#10;                // Recrear MediaSession con el player existente&#10;                createMediaSession()&#10;&#10;                // Reintentar la reproducción si hay un track actual&#10;                if (playlist.isNotEmpty() &amp;&amp; currentIndex &lt; playlist.size) {&#10;                    Log.d(&quot;MusicService&quot;, &quot; Reintentando reproducción del track actual&quot;)&#10;                    playAudio(playlist[currentIndex])&#10;                }&#10;&#10;                Log.d(&quot;MusicService&quot;, &quot; Recuperación de error completada&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Error durante la recuperación: ${e.message}&quot;, e)&#10;&#10;                // Si falla todo, detener el servicio&#10;                stopForeground(STOP_FOREGROUND_DETACH)&#10;                stopSelf()&#10;            }&#10;        }&#10;    }&#10;&#10;    // === CONFIGURACIÓN DE NOTIFICACIONES ===&#10;    private fun createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                CHANNEL_ID,&#10;                CHANNEL_NAME,&#10;                NotificationManager.IMPORTANCE_LOW&#10;            ).apply {&#10;                description = CHANNEL_DESCRIPTION&#10;                setShowBadge(false)&#10;                lockscreenVisibility = Notification.VISIBILITY_PUBLIC&#10;                setSound(null, null) // Sin sonido para la notificación&#10;            }&#10;&#10;            val notificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;    }&#10;    private fun createNotification(): Notification {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val player = plyr.getPlayer()&#10;        val currentMediaItem = player?.currentMediaItem&#10;        val title = currentMediaItem?.mediaMetadata?.title?.toString() ?: &quot;Music Player&quot;&#10;&#10;        // Obtener el estado correcto del player&#10;        val isCurrentlyPlaying = player?.isPlaying == true&#10;&#10;        Log.d(&quot;MusicService&quot;, &quot; Creando notificación - Playing: $isCurrentlyPlaying, Title: $title&quot;)&#10;&#10;        val playIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PLAY&quot; }&#10;        val pauseIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PAUSE&quot; }&#10;        val nextIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_NEXT&quot; }&#10;        val prevIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PREV&quot; }&#10;&#10;        val playPendingIntent = PendingIntent.getService(this, 0, playIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val pausePendingIntent = PendingIntent.getService(this, 1, pauseIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val nextPendingIntent = PendingIntent.getService(this, 2, nextIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val prevPendingIntent = PendingIntent.getService(this, 3, prevIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;&#10;        val builder = NotificationCompat.Builder(this, CHANNEL_ID)&#10;            .setContentTitle(title)&#10;            .setContentText(if (isCurrentlyPlaying) &quot;Reproduciendo...&quot; else &quot;En pausa&quot;)&#10;            .setSmallIcon(if (isCurrentlyPlaying) android.R.drawable.ic_media_pause else android.R.drawable.ic_media_play)&#10;            .setContentIntent(createMainActivityPendingIntent())&#10;            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)&#10;            .setPriority(NotificationCompat.PRIORITY_LOW)&#10;            .setOngoing(true) // Notificación persistente&#10;            .setShowWhen(false)&#10;            .setOnlyAlertOnce(true) // Evita alertas repetidas&#10;&#10;        val compactActions = mutableListOf&lt;Int&gt;()&#10;        var actionIndex = 0&#10;&#10;        // Botón anterior (si hay pista anterior)&#10;        if (plyr.hasPrevious.value == true) {&#10;            builder.addAction(android.R.drawable.ic_media_previous, &quot;Previous&quot;, prevPendingIntent)&#10;            compactActions.add(actionIndex)&#10;            actionIndex++&#10;        }&#10;&#10;        // Botón play/pause (siempre presente)&#10;        val playPauseIcon = if (isCurrentlyPlaying) android.R.drawable.ic_media_pause else android.R.drawable.ic_media_play&#10;        val playPauseText = if (isCurrentlyPlaying) &quot;Pause&quot; else &quot;Play&quot;&#10;        val playPauseIntent = if (isCurrentlyPlaying) pausePendingIntent else playPendingIntent&#10;&#10;        builder.addAction(playPauseIcon, playPauseText, playPauseIntent)&#10;        compactActions.add(actionIndex)&#10;        actionIndex++&#10;&#10;        // Botón siguiente (si hay pista siguiente)&#10;        if (plyr.hasNext.value == true) {&#10;            builder.addAction(android.R.drawable.ic_media_next, &quot;Next&quot;, nextPendingIntent)&#10;            compactActions.add(actionIndex)&#10;        }&#10;&#10;        // MediaStyle simplificado sin MediaSession token&#10;        builder.setStyle(androidx.media.app.NotificationCompat.MediaStyle()&#10;            .setShowActionsInCompactView(*compactActions.toIntArray())&#10;        )&#10;&#10;        return builder.build()&#10;    }&#10;&#10;    private fun createMainActivityPendingIntent(): PendingIntent {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        return PendingIntent.getActivity(&#10;            this, 0, intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;    }&#10;    /**&#10;     * Actualiza la notificación existente&#10;     */&#10;    private fun updateNotification() {&#10;        try {&#10;            val notification = createNotification()&#10;            val notificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.notify(NOTIFICATION_ID, notification)&#10;            Log.d(&quot;MusicService&quot;, &quot; Notificación actualizada&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ Error al actualizar notificación: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    // === BINDING ===&#10;    inner class MusicBinder : Binder() {&#10;        fun getService(): MusicService = this@MusicService&#10;    }&#10;&#10;    private val binder = MusicBinder()&#10;&#10;    override fun onBind(intent: Intent): IBinder {&#10;        return binder&#10;    }&#10;&#10;    // === LIMPIEZA DE RECURSOS ===&#10;    &#10;    /**&#10;     * Detiene el servicio foreground y limpia todos los recursos&#10;     */&#10;    fun stopForegroundService() {&#10;        Log.d(&quot;MusicService&quot;, &quot; Deteniendo servicio foreground&quot;)&#10;        &#10;        // Pausar la reproducción&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        plyr.pausePlayer()&#10;        &#10;        // Detener el servicio foreground&#10;        stopForeground(STOP_FOREGROUND_REMOVE)&#10;        &#10;        // Limpiar recursos&#10;        cleanupResources()&#10;        &#10;        // Detener el servicio completamente&#10;        stopSelf()&#10;    }&#10;    &#10;    override fun onDestroy() {&#10;        Log.d(&quot;MusicService&quot;, &quot;️ Destruyendo MusicService&quot;)&#10;        if (::wakeLock.isInitialized &amp;&amp; wakeLock.isHeld) {&#10;            wakeLock.release()&#10;        }&#10;        cleanupResources()&#10;        super.onDestroy()&#10;    }&#10;&#10;    private fun cleanupResources() {&#10;        mediaSession?.run {&#10;            release()&#10;            mediaSession = null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/SearchScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/SearchScreen.kt" />
              <option name="originalContent" value="package com.plyr.ui&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.*&#10;import com.plyr.utils.Config&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.service.YouTubeSearchManager&#10;import com.plyr.ui.components.search.SpotifyArtistDetailView&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;&#10;@Composable&#10;fun SearchScreen(&#10;    context: Context,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var results by remember { mutableStateOf&lt;List&lt;AudioItem&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Estados para resultados de Spotify&#10;    var spotifyResults by remember { mutableStateOf&lt;SpotifySearchAllResponse?&gt;(null) }&#10;    var showSpotifyResults by remember { mutableStateOf(false) }&#10;&#10;    // Estados para paginación&#10;    var currentOffset by remember { mutableStateOf(0) }&#10;    var isLoadingMore by remember { mutableStateOf(false) }&#10;    var hasMoreResults by remember { mutableStateOf(true) }&#10;    val itemsPerPage = 10&#10;&#10;    // Estados para vista detallada de playlist/álbum/artista&#10;    var selectedSpotifyPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedSpotifyAlbum by remember { mutableStateOf&lt;SpotifyAlbum?&gt;(null) }&#10;    var selectedSpotifyArtist by remember { mutableStateOf&lt;SpotifyArtistFull?&gt;(null) } // Nuevo estado para artista&#10;    var selectedItemTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var selectedArtistAlbums by remember { mutableStateOf&lt;List&lt;SpotifyAlbum&gt;&gt;(emptyList()) } // Nuevo estado para álbumes del artista&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    var isLoadingArtistAlbums by remember { mutableStateOf(false) } // Nuevo estado de carga para álbumes&#10;&#10;    // YouTube search manager para búsquedas locales&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Search function with pagination support&#10;    val performSearch: (String, Boolean) -&gt; Unit = { searchQuery, isLoadMore -&gt;&#10;        if (searchQuery.isNotBlank() &amp;&amp; (!isLoading || isLoadMore)) {&#10;            if (isLoadMore) {&#10;                isLoadingMore = true&#10;            } else {&#10;                isLoading = true&#10;                currentOffset = 0&#10;                results = emptyList()&#10;                spotifyResults = null&#10;                showSpotifyResults = false&#10;                hasMoreResults = true&#10;            }&#10;            error = null&#10;&#10;            coroutineScope.launch {&#10;                try {&#10;                    val searchEngine = Config.getSearchEngine(context)&#10;&#10;                    // Permitir override temporal con prefijos&#10;                    val (finalSearchEngine, finalQuery) = when {&#10;                        searchQuery.startsWith(&quot;yt:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;youtube&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        searchQuery.startsWith(&quot;sp:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;spotify&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        else -&gt; searchEngine to searchQuery&#10;                    }&#10;&#10;                    if (finalQuery.isEmpty()) {&#10;                        isLoading = false&#10;                        isLoadingMore = false&#10;                        error = &quot;Query vacía después de procesar prefijo&quot;&#10;                        return@launch&#10;                    }&#10;&#10;                    when (finalSearchEngine) {&#10;                        &quot;youtube&quot; -&gt; {&#10;                            // Search YouTube with detailed information&#10;                            val youtubeResults = youtubeSearchManager.searchYouTubeVideosDetailed(finalQuery)&#10;                            // Convert YouTube video info to AudioItem objects&#10;                            val newResults = youtubeResults.map { videoInfo -&gt;&#10;                                AudioItem(&#10;                                    title = videoInfo.title,&#10;                                    url = &quot;&quot;, // Use empty string for url, required by AudioItem&#10;                                    videoId = videoInfo.videoId,&#10;                                    channel = videoInfo.uploader,&#10;                                    duration = videoInfo.getFormattedDuration()&#10;                                )&#10;                            }&#10;&#10;                            if (isLoadMore) {&#10;                                results = results + newResults&#10;                            } else {&#10;                                results = newResults&#10;                            }&#10;&#10;                            hasMoreResults = newResults.size &gt;= itemsPerPage&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                        }&#10;&#10;                        &quot;spotify&quot; -&gt; {&#10;                            // Search Spotify with pagination&#10;                            if (Config.isSpotifyConnected(context)) {&#10;                                val accessToken = Config.getSpotifyAccessToken(context)&#10;                                if (accessToken != null) {&#10;                                    Log.d(&quot;SearchScreen&quot;, &quot; Iniciando búsqueda en Spotify: '$finalQuery'&quot;)&#10;                                    SpotifyRepository.searchAllWithPagination(accessToken, finalQuery) { searchResults: SpotifySearchAllResponse?, searchError: String? -&gt;&#10;                                        // Asegurar que las actualizaciones se ejecuten en el hilo principal&#10;                                        android.os.Handler(android.os.Looper.getMainLooper()).post {&#10;                                            if (searchError != null) {&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                error = &quot;Error searching Spotify: $searchError&quot;&#10;                                                Log.e(&quot;SearchScreen&quot;, &quot;Error searching Spotify: $searchError&quot;)&#10;                                            } else if (searchResults != null) {&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Resultados actualizados: ${searchResults.tracks.items.size} tracks, ${searchResults.albums.items.size} albums, ${searchResults.artists.items.size} artists, ${searchResults.playlists.items.size} playlists&quot;)&#10;&#10;                                                if (isLoadMore &amp;&amp; spotifyResults != null) {&#10;                                                    // Combinar resultados existentes con nuevos&#10;                                                    val combinedResults = SpotifySearchAllResponse(&#10;                                                        tracks = SpotifyTracksSearchResult(&#10;                                                            items = spotifyResults!!.tracks.items + searchResults.tracks.items,&#10;                                                            total = searchResults.tracks.total,&#10;                                                            limit = searchResults.tracks.limit,&#10;                                                            offset = searchResults.tracks.offset,&#10;                                                            next = searchResults.tracks.next&#10;                                                        ),&#10;                                                        albums = SpotifyAlbumsSearchResult(&#10;                                                            items = spotifyResults!!.albums.items + searchResults.albums.items,&#10;                                                            total = searchResults.albums.total,&#10;                                                            limit = searchResults.albums.limit,&#10;                                                            offset = searchResults.albums.offset,&#10;                                                            next = searchResults.albums.next&#10;                                                        ),&#10;                                                        artists = SpotifyArtistsSearchResult(&#10;                                                            items = spotifyResults!!.artists.items + searchResults.artists.items,&#10;                                                            total = searchResults.artists.total,&#10;                                                            limit = searchResults.artists.limit,&#10;                                                            offset = searchResults.artists.offset,&#10;                                                            next = searchResults.artists.next&#10;                                                        ),&#10;                                                        playlists = SpotifyPlaylistsSearchResult(&#10;                                                            items = spotifyResults!!.playlists.items + searchResults.playlists.items,&#10;                                                            total = searchResults.playlists.total,&#10;                                                            limit = searchResults.playlists.limit,&#10;                                                            offset = searchResults.playlists.offset,&#10;                                                            next = searchResults.playlists.next&#10;                                                        )&#10;                                                    )&#10;                                                    spotifyResults = combinedResults&#10;                                                } else {&#10;                                                    spotifyResults = searchResults&#10;                                                }&#10;&#10;                                                // Para esta implementación, como searchAllWithPagination ya obtiene todos los resultados,&#10;                                                // no hay paginación manual adicional necesaria&#10;                                                hasMoreResults = false&#10;&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                showSpotifyResults = true&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot; Estado actualizado - showSpotifyResults=$showSpotifyResults&quot;)&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                } else {&#10;                                    isLoading = false&#10;                                    isLoadingMore = false&#10;                                    error = &quot;Token de Spotify no disponible&quot;&#10;                                }&#10;                            } else {&#10;                                isLoading = false&#10;                                isLoadingMore = false&#10;                                error = &quot;Spotify no está conectado&quot;&#10;                            }&#10;                        }&#10;&#10;                        else -&gt; {&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                            error = &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;&#10;                            Log.w(&quot;SearchScreen&quot;, &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;)&#10;                        }&#10;                    }&#10;&#10;                } catch (e: Exception) {&#10;                    isLoading = false&#10;                    isLoadingMore = false&#10;                    error = &quot;Error en búsqueda: ${e.message}&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;Error en búsqueda&quot;, e)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Funciones auxiliares para operaciones de Spotify&#10;    val saveSpotifyPlaylistToLibrary: () -&gt; Unit = {&#10;        coroutineScope.launch {&#10;            try {&#10;                selectedSpotifyPlaylist?.let { playlist -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando playlist en biblioteca de Spotify: ${playlist.name}&quot;)&#10;                        SpotifyRepository.followPlaylist(accessToken, playlist.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Playlist seguida exitosamente: ${playlist.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error siguiendo playlist: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;                selectedSpotifyAlbum?.let { album -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando álbum en biblioteca de Spotify: ${album.name}&quot;)&#10;                        SpotifyRepository.saveAlbum(accessToken, album.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Álbum guardado exitosamente: ${album.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error guardando álbum: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error guardando en biblioteca de Spotify&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    val loadSpotifyPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedSpotifyPlaylist = playlist&#10;        selectedSpotifyAlbum = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks de la playlist: ${playlist.name}&quot;)&#10;                    SpotifyRepository.getPlaylistTracks(accessToken, playlist.id) { playlistTracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (playlistTracks != null) {&#10;                            // Convertir SpotifyPlaylistTrack a SpotifyTrack&#10;                            val tracks = playlistTracks.mapNotNull { it.track }&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para la playlist: ${playlist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks de la playlist: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de playlist: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks de la playlist: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando playlist tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    val loadSpotifyAlbumTracks: (SpotifyAlbum) -&gt; Unit = { album -&gt;&#10;        selectedSpotifyAlbum = album&#10;        selectedSpotifyPlaylist = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks del álbum: ${album.name}&quot;)&#10;                    SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (tracks != null) {&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para el álbum: ${album.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks del álbum: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de álbum: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks del álbum: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando album tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Nueva función para cargar álbumes de un artista&#10;    val loadArtistAlbums: (SpotifyArtistFull) -&gt; Unit = { artist -&gt;&#10;        selectedSpotifyArtist = artist&#10;        isLoadingArtistAlbums = true&#10;        error = null&#10;        selectedArtistAlbums = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando álbumes del artista: ${artist.name}&quot;)&#10;                    SpotifyRepository.getArtistAlbums(accessToken, artist.id) { albums, errorMsg -&gt;&#10;                        isLoadingArtistAlbums = false&#10;                        if (albums != null) {&#10;                            selectedArtistAlbums = albums&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${albums.size} álbumes cargados para el artista: ${artist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando álbumes del artista: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando álbumes de artista: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingArtistAlbums = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingArtistAlbums = false&#10;                error = &quot;Error cargando álbumes del artista: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando artist albums&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        when {&#10;            selectedSpotifyPlaylist != null || selectedSpotifyAlbum != null || selectedSpotifyArtist != null -&gt; {&#10;                // Volver de la vista detallada a los resultados de búsqueda&#10;                selectedSpotifyPlaylist = null&#10;                selectedSpotifyAlbum = null&#10;                selectedSpotifyArtist = null&#10;                selectedItemTracks = emptyList()&#10;                selectedArtistAlbums = emptyList()&#10;            }&#10;            else -&gt; onBack()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Mostrar vista detallada o búsqueda normal&#10;        when {&#10;            selectedSpotifyPlaylist != null -&gt; {&#10;                SpotifyPlaylistDetailView(&#10;                    playlist = selectedSpotifyPlaylist!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyPlaylist = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir playlist desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir playlist en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist aleatoria&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyAlbum != null -&gt; {&#10;                SpotifyAlbumDetailView(&#10;                    album = selectedSpotifyAlbum!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyAlbum = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir álbum desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir álbum en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum aleatorio&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyArtist != null -&gt; {&#10;                // Nueva vista detallada para el artista&#10;                SpotifyArtistDetailView(&#10;                    artist = selectedSpotifyArtist!!,&#10;                    albums = selectedArtistAlbums,&#10;                    isLoading = isLoadingArtistAlbums,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyArtist = null&#10;                        selectedArtistAlbums = emptyList()&#10;                    },&#10;                    onAlbumClick = { album -&gt;&#10;                        // Navegar al álbum seleccionado&#10;                        loadSpotifyAlbumTracks(album)&#10;                    },&#10;                    onShuffleAll = {&#10;                        // Reproducir todos los álbumes del artista en orden aleatorio&#10;                        if (selectedArtistAlbums.isNotEmpty()) {&#10;                            val firstAlbum = selectedArtistAlbums.first()&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del primer álbum del artista: ${firstAlbum.name}&quot;)&#10;&#10;                            // Cargar los tracks del primer álbum&#10;                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                            if (accessToken != null) {&#10;                                SpotifyRepository.getAlbumTracks(accessToken, firstAlbum.id) { tracks, errorMsg -&gt;&#10;                                    if (tracks != null) {&#10;                                        // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                                        val shuffledTracks = tracks.shuffled()&#10;                                        val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                            TrackEntity(&#10;                                                id = &quot;spotify_${firstAlbum.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                                playlistId = firstAlbum.id,&#10;                                                spotifyTrackId = spotifyTrack.id,&#10;                                                name = spotifyTrack.name,&#10;                                                artists = spotifyTrack.getArtistNames(),&#10;                                                youtubeVideoId = null, // Se buscará dinámicamente&#10;                                                audioUrl = null,&#10;                                                position = index,&#10;                                                lastSyncTime = System.currentTimeMillis()&#10;                                            )&#10;                                        }&#10;&#10;                                        // Establecer playlist mezclada y comenzar reproducción&#10;                                        playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                                        // Buscar y reproducir el primer track de la lista mezclada&#10;                                        trackEntities.firstOrNull()?.let { track -&gt;&#10;                                            coroutineScope.launch {&#10;                                                try {&#10;                                                    playerViewModel?.loadAudioFromTrack(track)&#10;                                                } catch (e: Exception) {&#10;                                                    Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum del artista aleatorio&quot;, e)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    } else {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks para shuffle: $errorMsg&quot;)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            else -&gt; {&#10;                // Vista normal de búsqueda&#10;                SearchMainView(&#10;                    searchQuery = searchQuery,&#10;                    onSearchQueryChange = { searchQuery = it },&#10;                    results = results,&#10;                    spotifyResults = spotifyResults,&#10;                    showSpotifyResults = showSpotifyResults,&#10;                    isLoading = isLoading,&#10;                    error = error,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                    onAlbumSelected = loadSpotifyAlbumTracks,&#10;                    onPlaylistSelected = loadSpotifyPlaylistTracks,&#10;                    onArtistSelected = loadArtistAlbums, // Agregar callback para artistas&#10;                    onSearchTriggered = performSearch,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;@Composable&#10;private fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Nuevo callback para artistas&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search field with clear button and enter action&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            label = {&#10;                Text(&#10;                    &quot;&gt; search_audio&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                if (searchQuery.isNotEmpty()) {&#10;                    IconButton(onClick = {&#10;                        onSearchQueryChange(&quot;&quot;)&#10;                    }) {&#10;                        Text(&#10;                            text = &quot;x&quot;,&#10;                            style = MaterialTheme.typography.titleLarge.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 18.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    if (searchQuery.isNotBlank() &amp;&amp; !isLoading) {&#10;                        onSearchTriggered(searchQuery, false)&#10;                    }&#10;                }&#10;            ),&#10;            enabled = !isLoading,&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;                focusedLabelColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedLabelColor = MaterialTheme.colorScheme.secondary,&#10;                focusedTextColor = MaterialTheme.colorScheme.onSurface,&#10;                unfocusedTextColor = MaterialTheme.colorScheme.onSurface&#10;            ),&#10;            textStyle = MaterialTheme.typography.bodyLarge.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp&#10;            )&#10;        )&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                )&#10;            )&#10;        }&#10;&#10;        // === MENÚS DESPLEGABLES DE SPOTIFY ===&#10;        android.util.Log.d(&#10;            &quot;SearchMainView&quot;,&#10;            &quot;Renderizando vista principal - showSpotifyResults=$showSpotifyResults, spotifyResults!=null=${spotifyResults != null}&quot;&#10;        )&#10;        if (showSpotifyResults &amp;&amp; spotifyResults != null) {&#10;            CollapsibleSpotifySearchResultsView(&#10;                results = spotifyResults,&#10;                onAlbumSelected = onAlbumSelected,&#10;                onPlaylistSelected = onPlaylistSelected,&#10;                onTrackSelectedFromSearch = { track, allTracks, selectedIndex -&gt;&#10;                    // Convertir tracks de Spotify a TrackEntity y crear playlist temporal&#10;                    val trackEntities = allTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                        TrackEntity(&#10;                            id = &quot;spotify_search_${spotifyTrack.id}_$index&quot;,&#10;                            playlistId = &quot;spotify_search_${System.currentTimeMillis()}&quot;,&#10;                            spotifyTrackId = spotifyTrack.id,&#10;                            name = spotifyTrack.name,&#10;                            artists = spotifyTrack.getArtistNames(),&#10;                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                            audioUrl = null,&#10;                            position = index,&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Establecer playlist en el PlayerViewModel&#10;                    playerViewModel?.setCurrentPlaylist(trackEntities, selectedIndex)&#10;&#10;                    // Cargar el track seleccionado&#10;                    val selectedTrackEntity = trackEntities[selectedIndex]&#10;                    coroutineScope.launch {&#10;                        try {&#10;                            playerViewModel?.loadAudioFromTrack(selectedTrackEntity)&#10;                            Log.d(&#10;                                &quot;SpotifySearch&quot;,&#10;                                &quot; Track Spotify como playlist: ${track.name} (${selectedIndex + 1}/${allTracks.size})&quot;&#10;                            )&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;SpotifySearch&quot;, &quot;Error al reproducir track de Spotify&quot;, e)&#10;                        }&#10;                    }&#10;                },&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;&#10;        // === RESULTADOS DE YOUTUBE ===&#10;        if (results.isNotEmpty()) {&#10;            CollapsibleYouTubeSearchResultsView(&#10;                results = results,&#10;                onVideoSelected = onVideoSelected,&#10;                onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun CollapsibleSpotifySearchResultsView(&#10;    results: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onTrackSelectedFromSearch: (SpotifyTrack, List&lt;SpotifyTrack&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var tracksExpanded by remember { mutableStateOf(true) }&#10;    var albumsExpanded by remember { mutableStateOf(true) }&#10;    var playlistsExpanded by remember { mutableStateOf(true) }&#10;    var artistsExpanded by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (results.tracks.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ tracks [${results.tracks.items.size}] ${if (tracksExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { tracksExpanded = !tracksExpanded }&#10;                    .padding(bottom = 8.dp)&#10;            )&#10;&#10;            if (tracksExpanded) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    results.tracks.items.take(5).forEachIndexed { index, track -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    onTrackSelectedFromSearch(track, results.tracks.items, index)&#10;                                }&#10;                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;&#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                Text(&#10;                                    text = track.name ?: &quot;Unknown Track&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFFE0E0E0)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                                Text(&#10;                                    text = track.getArtistNames(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                            }&#10;&#10;                            Text(&#10;                                text = track.getDurationText(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (results.albums.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ albums [${results.albums.items.size}] ${if (albumsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { albumsExpanded = !albumsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (albumsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.albums.items.size) { index -&gt;&#10;                        val album = results.albums.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onAlbumSelected(album) },&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = album.getImageUrl(),&#10;                                contentDescription = &quot;Album cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = album.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;&#10;                            Text(&#10;                                text = album.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (results.playlists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ playlists [${results.playlists.items.size}] ${if (playlistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { playlistsExpanded = !playlistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (playlistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.playlists.items.size) { index -&gt;&#10;                        val playlist = results.playlists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onPlaylistSelected(playlist) },&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = playlist.getImageUrl(),&#10;                                contentDescription = &quot;Playlist cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = playlist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;&#10;                            Text(&#10;                                text = &quot;${playlist.getTrackCount()} tracks&quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Artists section&#10;        if (results.artists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ artists [${results.artists.items.size}] ${if (artistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { artistsExpanded = !artistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (artistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.artists.items.size) { index -&gt;&#10;                        val artist = results.artists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(100.dp)&#10;                                .clickable { onArtistSelected(artist) }, // Conectar con el callback&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = artist.getImageUrl(),&#10;                                contentDescription = &quot;Artist image&quot;,&#10;                                modifier = Modifier&#10;                                    .size(100.dp)&#10;                                    .clip(RoundedCornerShape(50.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = artist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun CollapsibleYouTubeSearchResultsView(&#10;    results: List&lt;AudioItem&gt;,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var expanded by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;$ youtube_results [${results.size}] ${if (expanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable { expanded = !expanded }&#10;                .padding(bottom = 8.dp, top = 16.dp)&#10;        )&#10;&#10;        if (expanded) {&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                results.take(5).forEachIndexed { index, item -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                onVideoSelectedFromSearch(item.videoId, item.title, results, index)&#10;                            }&#10;                            .padding(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = item.title,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&#10;                                    text = item.channel ?: &quot;Unknown Channel&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.weight(1f),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;&#10;                                item.duration?.let { duration -&gt;&#10;                                    Text(&#10;                                        text = duration,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.*&#10;import com.plyr.utils.Config&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.service.YouTubeSearchManager&#10;import com.plyr.ui.components.search.SpotifyArtistDetailView&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;&#10;@Composable&#10;fun SearchScreen(&#10;    context: Context,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var results by remember { mutableStateOf&lt;List&lt;AudioItem&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Estados para resultados de Spotify&#10;    var spotifyResults by remember { mutableStateOf&lt;SpotifySearchAllResponse?&gt;(null) }&#10;    var showSpotifyResults by remember { mutableStateOf(false) }&#10;&#10;    // Estados para paginación&#10;    var currentOffset by remember { mutableStateOf(0) }&#10;    var isLoadingMore by remember { mutableStateOf(false) }&#10;    var hasMoreResults by remember { mutableStateOf(true) }&#10;    val itemsPerPage = 10&#10;&#10;    // Estados para vista detallada de playlist/álbum/artista&#10;    var selectedSpotifyPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedSpotifyAlbum by remember { mutableStateOf&lt;SpotifyAlbum?&gt;(null) }&#10;    var selectedSpotifyArtist by remember { mutableStateOf&lt;SpotifyArtistFull?&gt;(null) } // Nuevo estado para artista&#10;    var selectedItemTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var selectedArtistAlbums by remember { mutableStateOf&lt;List&lt;SpotifyAlbum&gt;&gt;(emptyList()) } // Nuevo estado para álbumes del artista&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    var isLoadingArtistAlbums by remember { mutableStateOf(false) } // Nuevo estado de carga para álbumes&#10;&#10;    // YouTube search manager para búsquedas locales&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Search function with pagination support&#10;    val performSearch: (String, Boolean) -&gt; Unit = { searchQuery, isLoadMore -&gt;&#10;        if (searchQuery.isNotBlank() &amp;&amp; (!isLoading || isLoadMore)) {&#10;            if (isLoadMore) {&#10;                isLoadingMore = true&#10;            } else {&#10;                isLoading = true&#10;                currentOffset = 0&#10;                results = emptyList()&#10;                spotifyResults = null&#10;                showSpotifyResults = false&#10;                hasMoreResults = true&#10;            }&#10;            error = null&#10;&#10;            coroutineScope.launch {&#10;                try {&#10;                    val searchEngine = Config.getSearchEngine(context)&#10;&#10;                    // Permitir override temporal con prefijos&#10;                    val (finalSearchEngine, finalQuery) = when {&#10;                        searchQuery.startsWith(&quot;yt:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;youtube&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        searchQuery.startsWith(&quot;sp:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;spotify&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        else -&gt; searchEngine to searchQuery&#10;                    }&#10;&#10;                    if (finalQuery.isEmpty()) {&#10;                        isLoading = false&#10;                        isLoadingMore = false&#10;                        error = &quot;Query vacía después de procesar prefijo&quot;&#10;                        return@launch&#10;                    }&#10;&#10;                    when (finalSearchEngine) {&#10;                        &quot;youtube&quot; -&gt; {&#10;                            // Search YouTube with detailed information&#10;                            val youtubeResults = youtubeSearchManager.searchYouTubeVideosDetailed(finalQuery)&#10;                            // Convert YouTube video info to AudioItem objects&#10;                            val newResults = youtubeResults.map { videoInfo -&gt;&#10;                                AudioItem(&#10;                                    title = videoInfo.title,&#10;                                    url = &quot;&quot;, // Use empty string for url, required by AudioItem&#10;                                    videoId = videoInfo.videoId,&#10;                                    channel = videoInfo.uploader,&#10;                                    duration = videoInfo.getFormattedDuration()&#10;                                )&#10;                            }&#10;&#10;                            if (isLoadMore) {&#10;                                results = results + newResults&#10;                            } else {&#10;                                results = newResults&#10;                            }&#10;&#10;                            hasMoreResults = newResults.size &gt;= itemsPerPage&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                        }&#10;&#10;                        &quot;spotify&quot; -&gt; {&#10;                            // Search Spotify with pagination&#10;                            if (Config.isSpotifyConnected(context)) {&#10;                                val accessToken = Config.getSpotifyAccessToken(context)&#10;                                if (accessToken != null) {&#10;                                    Log.d(&quot;SearchScreen&quot;, &quot; Iniciando búsqueda en Spotify: '$finalQuery'&quot;)&#10;                                    SpotifyRepository.searchAllWithPagination(accessToken, finalQuery) { searchResults: SpotifySearchAllResponse?, searchError: String? -&gt;&#10;                                        // Asegurar que las actualizaciones se ejecuten en el hilo principal&#10;                                        android.os.Handler(android.os.Looper.getMainLooper()).post {&#10;                                            if (searchError != null) {&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                error = &quot;Error searching Spotify: $searchError&quot;&#10;                                                Log.e(&quot;SearchScreen&quot;, &quot;Error searching Spotify: $searchError&quot;)&#10;                                            } else if (searchResults != null) {&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Resultados actualizados: ${searchResults.tracks.items.size} tracks, ${searchResults.albums.items.size} albums, ${searchResults.artists.items.size} artists, ${searchResults.playlists.items.size} playlists&quot;)&#10;&#10;                                                if (isLoadMore &amp;&amp; spotifyResults != null) {&#10;                                                    // Combinar resultados existentes con nuevos&#10;                                                    val combinedResults = SpotifySearchAllResponse(&#10;                                                        tracks = SpotifyTracksSearchResult(&#10;                                                            items = spotifyResults!!.tracks.items + searchResults.tracks.items,&#10;                                                            total = searchResults.tracks.total,&#10;                                                            limit = searchResults.tracks.limit,&#10;                                                            offset = searchResults.tracks.offset,&#10;                                                            next = searchResults.tracks.next&#10;                                                        ),&#10;                                                        albums = SpotifyAlbumsSearchResult(&#10;                                                            items = spotifyResults!!.albums.items + searchResults.albums.items,&#10;                                                            total = searchResults.albums.total,&#10;                                                            limit = searchResults.albums.limit,&#10;                                                            offset = searchResults.albums.offset,&#10;                                                            next = searchResults.albums.next&#10;                                                        ),&#10;                                                        artists = SpotifyArtistsSearchResult(&#10;                                                            items = spotifyResults!!.artists.items + searchResults.artists.items,&#10;                                                            total = searchResults.artists.total,&#10;                                                            limit = searchResults.artists.limit,&#10;                                                            offset = searchResults.artists.offset,&#10;                                                            next = searchResults.artists.next&#10;                                                        ),&#10;                                                        playlists = SpotifyPlaylistsSearchResult(&#10;                                                            items = spotifyResults!!.playlists.items + searchResults.playlists.items,&#10;                                                            total = searchResults.playlists.total,&#10;                                                            limit = searchResults.playlists.limit,&#10;                                                            offset = searchResults.playlists.offset,&#10;                                                            next = searchResults.playlists.next&#10;                                                        )&#10;                                                    )&#10;                                                    spotifyResults = combinedResults&#10;                                                } else {&#10;                                                    spotifyResults = searchResults&#10;                                                }&#10;&#10;                                                // Para esta implementación, como searchAllWithPagination ya obtiene todos los resultados,&#10;                                                // no hay paginación manual adicional necesaria&#10;                                                hasMoreResults = false&#10;&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                showSpotifyResults = true&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot; Estado actualizado - showSpotifyResults=$showSpotifyResults&quot;)&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                } else {&#10;                                    isLoading = false&#10;                                    isLoadingMore = false&#10;                                    error = &quot;Token de Spotify no disponible&quot;&#10;                                }&#10;                            } else {&#10;                                isLoading = false&#10;                                isLoadingMore = false&#10;                                error = &quot;Spotify no está conectado&quot;&#10;                            }&#10;                        }&#10;&#10;                        else -&gt; {&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                            error = &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;&#10;                            Log.w(&quot;SearchScreen&quot;, &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;)&#10;                        }&#10;                    }&#10;&#10;                } catch (e: Exception) {&#10;                    isLoading = false&#10;                    isLoadingMore = false&#10;                    error = &quot;Error en búsqueda: ${e.message}&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;Error en búsqueda&quot;, e)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Funciones auxiliares para operaciones de Spotify&#10;    val saveSpotifyPlaylistToLibrary: () -&gt; Unit = {&#10;        coroutineScope.launch {&#10;            try {&#10;                selectedSpotifyPlaylist?.let { playlist -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando playlist en biblioteca de Spotify: ${playlist.name}&quot;)&#10;                        SpotifyRepository.followPlaylist(accessToken, playlist.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Playlist seguida exitosamente: ${playlist.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error siguiendo playlist: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;                selectedSpotifyAlbum?.let { album -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando álbum en biblioteca de Spotify: ${album.name}&quot;)&#10;                        SpotifyRepository.saveAlbum(accessToken, album.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Álbum guardado exitosamente: ${album.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error guardando álbum: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error guardando en biblioteca de Spotify&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    val loadSpotifyPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedSpotifyPlaylist = playlist&#10;        selectedSpotifyAlbum = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks de la playlist: ${playlist.name}&quot;)&#10;                    SpotifyRepository.getPlaylistTracks(accessToken, playlist.id) { playlistTracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (playlistTracks != null) {&#10;                            // Convertir SpotifyPlaylistTrack a SpotifyTrack&#10;                            val tracks = playlistTracks.mapNotNull { it.track }&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para la playlist: ${playlist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks de la playlist: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de playlist: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks de la playlist: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando playlist tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    val loadSpotifyAlbumTracks: (SpotifyAlbum) -&gt; Unit = { album -&gt;&#10;        selectedSpotifyAlbum = album&#10;        selectedSpotifyPlaylist = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks del álbum: ${album.name}&quot;)&#10;                    SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (tracks != null) {&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para el álbum: ${album.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks del álbum: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de álbum: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks del álbum: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando album tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Nueva función para cargar álbumes de un artista&#10;    val loadArtistAlbums: (SpotifyArtistFull) -&gt; Unit = { artist -&gt;&#10;        selectedSpotifyArtist = artist&#10;        isLoadingArtistAlbums = true&#10;        error = null&#10;        selectedArtistAlbums = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando álbumes del artista: ${artist.name}&quot;)&#10;                    SpotifyRepository.getArtistAlbums(accessToken, artist.id) { albums, errorMsg -&gt;&#10;                        isLoadingArtistAlbums = false&#10;                        if (albums != null) {&#10;                            selectedArtistAlbums = albums&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${albums.size} álbumes cargados para el artista: ${artist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando álbumes del artista: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando álbumes de artista: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingArtistAlbums = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingArtistAlbums = false&#10;                error = &quot;Error cargando álbumes del artista: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando artist albums&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        when {&#10;            selectedSpotifyPlaylist != null || selectedSpotifyAlbum != null || selectedSpotifyArtist != null -&gt; {&#10;                // Volver de la vista detallada a los resultados de búsqueda&#10;                selectedSpotifyPlaylist = null&#10;                selectedSpotifyAlbum = null&#10;                selectedSpotifyArtist = null&#10;                selectedItemTracks = emptyList()&#10;                selectedArtistAlbums = emptyList()&#10;            }&#10;            else -&gt; onBack()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Mostrar vista detallada o búsqueda normal&#10;        when {&#10;            selectedSpotifyPlaylist != null -&gt; {&#10;                SpotifyPlaylistDetailView(&#10;                    playlist = selectedSpotifyPlaylist!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyPlaylist = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir playlist desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir playlist en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist aleatoria&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyAlbum != null -&gt; {&#10;                SpotifyAlbumDetailView(&#10;                    album = selectedSpotifyAlbum!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyAlbum = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir álbum desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir álbum en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum aleatorio&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyArtist != null -&gt; {&#10;                // Nueva vista detallada para el artista&#10;                SpotifyArtistDetailView(&#10;                    artist = selectedSpotifyArtist!!,&#10;                    albums = selectedArtistAlbums,&#10;                    isLoading = isLoadingArtistAlbums,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyArtist = null&#10;                        selectedArtistAlbums = emptyList()&#10;                    },&#10;                    onAlbumClick = { album -&gt;&#10;                        // Navegar al álbum seleccionado&#10;                        loadSpotifyAlbumTracks(album)&#10;                    },&#10;                    onShuffleAll = {&#10;                        // Reproducir todos los álbumes del artista en orden aleatorio&#10;                        if (selectedArtistAlbums.isNotEmpty()) {&#10;                            val firstAlbum = selectedArtistAlbums.first()&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del primer álbum del artista: ${firstAlbum.name}&quot;)&#10;&#10;                            // Cargar los tracks del primer álbum&#10;                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                            if (accessToken != null) {&#10;                                SpotifyRepository.getAlbumTracks(accessToken, firstAlbum.id) { tracks, errorMsg -&gt;&#10;                                    if (tracks != null) {&#10;                                        // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                                        val shuffledTracks = tracks.shuffled()&#10;                                        val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                            TrackEntity(&#10;                                                id = &quot;spotify_${firstAlbum.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                                playlistId = firstAlbum.id,&#10;                                                spotifyTrackId = spotifyTrack.id,&#10;                                                name = spotifyTrack.name,&#10;                                                artists = spotifyTrack.getArtistNames(),&#10;                                                youtubeVideoId = null, // Se buscará dinámicamente&#10;                                                audioUrl = null,&#10;                                                position = index,&#10;                                                lastSyncTime = System.currentTimeMillis()&#10;                                            )&#10;                                        }&#10;&#10;                                        // Establecer playlist mezclada y comenzar reproducción&#10;                                        playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                                        // Buscar y reproducir el primer track de la lista mezclada&#10;                                        trackEntities.firstOrNull()?.let { track -&gt;&#10;                                            coroutineScope.launch {&#10;                                                try {&#10;                                                    playerViewModel?.loadAudioFromTrack(track)&#10;                                                } catch (e: Exception) {&#10;                                                    Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum del artista aleatorio&quot;, e)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    } else {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks para shuffle: $errorMsg&quot;)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            else -&gt; {&#10;                // Vista normal de búsqueda&#10;                SearchMainView(&#10;                    searchQuery = searchQuery,&#10;                    onSearchQueryChange = { searchQuery = it },&#10;                    results = results,&#10;                    spotifyResults = spotifyResults,&#10;                    showSpotifyResults = showSpotifyResults,&#10;                    isLoading = isLoading,&#10;                    error = error,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                    onAlbumSelected = loadSpotifyAlbumTracks,&#10;                    onPlaylistSelected = loadSpotifyPlaylistTracks,&#10;                    onArtistSelected = loadArtistAlbums, // Agregar callback para artistas&#10;                    onSearchTriggered = performSearch,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;@Composable&#10;private fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Nuevo callback para artistas&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search field with clear button and enter action&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            label = {&#10;                Text(&#10;                    &quot;&gt; search_audio&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                if (searchQuery.isNotEmpty()) {&#10;                    IconButton(onClick = {&#10;                        onSearchQueryChange(&quot;&quot;)&#10;                    }) {&#10;                        Text(&#10;                            text = &quot;x&quot;,&#10;                            style = MaterialTheme.typography.titleLarge.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 18.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    if (searchQuery.isNotBlank() &amp;&amp; !isLoading) {&#10;                        onSearchTriggered(searchQuery, false)&#10;                    }&#10;                }&#10;            ),&#10;            enabled = !isLoading,&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;                focusedLabelColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedLabelColor = MaterialTheme.colorScheme.secondary,&#10;                focusedTextColor = MaterialTheme.colorScheme.onSurface,&#10;                unfocusedTextColor = MaterialTheme.colorScheme.onSurface&#10;            ),&#10;            textStyle = MaterialTheme.typography.bodyLarge.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp&#10;            )&#10;        )&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                )&#10;            )&#10;        }&#10;&#10;        // === MENÚS DESPLEGABLES DE SPOTIFY ===&#10;        android.util.Log.d(&#10;            &quot;SearchMainView&quot;,&#10;            &quot;Renderizando vista principal - showSpotifyResults=$showSpotifyResults, spotifyResults!=null=${spotifyResults != null}&quot;&#10;        )&#10;        if (showSpotifyResults &amp;&amp; spotifyResults != null) {&#10;            CollapsibleSpotifySearchResultsView(&#10;                results = spotifyResults,&#10;                onAlbumSelected = onAlbumSelected,&#10;                onPlaylistSelected = onPlaylistSelected,&#10;                onArtistSelected = onArtistSelected, // Pasar el callback de artista&#10;                onTrackSelectedFromSearch = { track, allTracks, selectedIndex -&gt;&#10;                    // Convertir tracks de Spotify a TrackEntity y crear playlist temporal&#10;                    val trackEntities = allTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                        TrackEntity(&#10;                            id = &quot;spotify_search_${spotifyTrack.id}_$index&quot;,&#10;                            playlistId = &quot;spotify_search_${System.currentTimeMillis()}&quot;,&#10;                            spotifyTrackId = spotifyTrack.id,&#10;                            name = spotifyTrack.name,&#10;                            artists = spotifyTrack.getArtistNames(),&#10;                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                            audioUrl = null,&#10;                            position = index,&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Establecer playlist en el PlayerViewModel&#10;                    playerViewModel?.setCurrentPlaylist(trackEntities, selectedIndex)&#10;&#10;                    // Cargar el track seleccionado&#10;                    val selectedTrackEntity = trackEntities[selectedIndex]&#10;                    coroutineScope.launch {&#10;                        try {&#10;                            playerViewModel?.loadAudioFromTrack(selectedTrackEntity)&#10;                            Log.d(&#10;                                &quot;SpotifySearch&quot;,&#10;                                &quot; Track Spotify como playlist: ${track.name} (${selectedIndex + 1}/${allTracks.size})&quot;&#10;                            )&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;SpotifySearch&quot;, &quot;Error al reproducir track de Spotify&quot;, e)&#10;                        }&#10;                    }&#10;                },&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;&#10;        // === RESULTADOS DE YOUTUBE ===&#10;        if (results.isNotEmpty()) {&#10;            CollapsibleYouTubeSearchResultsView(&#10;                results = results,&#10;                onVideoSelected = onVideoSelected,&#10;                onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun CollapsibleSpotifySearchResultsView(&#10;    results: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Agregar parámetro faltante&#10;    onTrackSelectedFromSearch: (SpotifyTrack, List&lt;SpotifyTrack&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var tracksExpanded by remember { mutableStateOf(true) }&#10;    var albumsExpanded by remember { mutableStateOf(true) }&#10;    var playlistsExpanded by remember { mutableStateOf(true) }&#10;    var artistsExpanded by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (results.tracks.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ tracks [${results.tracks.items.size}] ${if (tracksExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { tracksExpanded = !tracksExpanded }&#10;                    .padding(bottom = 8.dp)&#10;            )&#10;&#10;            if (tracksExpanded) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    results.tracks.items.take(5).forEachIndexed { index, track -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    onTrackSelectedFromSearch(track, results.tracks.items, index)&#10;                                }&#10;                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;&#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                Text(&#10;                                    text = track.name ?: &quot;Unknown Track&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFFE0E0E0)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                                Text(&#10;                                    text = track.getArtistNames(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                            }&#10;&#10;                            Text(&#10;                                text = track.getDurationText(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (results.albums.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ albums [${results.albums.items.size}] ${if (albumsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { albumsExpanded = !albumsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (albumsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.albums.items.size) { index -&gt;&#10;                        val album = results.albums.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onAlbumSelected(album) },&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = album.getImageUrl(),&#10;                                contentDescription = &quot;Album cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = album.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;&#10;                            Text(&#10;                                text = album.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (results.playlists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ playlists [${results.playlists.items.size}] ${if (playlistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { playlistsExpanded = !playlistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (playlistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.playlists.items.size) { index -&gt;&#10;                        val playlist = results.playlists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onPlaylistSelected(playlist) },&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = playlist.getImageUrl(),&#10;                                contentDescription = &quot;Playlist cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = playlist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;&#10;                            Text(&#10;                                text = &quot;${playlist.getTrackCount()} tracks&quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Artists section&#10;        if (results.artists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ artists [${results.artists.items.size}] ${if (artistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { artistsExpanded = !artistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (artistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.artists.items.size) { index -&gt;&#10;                        val artist = results.artists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(100.dp)&#10;                                .clickable { onArtistSelected(artist) }, // Conectar con el callback&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = artist.getImageUrl(),&#10;                                contentDescription = &quot;Artist image&quot;,&#10;                                modifier = Modifier&#10;                                    .size(100.dp)&#10;                                    .clip(RoundedCornerShape(50.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = artist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun CollapsibleYouTubeSearchResultsView(&#10;    results: List&lt;AudioItem&gt;,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var expanded by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;$ youtube_results [${results.size}] ${if (expanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable { expanded = !expanded }&#10;                .padding(bottom = 8.dp, top = 16.dp)&#10;        )&#10;&#10;        if (expanded) {&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                results.take(5).forEachIndexed { index, item -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                onVideoSelectedFromSearch(item.videoId, item.title, results, index)&#10;                            }&#10;                            .padding(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = item.title,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&#10;                                    text = item.channel ?: &quot;Unknown Channel&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.weight(1f),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;&#10;                                item.duration?.let { duration -&gt;&#10;                                    Text(&#10;                                        text = duration,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/MarqueeText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/MarqueeText.kt" />
              <option name="updatedContent" value="package com.plyr.ui.components&#10;&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.BasicText&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clipToBounds&#10;import androidx.compose.ui.layout.onSizeChanged&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.IntOffset&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun MarqueeText(&#10;    text: String,&#10;    modifier: Modifier = Modifier,&#10;    style: TextStyle = TextStyle(),&#10;    delayMillis: Int = 1000,&#10;    velocity: Float = 30f&#10;) {&#10;    val density = LocalDensity.current&#10;    var textWidth by remember { mutableStateOf(0) }&#10;    var containerWidth by remember { mutableStateOf(0) }&#10;    &#10;    val shouldMarquee = textWidth &gt; containerWidth &amp;&amp; containerWidth &gt; 0&#10;    &#10;    val animationSpec = infiniteRepeatable&lt;Float&gt;(&#10;        animation = tween(&#10;            durationMillis = if (shouldMarquee) ((textWidth - containerWidth) / velocity * 1000).toInt() else 0,&#10;            easing = LinearEasing&#10;        ),&#10;        repeatMode = RepeatMode.Restart&#10;    )&#10;    &#10;    val animatedOffset by animateFloatAsState(&#10;        targetValue = if (shouldMarquee) -(textWidth - containerWidth).toFloat() else 0f,&#10;        animationSpec = animationSpec,&#10;        label = &quot;marquee&quot;&#10;    )&#10;    &#10;    var startAnimation by remember { mutableStateOf(false) }&#10;    &#10;    LaunchedEffect(shouldMarquee) {&#10;        if (shouldMarquee) {&#10;            delay(delayMillis.toLong())&#10;            startAnimation = true&#10;        } else {&#10;            startAnimation = false&#10;        }&#10;    }&#10;    &#10;    Box(&#10;        modifier = modifier&#10;            .clipToBounds()&#10;            .onSizeChanged { size -&gt;&#10;                containerWidth = size.width&#10;            }&#10;    ) {&#10;        BasicText(&#10;            text = text,&#10;            style = style,&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Visible,&#10;            modifier = Modifier&#10;                .onSizeChanged { size -&gt;&#10;                    textWidth = size.width&#10;                }&#10;                .offset {&#10;                    IntOffset(&#10;                        x = if (startAnimation) animatedOffset.toInt() else 0,&#10;                        y = 0&#10;                    )&#10;                }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SearchMainView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SearchMainView.kt" />
              <option name="originalContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.SpotifyAlbum&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifySearchAllResponse&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;&#10;@Composable&#10;fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column {&#10;        // Search header&#10;        Text(&#10;            text = &quot;$ search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search input&#10;        TextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            placeholder = {&#10;                Text(&#10;                    &quot;Search (prefix: yt: youtube, sp: spotify)&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    onSearchTriggered(searchQuery, false)&#10;                }&#10;            ),&#10;            singleLine = true,&#10;            textStyle = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color.White&#10;            ),&#10;            colors = TextFieldDefaults.colors(&#10;                focusedContainerColor = Color.Transparent,&#10;                unfocusedContainerColor = Color.Transparent,&#10;                focusedIndicatorColor = Color.Transparent,&#10;                unfocusedIndicatorColor = Color.Transparent,&#10;                cursorColor = Color(0xFF4ECDC4)&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Loading indicator&#10;        if (isLoading) {&#10;            Text(&#10;                text = &quot;&gt; searching...&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFFFD93D)&#10;                )&#10;            )&#10;        }&#10;&#10;        // Error message&#10;        error?.let { errorMessage -&gt;&#10;            Text(&#10;                text = &quot;&gt; error: $errorMessage&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(vertical = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Search results&#10;        when {&#10;            showSpotifyResults &amp;&amp; spotifyResults != null -&gt; {&#10;                SpotifySearchResults(&#10;                    searchResults = spotifyResults,&#10;                    onAlbumSelected = onAlbumSelected,&#10;                    onPlaylistSelected = onPlaylistSelected,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            results.isNotEmpty() -&gt; {&#10;                YouTubeSearchResults(&#10;                    results = results,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch&#10;                )&#10;            }&#10;            !isLoading &amp;&amp; searchQuery.isNotBlank() -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; no results found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.SpotifyAlbum&#10;import com.plyr.network.SpotifyArtistFull&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifySearchAllResponse&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;&#10;@Composable&#10;fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Agregar parámetro faltante&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column {&#10;        // Search header&#10;        Text(&#10;            text = &quot;$ search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search input&#10;        TextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            placeholder = {&#10;                Text(&#10;                    &quot;Search (prefix: yt: youtube, sp: spotify)&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    onSearchTriggered(searchQuery, false)&#10;                }&#10;            ),&#10;            singleLine = true,&#10;            textStyle = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color.White&#10;            ),&#10;            colors = TextFieldDefaults.colors(&#10;                focusedContainerColor = Color.Transparent,&#10;                unfocusedContainerColor = Color.Transparent,&#10;                focusedIndicatorColor = Color.Transparent,&#10;                unfocusedIndicatorColor = Color.Transparent,&#10;                cursorColor = Color(0xFF4ECDC4)&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Loading indicator&#10;        if (isLoading) {&#10;            Text(&#10;                text = &quot;&gt; searching...&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFFFD93D)&#10;                )&#10;            )&#10;        }&#10;&#10;        // Error message&#10;        error?.let { errorMessage -&gt;&#10;            Text(&#10;                text = &quot;&gt; error: $errorMessage&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(vertical = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Search results&#10;        when {&#10;            showSpotifyResults &amp;&amp; spotifyResults != null -&gt; {&#10;                SpotifySearchResults(&#10;                    searchResults = spotifyResults,&#10;                    onAlbumSelected = onAlbumSelected,&#10;                    onPlaylistSelected = onPlaylistSelected,&#10;                    onArtistSelected = onArtistSelected, // Pasar el parámetro&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            results.isNotEmpty() -&gt; {&#10;                YouTubeSearchResults(&#10;                    results = results,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch&#10;                )&#10;            }&#10;            !isLoading &amp;&amp; searchQuery.isNotBlank() -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; no results found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SpotifyPlaylistDetailView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SpotifyPlaylistDetailView.kt" />
              <option name="originalContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun SpotifyPlaylistDetailView(&#10;    playlist: SpotifyPlaylist,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onBack: () -&gt; Unit,&#10;    onStart: () -&gt; Unit,&#10;    onRandom: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header with playlist info&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Playlist image&#10;            playlist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                AsyncImage(&#10;                    model = imageUrl,&#10;                    contentDescription = null,&#10;                    modifier = Modifier&#10;                        .size(80.dp)&#10;                        .clip(RoundedCornerShape(8.dp))&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;            }&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;$ playlist_detail&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 18.sp,&#10;                        color = Color(0xFF4ECDC4)&#10;                    )&#10;                )&#10;&#10;                Text(&#10;                    text = playlist.name,&#10;                    style = MaterialTheme.typography.titleLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;${playlist.tracks?.total ?: 0} tracks&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Action buttons&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            TextButton(onClick = onBack) {&#10;                Text(&#10;                    &quot;&lt; back&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onStart) {&#10;                Text(&#10;                    &quot;play&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF4ECDC4)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onRandom) {&#10;                Text(&#10;                    &quot;shuffle&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onSave) {&#10;                Text(&#10;                    &quot;save&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF1DB954)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Content&#10;        when {&#10;            isLoading -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;&#10;            error != null -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; error: $error&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFE74C3C)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;&#10;            tracks.isNotEmpty() -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(tracks.size) { index -&gt;&#10;                        val track = tracks[index]&#10;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 2.dp)&#10;                                .clickable {&#10;                                    // Play individual track from playlist&#10;                                    playerViewModel?.let { vm -&gt;&#10;                                        coroutineScope.launch {&#10;                                            val trackEntities = tracks.mapIndexed { idx, spotifyTrack -&gt;&#10;                                                TrackEntity(&#10;                                                    id = &quot;spotify_${playlist.id}_${spotifyTrack.id}&quot;,&#10;                                                    playlistId = playlist.id,&#10;                                                    spotifyTrackId = spotifyTrack.id,&#10;                                                    name = spotifyTrack.name,&#10;                                                    artists = spotifyTrack.getArtistNames(),&#10;                                                    youtubeVideoId = null,&#10;                                                    audioUrl = null,&#10;                                                    position = idx,&#10;                                                    lastSyncTime = System.currentTimeMillis()&#10;                                                )&#10;                                            }&#10;                                            vm.setCurrentPlaylist(trackEntities, index)&#10;                                            vm.loadAudioFromTrack(trackEntities[index])&#10;                                        }&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = Color(0xFF1DB954).copy(alpha = 0.2f)&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                // Track number&#10;                                Text(&#10;                                    text = &quot;${index + 1}.&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 12.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.width(32.dp)&#10;                                )&#10;&#10;                                // Track image (if available from album)&#10;                                track.album?.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                                    AsyncImage(&#10;                                        model = imageUrl,&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier&#10;                                            .size(40.dp)&#10;                                            .clip(RoundedCornerShape(4.dp))&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                }&#10;&#10;                                // Track image (if available from album)&#10;                                track.album?.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                                    AsyncImage(&#10;                                        model = imageUrl,&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier&#10;                                            .size(40.dp)&#10;                                            .clip(RoundedCornerShape(4.dp))&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                }&#10;&#10;                                // Track image (if available from album)&#10;                                track.album?.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                                    AsyncImage(&#10;                                        model = imageUrl,&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier&#10;                                            .size(40.dp)&#10;                                            .clip(RoundedCornerShape(4.dp))&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                }&#10;&#10;                                Column(modifier = Modifier.weight(1f)) {&#10;                                    MarqueeText(&#10;                                        text = track.name,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 14.sp,&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;&#10;                                    Text(&#10;                                        text = track.getArtistNames(),&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 12.sp,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        ),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis&#10;                                    )&#10;                                }&#10;&#10;                                Text(&#10;                                    text = track.getDurationText(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 12.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; no tracks found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun SpotifyPlaylistDetailView(&#10;    playlist: SpotifyPlaylist,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onBack: () -&gt; Unit,&#10;    onStart: () -&gt; Unit,&#10;    onRandom: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header with playlist info&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Playlist image&#10;            playlist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                AsyncImage(&#10;                    model = imageUrl,&#10;                    contentDescription = null,&#10;                    modifier = Modifier&#10;                        .size(80.dp)&#10;                        .clip(RoundedCornerShape(8.dp))&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;            }&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;$ playlist_detail&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 18.sp,&#10;                        color = Color(0xFF4ECDC4)&#10;                    )&#10;                )&#10;&#10;                Text(&#10;                    text = playlist.name,&#10;                    style = MaterialTheme.typography.titleLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;${playlist.tracks?.total ?: 0} tracks&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Action buttons&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            TextButton(onClick = onBack) {&#10;                Text(&#10;                    &quot;&lt; back&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onStart) {&#10;                Text(&#10;                    &quot;play&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF4ECDC4)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onRandom) {&#10;                Text(&#10;                    &quot;shuffle&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onSave) {&#10;                Text(&#10;                    &quot;save&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF1DB954)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Content&#10;        when {&#10;            isLoading -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;&#10;            error != null -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; error: $error&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFE74C3C)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;&#10;            tracks.isNotEmpty() -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(tracks.size) { index -&gt;&#10;                        val track = tracks[index]&#10;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 2.dp)&#10;                                .clickable {&#10;                                    // Play individual track from playlist&#10;                                    playerViewModel?.let { vm -&gt;&#10;                                        coroutineScope.launch {&#10;                                            val trackEntities = tracks.mapIndexed { idx, spotifyTrack -&gt;&#10;                                                TrackEntity(&#10;                                                    id = &quot;spotify_${playlist.id}_${spotifyTrack.id}&quot;,&#10;                                                    playlistId = playlist.id,&#10;                                                    spotifyTrackId = spotifyTrack.id,&#10;                                                    name = spotifyTrack.name,&#10;                                                    artists = spotifyTrack.getArtistNames(),&#10;                                                    youtubeVideoId = null,&#10;                                                    audioUrl = null,&#10;                                                    position = idx,&#10;                                                    lastSyncTime = System.currentTimeMillis()&#10;                                                )&#10;                                            }&#10;                                            vm.setCurrentPlaylist(trackEntities, index)&#10;                                            vm.loadAudioFromTrack(trackEntities[index])&#10;                                        }&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = Color(0xFF1DB954).copy(alpha = 0.2f)&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                // Track number&#10;                                Text(&#10;                                    text = &quot;${index + 1}.&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 12.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.width(32.dp)&#10;                                )&#10;&#10;                                Column(modifier = Modifier.weight(1f)) {&#10;                                    MarqueeText(&#10;                                        text = track.name,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 14.sp,&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;&#10;                                    Text(&#10;                                        text = track.getArtistNames(),&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 12.sp,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        ),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis&#10;                                    )&#10;                                }&#10;&#10;                                Text(&#10;                                    text = track.getDurationText(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 12.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; no tracks found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SpotifySearchResults.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SpotifySearchResults.kt" />
              <option name="originalContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.network.*&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun SpotifySearchResults(&#10;    searchResults: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        contentPadding = PaddingValues(bottom = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (searchResults.tracks.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyTracksSection(&#10;                    tracks = searchResults.tracks.items,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (searchResults.albums.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyAlbumsSection(&#10;                    albums = searchResults.albums.items,&#10;                    onAlbumSelected = onAlbumSelected&#10;                )&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (searchResults.playlists.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyPlaylistsSection(&#10;                    playlists = searchResults.playlists.items,&#10;                    onPlaylistSelected = onPlaylistSelected&#10;                )&#10;            }&#10;        }&#10;&#10;        // Artists section&#10;        if (searchResults.artists.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyArtistsSection(&#10;                    artists = searchResults.artists.items.map { artistFull -&gt;&#10;                        SpotifyArtist(name = artistFull.name)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyTracksSection(&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify tracks [${tracks.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        tracks.take(5).forEach { track -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;                    .clickable {&#10;                        // Play individual track&#10;                        playerViewModel?.let { vm -&gt;&#10;                            coroutineScope.launch {&#10;                                val trackEntity = TrackEntity(&#10;                                    id = &quot;spotify_single_${track.id}&quot;,&#10;                                    playlistId = &quot;single_track&quot;,&#10;                                    spotifyTrackId = track.id,&#10;                                    name = track.name,&#10;                                    artists = track.getArtistNames(),&#10;                                    youtubeVideoId = null,&#10;                                    audioUrl = null,&#10;                                    position = 0,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                                vm.setCurrentPlaylist(listOf(trackEntity), 0)&#10;                                vm.loadAudioFromTrack(trackEntity)&#10;                            }&#10;                        }&#10;                    },&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Track icon&#10;                Text(&#10;                    text = &quot;♫&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        color = Color(0xFF1DB954),&#10;                        fontSize = 16.sp&#10;                    ),&#10;                    modifier = Modifier.padding(end = 12.dp)&#10;                )&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = track.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 14.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = track.getArtistNames(),&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (tracks.size &gt; 5) {&#10;            Text(&#10;                text = &quot;... and ${tracks.size - 5} more tracks&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 12.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                modifier = Modifier.padding(8.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyAlbumsSection(&#10;    albums: List&lt;SpotifyAlbum&gt;,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify albums [${albums.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(albums.size) { index -&gt;&#10;                val album = albums[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(160.dp)&#10;                        .clickable { onAlbumSelected(album) }&#10;                        .padding(8.dp)&#10;                ) {&#10;                    album.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .aspectRatio(1f)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = album.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = album.getArtistNames(),&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyPlaylistsSection(&#10;    playlists: List&lt;SpotifyPlaylist&gt;,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify playlists [${playlists.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(playlists.size) { index -&gt;&#10;                val playlist = playlists[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(160.dp)&#10;                        .clickable { onPlaylistSelected(playlist) }&#10;                        .padding(8.dp)&#10;                ) {&#10;                    playlist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .aspectRatio(1f)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = playlist.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;${playlist.tracks?.total ?: 0} tracks&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyArtistsSection(&#10;    artists: List&lt;SpotifyArtist&gt;&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify artists [${artists.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(artists.size) { index -&gt;&#10;                val artist = artists[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(120.dp)&#10;                        .padding(8.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // SpotifyArtist doesn't have images, so we'll show a placeholder&#10;                    Text(&#10;                        text = &quot;♫&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium.copy(&#10;                            color = Color(0xFF1DB954),&#10;                            fontSize = 24.sp&#10;                        ),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = artist.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.network.*&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.shape.CircleShape&#10;&#10;@Composable&#10;fun SpotifySearchResults(&#10;    searchResults: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Nuevo callback para artistas&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        contentPadding = PaddingValues(bottom = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (searchResults.tracks.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyTracksSection(&#10;                    tracks = searchResults.tracks.items,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (searchResults.albums.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyAlbumsSection(&#10;                    albums = searchResults.albums.items,&#10;                    onAlbumSelected = onAlbumSelected&#10;                )&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (searchResults.playlists.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyPlaylistsSection(&#10;                    playlists = searchResults.playlists.items,&#10;                    onPlaylistSelected = onPlaylistSelected&#10;                )&#10;            }&#10;        }&#10;&#10;        // Artists section&#10;        if (searchResults.artists.items.isNotEmpty()) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                SpotifyArtistsSection(&#10;                    artists = searchResults.artists.items, // Ahora son SpotifyArtistFull&#10;                    onArtistSelected = onArtistSelected&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyTracksSection(&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify tracks [${tracks.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        tracks.take(5).forEach { track -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;                    .clickable {&#10;                        // Play individual track&#10;                        playerViewModel?.let { vm -&gt;&#10;                            coroutineScope.launch {&#10;                                val trackEntity = TrackEntity(&#10;                                    id = &quot;spotify_single_${track.id}&quot;,&#10;                                    playlistId = &quot;single_track&quot;,&#10;                                    spotifyTrackId = track.id,&#10;                                    name = track.name,&#10;                                    artists = track.getArtistNames(),&#10;                                    youtubeVideoId = null,&#10;                                    audioUrl = null,&#10;                                    position = 0,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                                vm.setCurrentPlaylist(listOf(trackEntity), 0)&#10;                                vm.loadAudioFromTrack(trackEntity)&#10;                            }&#10;                        }&#10;                    },&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Track icon&#10;                Text(&#10;                    text = &quot;♫&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        color = Color(0xFF1DB954),&#10;                        fontSize = 16.sp&#10;                    ),&#10;                    modifier = Modifier.padding(end = 12.dp)&#10;                )&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = track.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 14.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = track.getArtistNames(),&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (tracks.size &gt; 5) {&#10;            Text(&#10;                text = &quot;... and ${tracks.size - 5} more tracks&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 12.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                modifier = Modifier.padding(8.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyAlbumsSection(&#10;    albums: List&lt;SpotifyAlbum&gt;,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify albums [${albums.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(albums.size) { index -&gt;&#10;                val album = albums[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(160.dp)&#10;                        .clickable { onAlbumSelected(album) }&#10;                        .padding(8.dp)&#10;                ) {&#10;                    album.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .aspectRatio(1f)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = album.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = album.getArtistNames(),&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyPlaylistsSection(&#10;    playlists: List&lt;SpotifyPlaylist&gt;,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify playlists [${playlists.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(playlists.size) { index -&gt;&#10;                val playlist = playlists[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(160.dp)&#10;                        .clickable { onPlaylistSelected(playlist) }&#10;                        .padding(8.dp)&#10;                ) {&#10;                    playlist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .aspectRatio(1f)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = playlist.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;${playlist.tracks?.total ?: 0} tracks&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyArtistsSection(&#10;    artists: List&lt;SpotifyArtistFull&gt;, // Cambiar de SpotifyArtist a SpotifyArtistFull&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify artists [${artists.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(artists.size) { index -&gt;&#10;                val artist = artists[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(120.dp)&#10;                        .clickable { onArtistSelected(artist) } // Hacer clickeable&#10;                        .padding(8.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Usar imagen del artista si está disponible&#10;                    artist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = &quot;Imagen de ${artist.name}&quot;,&#10;                            modifier = Modifier&#10;                                .size(80.dp)&#10;                                .clip(CircleShape)&#10;                        )&#10;                    } ?: run {&#10;                        // Placeholder si no hay imagen&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(80.dp)&#10;                                .clip(CircleShape)&#10;                                .background(Color(0xFF1DB954).copy(alpha = 0.2f)),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;♫&quot;,&#10;                                style = MaterialTheme.typography.headlineMedium.copy(&#10;                                    color = Color(0xFF1DB954),&#10;                                    fontSize = 24.sp&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = artist.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = MaterialTheme.colorScheme.onSurface&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.navigation&#10;&#10;import androidx.compose.runtime.Stable&#10;&#10;// Estados para navegación&#10;enum class Screen {&#10;    HOME,&#10;    SEARCH,&#10;    QUEUE,&#10;    CONFIG,&#10;    PLAYLISTS&#10;}&#10;&#10;@Stable&#10;data class MenuOption(val screen: Screen, val title: String)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.ui.navigation.MenuOption&#10;import com.plyr.ui.navigation.Screen&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    context: Context,&#10;    onNavigateToScreen: (Screen) -&gt; Unit&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var backPressedTime by remember { mutableStateOf(0L) }&#10;    var showExitMessage by remember { mutableStateOf(false) }&#10;    &#10;    // Handle double back press to exit&#10;    BackHandler {&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - backPressedTime &gt; 2000) {&#10;            backPressedTime = currentTime&#10;            showExitMessage = true&#10;            // Hide message after 2 seconds&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(2000)&#10;                showExitMessage = false&#10;            }&#10;        } else {&#10;            // Exit app&#10;            (context as? Activity)?.finish()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Terminal-style header&#10;        Text(&#10;            text = &quot;$ plyr_home&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Lista de opciones disponibles&#10;        val options = remember {&#10;            listOf(&#10;                MenuOption(Screen.SEARCH, &quot;&gt; search&quot;),&#10;                MenuOption(Screen.PLAYLISTS, &quot;&gt; playlists&quot;),&#10;                MenuOption(Screen.QUEUE, &quot;&gt; queue&quot;),&#10;                MenuOption(Screen.CONFIG, &quot;&gt; settings&quot;)&#10;            )&#10;        }&#10;        &#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                Text(&#10;                    text = option.title,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 20.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable {&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                            onNavigateToScreen(option.screen)&#10;                        }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Exit message&#10;        if (showExitMessage) {&#10;            Text(&#10;                text = &quot;&gt; Press back again to exit&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(top = 8.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun QueueScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_queue&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Queue content&#10;        if (playerViewModel != null) {&#10;            val queueState by playerViewModel.queueState.collectAsStateWithLifecycle()&#10;            val currentQueue = queueState.queue&#10;            &#10;            if (currentQueue.isNotEmpty()) {&#10;                // Queue header&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Current queue [${currentQueue.size}]&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFFFFD93D)&#10;                        )&#10;                    )&#10;                    &#10;                    // Clear queue button&#10;                    TextButton(&#10;                        onClick = { &#10;                            playerViewModel.clearQueue()&#10;                            Log.d(&quot;QueueScreen&quot;, &quot;Queue cleared by user&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;clear&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(Modifier.height(16.dp))&#10;                &#10;                // Queue track list&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(&#10;                        count = currentQueue.size,&#10;                        key = { index -&gt; currentQueue[index].id }&#10;                    ) { index -&gt;&#10;                        val track = currentQueue[index]&#10;                        val isCurrentTrack = queueState.currentIndex == index&#10;                        &#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp, horizontal = 4.dp)&#10;                                .clickable {&#10;                                    coroutineScope.launch {&#10;                                        if (queueState.currentIndex != index) {&#10;                                            playerViewModel.playQueueFromIndex(index)&#10;                                        } else {&#10;                                            playerViewModel.resumeIfPaused()&#10;                                        }&#10;                                    }&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Starting queue from index: $index&quot;)&#10;                                },&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Position and status indicator&#10;                            Text(&#10;                                text = if (isCurrentTrack) &quot;♪ &quot; else &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            // Track name&#10;                            MarqueeText(&#10;                                text = track.name,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFFE0E0E0) else Color(0xFFBDC3C7)&#10;                                ),&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            &#10;                            // Remove from queue button&#10;                            TextButton(&#10;                                onClick = { &#10;                                    playerViewModel.removeFromQueue(index)&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Removed track from queue at index: $index&quot;)&#10;                                }&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;×&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Empty queue message&#10;                Text(&#10;                    text = &quot;Queue is empty&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(32.dp)&#10;                )&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Player not available&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;&#10;/**&#10; * Extensiones para integrar PlayerViewModel con notificaciones de música&#10; * &#10; * Estas extensiones facilitan el uso del sistema de notificaciones&#10; * sin modificar directamente el PlayerViewModel existente.&#10; */&#10;&#10;/**&#10; * Inicializa el manager de notificaciones&#10; */&#10;fun PlayerViewModel.initializeNotifications(context: Context): MusicNotificationManager {&#10;    return MusicNotificationManager(context).apply {&#10;        startService()&#10;    }&#10;}&#10;&#10;/**&#10; * Reproduce un track con notificación&#10; */&#10;fun PlayerViewModel.playWithNotification(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity,&#10;    onAudioUrlReady: (String) -&gt; Unit&#10;) {&#10;    // Actualizar la información del track en la notificación&#10;    notificationManager.updateSongInfo(track)&#10;    &#10;    // Tu lógica existente de reproducción aquí&#10;    // Cuando tengas la URL de audio, llamar:&#10;    // onAudioUrlReady(audioUrl)&#10;}&#10;&#10;/**&#10; * Actualiza la notificación cuando cambia el track&#10; */&#10;fun PlayerViewModel.updateNotificationTrack(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity?&#10;) {&#10;    track?.let {&#10;        notificationManager.updateSongInfo(it.name, it.artists)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>