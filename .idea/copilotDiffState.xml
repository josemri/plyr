<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/MainActivity.kt" />
              <option name="originalContent" value="package com.plyr&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.Bundle&#10;import android.os.IBinder&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.*&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.plyr.service.MusicService&#10;import com.plyr.ui.AudioListScreen&#10;import com.plyr.ui.ExoPlyrScreen&#10;import com.plyr.ui.FloatingMusicControls&#10;import com.plyr.ui.theme.TerminalTheme&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyTokens&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyAuthEvent&#10;import com.plyr.model.AudioItem&#10;import com.plyr.database.TrackEntity&#10;import android.net.Uri&#10;import androidx.lifecycle.lifecycleScope&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * MainActivity - Actividad principal de la aplicación&#10; * &#10; * Esta actividad maneja:&#10; * - Conexión con el MusicService para reproducción en segundo plano&#10; * - Navegación entre pantallas (lista de audio, reproductor, configuración)&#10; * - Callbacks de OAuth de Spotify para autenticación&#10; * - Configuración del tema de la aplicación&#10; * - Coordinación entre UI y PlayerViewModel&#10; * &#10; * La aplicación usa un diseño modular con:&#10; * - PlayerViewModel para lógica de reproducción&#10; * - MusicService para reproducción en segundo plano&#10; * - Componentes UI independientes y reutilizables&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    &#10;    // === PROPIEDADES ===&#10;    &#10;    /** Referencia al servicio de música para reproducción en segundo plano */&#10;    private var musicService: MusicService? = null&#10;    &#10;    /** Indica si el servicio está conectado */&#10;    private var bound = false&#10;    &#10;    /** Indica si la aplicación está siendo cerrada intencionalmente */&#10;    private var isAppClosing = false&#10;&#10;    // === CONFIGURACIÓN DEL SERVICIO ===&#10;    &#10;    /**&#10;     * Conexión con el MusicService para comunicación bidireccional.&#10;     */&#10;    private val connection = object : ServiceConnection {&#10;        override fun onServiceConnected(className: ComponentName, service: IBinder) {&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            bound = true&#10;            println(&quot;MainActivity: Servicio de música conectado&quot;)&#10;        }&#10;        &#10;        override fun onServiceDisconnected(arg0: ComponentName) {&#10;            bound = false&#10;            println(&quot;MainActivity: Servicio de música desconectado&quot;)&#10;        }&#10;    }    &#10;    // === CICLO DE VIDA DE LA ACTIVIDAD ===&#10;    &#10;    /**&#10;     * Inicializa la actividad, configura el servicio de música y establece el contenido UI.&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        &#10;        // Procesar callback de Spotify OAuth si existe&#10;        handleSpotifyCallback(intent)&#10;        &#10;        // Configurar UI edge-to-edge&#10;        enableEdgeToEdge()&#10;        &#10;        // Configurar servicio de música&#10;        setupMusicService()&#10;        &#10;        // Configurar contenido UI&#10;        setupUIContent()&#10;    }&#10;    &#10;    /**&#10;     * Configura e inicia el servicio de música.&#10;     */&#10;    private fun setupMusicService() {&#10;        Intent(this, MusicService::class.java).also { intent -&gt;&#10;            startService(intent)&#10;            bindService(intent, connection, Context.BIND_AUTO_CREATE)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Configura el contenido principal de la UI.&#10;     */&#10;    private fun setupUIContent() {&#10;        setContent {&#10;            var playerViewModel = (application as PlyrApp).playerViewModel&#10;            //val playerViewModel: PlayerViewModel = viewModel()&#10;            var currentScreen by remember { mutableStateOf(&quot;list&quot;) }&#10;            var selectedVideoId by remember { mutableStateOf&lt;String?&gt;(null) }&#10;            &#10;            // Gestión del tema&#10;            val selectedTheme = remember { mutableStateOf(Config.getTheme(this@MainActivity)) }&#10;            val isDarkTheme = selectedTheme.value == &quot;dark&quot;&#10;&#10;            TerminalTheme(isDark = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    MainScreenContainer(&#10;                        currentScreen = currentScreen,&#10;                        onScreenChange = { currentScreen = it },&#10;                        selectedVideoId = selectedVideoId,&#10;                        onVideoIdChange = { selectedVideoId = it },&#10;                        playerViewModel = playerViewModel,&#10;                        selectedTheme = selectedTheme&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Contenedor principal que organiza las pantallas y controles flotantes.&#10;     */&#10;    @Composable&#10;    private fun MainScreenContainer(&#10;        currentScreen: String,&#10;        onScreenChange: (String) -&gt; Unit,&#10;        selectedVideoId: String?,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel,&#10;        selectedTheme: MutableState&lt;String&gt;&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .statusBarsPadding()&#10;        ) {&#10;            // Área de contenido principal con padding para controles flotantes&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 140.dp)&#10;            ) {&#10;                ScreenContent(&#10;                    currentScreen = currentScreen,&#10;                    onScreenChange = onScreenChange,&#10;                    onVideoIdChange = onVideoIdChange,&#10;                    playerViewModel = playerViewModel,&#10;                    selectedTheme = selectedTheme&#10;                )&#10;            }&#10;&#10;            // Controles flotantes de música&#10;            FloatingMusicControls(&#10;                playerViewModel = playerViewModel,&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 48.dp)&#10;            )&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja el contenido de las diferentes pantallas.&#10;     */&#10;    @Composable&#10;    private fun ScreenContent(&#10;        currentScreen: String,&#10;        onScreenChange: (String) -&gt; Unit,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel,&#10;        selectedTheme: MutableState&lt;String&gt;&#10;    ) {&#10;        when (currentScreen) {&#10;            &quot;player&quot; -&gt; {&#10;                playerViewModel.exoPlayer?.let { player -&gt;&#10;                    ExoPlyrScreen(&#10;                        player = player,&#10;                        onBack = { onScreenChange(&quot;list&quot;) }&#10;                    )&#10;                }&#10;            }&#10;            else -&gt; {&#10;                AudioListScreen(&#10;                    context = this@MainActivity,&#10;                    onVideoSelected = { videoId, title -&gt;&#10;                        handleVideoSelection(videoId, title, onVideoIdChange, playerViewModel)&#10;                    },&#10;                    onVideoSelectedFromSearch = { videoId, title, searchResults, selectedIndex -&gt;&#10;                        handleVideoSelectionFromSearch(videoId, title, searchResults, selectedIndex, onVideoIdChange, playerViewModel)&#10;                    },&#10;                    onThemeChanged = { newTheme -&gt;&#10;                        selectedTheme.value = newTheme&#10;                    },&#10;                    playerViewModel = playerViewModel&#10;                )&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja la selección de un video para reproducir.&#10;     * Si el video viene de una búsqueda, configura toda la lista como playlist.&#10;     */&#10;    private fun handleVideoSelection(&#10;        videoId: String,&#10;        title: String,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel&#10;    ) {&#10;        onVideoIdChange(videoId)&#10;        playerViewModel.initializePlayer()&#10;        playerViewModel.loadAudio(videoId, title)&#10;&#10;        // Si hay una playlist activa, pasarla al servicio para reproducción en background&#10;        val playlist = playerViewModel.currentPlaylist.value&#10;        val currentIndex = playerViewModel.currentTrackIndex.value ?: 0&#10;        if (playlist != null &amp;&amp; playlist.isNotEmpty()) {&#10;            // Obtener las URLs de audio para cada track&#10;            // NOTA: Esto requiere que los YouTube IDs ya estén resueltos o que el servicio pueda resolverlos&#10;            val audioUrls = playlist.mapNotNull { track -&gt;&#10;                // Usar el YouTube ID del track para obtener la URL de audio&#10;                track.youtubeVideoId ?: track.spotifyTrackId&#10;            }&#10;            if (audioUrls.isNotEmpty()) {&#10;                musicService?.playPlaylist(audioUrls, currentIndex)&#10;            }&#10;        } else {&#10;            // Si no hay playlist, reproducir solo el videoId&#10;            musicService?.playAudio(videoId)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja la selección de un video desde resultados de búsqueda.&#10;     * Configura toda la lista de resultados como playlist temporal.&#10;     */&#10;    private fun handleVideoSelectionFromSearch(&#10;        videoId: String,&#10;        title: String,&#10;        searchResults: List&lt;AudioItem&gt;,&#10;        selectedIndex: Int,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel&#10;    ) {&#10;        onVideoIdChange(videoId)&#10;        playerViewModel.initializePlayer()&#10;        &#10;        // Convertir los resultados de búsqueda a TrackEntity para crear una playlist temporal&#10;        val searchPlaylist = searchResults.mapIndexed { index, audioItem -&gt;&#10;            TrackEntity(&#10;                id = &quot;search_${audioItem.videoId ?: audioItem.title}_$index&quot;,&#10;                playlistId = &quot;search_results_${System.currentTimeMillis()}&quot;,&#10;                spotifyTrackId = &quot;&quot;, // Empty string for YouTube tracks&#10;                name = audioItem.title,&#10;                artists = audioItem.channel ?: &quot;Desconocido&quot;,&#10;                youtubeVideoId = audioItem.videoId,&#10;                audioUrl = null,&#10;                position = index,&#10;                lastSyncTime = System.currentTimeMillis()&#10;            )&#10;        }&#10;        &#10;        // Establecer la playlist de búsqueda en el PlayerViewModel&#10;        playerViewModel.setCurrentPlaylist(searchPlaylist, selectedIndex)&#10;        &#10;        // Cargar el video seleccionado&#10;        playerViewModel.loadAudio(videoId, title)&#10;&#10;        // Configurar el servicio para reproducción en background&#10;        val audioUrls = searchPlaylist.mapNotNull { it.youtubeVideoId }&#10;        if (audioUrls.isNotEmpty()) {&#10;            musicService?.playPlaylist(audioUrls, selectedIndex)&#10;        }&#10;    }    &#10;    /**&#10;     * Limpia recursos al destruir la actividad.&#10;     */&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;&#10;        // Si la aplicación se está cerrando, detener completamente el servicio&#10;        if (isAppClosing || isFinishing) {&#10;            stopMusicServiceCompletely()&#10;        } else {&#10;            // Solo desconectar el binding, pero mantener el servicio para reproducción en background&#10;            disconnectMusicService()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el botón de back para cerrar la aplicación completamente&#10;     */&#10;    override fun onBackPressed() {&#10;        // Marcar que la aplicación se está cerrando intencionalmente&#10;        isAppClosing = true&#10;        super.onBackPressed()&#10;    }&#10;&#10;    /**&#10;     * Detiene completamente el servicio de música y cierra la aplicación&#10;     */&#10;    private fun stopMusicServiceCompletely() {&#10;        musicService?.let { service -&gt;&#10;            // Parar la reproducción&#10;            val playerViewModel = (application as PlyrApp).playerViewModel&#10;            playerViewModel.pausePlayer()&#10;&#10;            // Detener el servicio foreground&#10;            service.stopForegroundService()&#10;        }&#10;&#10;        // Desconectar el binding&#10;        disconnectMusicService()&#10;&#10;        // Detener el servicio completamente&#10;        stopService(Intent(this, MusicService::class.java))&#10;    }&#10;    &#10;    // === MANEJO DE INTENTS ===&#10;    &#10;    /**&#10;     * Maneja nuevos intents, especialmente callbacks de Spotify OAuth.&#10;     */&#10;    override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        setIntent(intent)&#10;        handleSpotifyCallback(intent)&#10;    }&#10;    &#10;    // === AUTENTICACIÓN DE SPOTIFY ===&#10;    &#10;    /**&#10;     * Procesa callbacks de OAuth de Spotify cuando el usuario autoriza la aplicación.&#10;     * &#10;     * @param intent Intent que puede contener datos de callback de Spotify&#10;     */&#10;    private fun handleSpotifyCallback(intent: Intent?) {&#10;        intent?.data?.let { uri -&gt;&#10;            if (isSpotifyCallback(uri)) {&#10;                processSpotifyAuthResult(uri)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el URI es un callback de Spotify OAuth.&#10;     * @param uri URI a verificar&#10;     * @return true si es un callback de Spotify&#10;     */&#10;    private fun isSpotifyCallback(uri: Uri): Boolean {&#10;        return uri.scheme == &quot;plyr&quot; &amp;&amp; uri.host == &quot;spotify&quot;&#10;    }&#10;    &#10;    /**&#10;     * Procesa el resultado de la autorización de Spotify.&#10;     * @param uri URI con los parámetros de respuesta de OAuth&#10;     */&#10;    private fun processSpotifyAuthResult(uri: Uri) {&#10;        val code = uri.getQueryParameter(&quot;code&quot;)&#10;        val error = uri.getQueryParameter(&quot;error&quot;)&#10;        &#10;        when {&#10;            error != null -&gt; handleSpotifyAuthError(error)&#10;            code != null -&gt; handleSpotifyAuthSuccess(code)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja errores en la autorización de Spotify.&#10;     * @param error Código de error recibido&#10;     */&#10;    private fun handleSpotifyAuthError(error: String) {&#10;        println(&quot;MainActivity: Spotify OAuth error: $error&quot;)&#10;        SpotifyAuthEvent.onAuthComplete(false, &quot;cancelled_by_user&quot;)&#10;    }&#10;    &#10;    /**&#10;     * Maneja la autorización exitosa de Spotify.&#10;     * @param code Código de autorización recibido&#10;     */&#10;    private fun handleSpotifyAuthSuccess(code: String) {&#10;        SpotifyRepository.exchangeCodeForTokens(this, code) { tokens, tokenError -&gt;&#10;            if (tokens != null &amp;&amp; tokenError == null) {&#10;                saveSpotifyTokens(tokens)&#10;                println(&quot;MainActivity: Spotify OAuth success: Tokens guardados&quot;)&#10;                SpotifyAuthEvent.onAuthComplete(true, &quot;connected_successfully&quot;)&#10;            } else {&#10;                println(&quot;MainActivity: Error intercambiando tokens: $tokenError&quot;)&#10;                SpotifyAuthEvent.onAuthComplete(false, &quot;token_exchange_failed&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Guarda los tokens de Spotify en las preferencias.&#10;     * @param tokens Tokens de acceso y refresh recibidos&#10;     */&#10;    private fun saveSpotifyTokens(tokens: SpotifyTokens) {&#10;        Config.setSpotifyTokens(&#10;            this,&#10;            tokens.accessToken,&#10;            tokens.refreshToken,&#10;            tokens.expiresIn&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.Bundle&#10;import android.os.IBinder&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.*&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.plyr.service.MusicService&#10;import com.plyr.ui.AudioListScreen&#10;import com.plyr.ui.ExoPlyrScreen&#10;import com.plyr.ui.FloatingMusicControls&#10;import com.plyr.ui.theme.TerminalTheme&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyTokens&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyAuthEvent&#10;import com.plyr.model.AudioItem&#10;import com.plyr.database.TrackEntity&#10;import android.net.Uri&#10;import androidx.lifecycle.lifecycleScope&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * MainActivity - Actividad principal de la aplicación&#10; * &#10; * Esta actividad maneja:&#10; * - Conexión con el MusicService para reproducción en segundo plano&#10; * - Navegación entre pantallas (lista de audio, reproductor, configuración)&#10; * - Callbacks de OAuth de Spotify para autenticación&#10; * - Configuración del tema de la aplicación&#10; * - Coordinación entre UI y PlayerViewModel&#10; * &#10; * La aplicación usa un diseño modular con:&#10; * - PlayerViewModel para lógica de reproducción&#10; * - MusicService para reproducción en segundo plano&#10; * - Componentes UI independientes y reutilizables&#10; */&#10;class MainActivity : ComponentActivity() {&#10;    &#10;    // === PROPIEDADES ===&#10;    &#10;    /** Referencia al servicio de música para reproducción en segundo plano */&#10;    private var musicService: MusicService? = null&#10;    &#10;    /** Indica si el servicio está conectado */&#10;    private var bound = false&#10;    &#10;    /** Indica si la aplicación está siendo cerrada intencionalmente */&#10;    private var isAppClosing = false&#10;&#10;    // === CONFIGURACIÓN DEL SERVICIO ===&#10;    &#10;    /**&#10;     * Conexión con el MusicService para comunicación bidireccional.&#10;     */&#10;    private val connection = object : ServiceConnection {&#10;        override fun onServiceConnected(className: ComponentName, service: IBinder) {&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            bound = true&#10;            println(&quot;MainActivity: Servicio de música conectado&quot;)&#10;        }&#10;        &#10;        override fun onServiceDisconnected(arg0: ComponentName) {&#10;            bound = false&#10;            println(&quot;MainActivity: Servicio de música desconectado&quot;)&#10;        }&#10;    }    &#10;    // === CICLO DE VIDA DE LA ACTIVIDAD ===&#10;    &#10;    /**&#10;     * Inicializa la actividad, configura el servicio de música y establece el contenido UI.&#10;     */&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        &#10;        // Procesar callback de Spotify OAuth si existe&#10;        handleSpotifyCallback(intent)&#10;        &#10;        // Configurar UI edge-to-edge&#10;        enableEdgeToEdge()&#10;        &#10;        // Configurar servicio de música&#10;        setupMusicService()&#10;        &#10;        // Configurar contenido UI&#10;        setupUIContent()&#10;    }&#10;    &#10;    /**&#10;     * Configura e inicia el servicio de música.&#10;     */&#10;    private fun setupMusicService() {&#10;        Intent(this, MusicService::class.java).also { intent -&gt;&#10;            startService(intent)&#10;            bindService(intent, connection, Context.BIND_AUTO_CREATE)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Configura el contenido principal de la UI.&#10;     */&#10;    private fun setupUIContent() {&#10;        setContent {&#10;            var playerViewModel = (application as PlyrApp).playerViewModel&#10;            //val playerViewModel: PlayerViewModel = viewModel()&#10;            var currentScreen by remember { mutableStateOf(&quot;list&quot;) }&#10;            var selectedVideoId by remember { mutableStateOf&lt;String?&gt;(null) }&#10;            &#10;            // Gestión del tema&#10;            val selectedTheme = remember { mutableStateOf(Config.getTheme(this@MainActivity)) }&#10;            val isDarkTheme = selectedTheme.value == &quot;dark&quot;&#10;&#10;            TerminalTheme(isDark = isDarkTheme) {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    MainScreenContainer(&#10;                        currentScreen = currentScreen,&#10;                        onScreenChange = { currentScreen = it },&#10;                        selectedVideoId = selectedVideoId,&#10;                        onVideoIdChange = { selectedVideoId = it },&#10;                        playerViewModel = playerViewModel,&#10;                        selectedTheme = selectedTheme&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Contenedor principal que organiza las pantallas y controles flotantes.&#10;     */&#10;    @Composable&#10;    private fun MainScreenContainer(&#10;        currentScreen: String,&#10;        onScreenChange: (String) -&gt; Unit,&#10;        selectedVideoId: String?,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel,&#10;        selectedTheme: MutableState&lt;String&gt;&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .statusBarsPadding()&#10;        ) {&#10;            // Área de contenido principal con padding para controles flotantes&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(bottom = 140.dp)&#10;            ) {&#10;                ScreenContent(&#10;                    currentScreen = currentScreen,&#10;                    onScreenChange = onScreenChange,&#10;                    onVideoIdChange = onVideoIdChange,&#10;                    playerViewModel = playerViewModel,&#10;                    selectedTheme = selectedTheme&#10;                )&#10;            }&#10;&#10;            // Controles flotantes de música&#10;            FloatingMusicControls(&#10;                playerViewModel = playerViewModel,&#10;                modifier = Modifier&#10;                    .align(Alignment.BottomCenter)&#10;                    .padding(bottom = 48.dp)&#10;            )&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja el contenido de las diferentes pantallas.&#10;     */&#10;    @Composable&#10;    private fun ScreenContent(&#10;        currentScreen: String,&#10;        onScreenChange: (String) -&gt; Unit,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel,&#10;        selectedTheme: MutableState&lt;String&gt;&#10;    ) {&#10;        when (currentScreen) {&#10;            &quot;player&quot; -&gt; {&#10;                playerViewModel.exoPlayer?.let { player -&gt;&#10;                    ExoPlyrScreen(&#10;                        player = player,&#10;                        onBack = { onScreenChange(&quot;list&quot;) }&#10;                    )&#10;                }&#10;            }&#10;            else -&gt; {&#10;                AudioListScreen(&#10;                    context = this@MainActivity,&#10;                    onVideoSelected = { videoId, title -&gt;&#10;                        handleVideoSelection(videoId, title, onVideoIdChange, playerViewModel)&#10;                    },&#10;                    onVideoSelectedFromSearch = { videoId, title, searchResults, selectedIndex -&gt;&#10;                        handleVideoSelectionFromSearch(videoId, title, searchResults, selectedIndex, onVideoIdChange, playerViewModel)&#10;                    },&#10;                    onThemeChanged = { newTheme -&gt;&#10;                        selectedTheme.value = newTheme&#10;                    },&#10;                    playerViewModel = playerViewModel&#10;                )&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja la selección de un video para reproducir.&#10;     * Si el video viene de una búsqueda, configura toda la lista como playlist.&#10;     */&#10;    private fun handleVideoSelection(&#10;        videoId: String,&#10;        title: String,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel&#10;    ) {&#10;        onVideoIdChange(videoId)&#10;        playerViewModel.initializePlayer()&#10;        playerViewModel.loadAudio(videoId, title)&#10;&#10;        // Si hay una playlist activa, pasarla al servicio para reproducción en background&#10;        val playlist = playerViewModel.currentPlaylist.value&#10;        val currentIndex = playerViewModel.currentTrackIndex.value ?: 0&#10;        if (playlist != null &amp;&amp; playlist.isNotEmpty()) {&#10;            // Obtener las URLs de audio para cada track&#10;            // NOTA: Esto requiere que los YouTube IDs ya estén resueltos o que el servicio pueda resolverlos&#10;            val audioUrls = playlist.mapNotNull { track -&gt;&#10;                // Usar el YouTube ID del track para obtener la URL de audio&#10;                track.youtubeVideoId ?: track.spotifyTrackId&#10;            }&#10;            if (audioUrls.isNotEmpty()) {&#10;                musicService?.playPlaylist(audioUrls, currentIndex)&#10;            }&#10;        } else {&#10;            // Si no hay playlist, reproducir solo el videoId&#10;            musicService?.playAudio(videoId)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja la selección de un video desde resultados de búsqueda.&#10;     * Configura toda la lista de resultados como playlist temporal.&#10;     */&#10;    private fun handleVideoSelectionFromSearch(&#10;        videoId: String,&#10;        title: String,&#10;        searchResults: List&lt;AudioItem&gt;,&#10;        selectedIndex: Int,&#10;        onVideoIdChange: (String?) -&gt; Unit,&#10;        playerViewModel: PlayerViewModel&#10;    ) {&#10;        onVideoIdChange(videoId)&#10;        playerViewModel.initializePlayer()&#10;        &#10;        // Convertir los resultados de búsqueda a TrackEntity para crear una playlist temporal&#10;        val searchPlaylist = searchResults.mapIndexed { index, audioItem -&gt;&#10;            TrackEntity(&#10;                id = &quot;search_${audioItem.videoId ?: audioItem.title}_$index&quot;,&#10;                playlistId = &quot;search_results_${System.currentTimeMillis()}&quot;,&#10;                spotifyTrackId = &quot;&quot;, // Empty string for YouTube tracks&#10;                name = audioItem.title,&#10;                artists = audioItem.channel ?: &quot;Desconocido&quot;,&#10;                youtubeVideoId = audioItem.videoId,&#10;                audioUrl = null,&#10;                position = index,&#10;                lastSyncTime = System.currentTimeMillis()&#10;            )&#10;        }&#10;        &#10;        // Establecer la playlist de búsqueda en el PlayerViewModel&#10;        playerViewModel.setCurrentPlaylist(searchPlaylist, selectedIndex)&#10;        &#10;        // Cargar el video seleccionado&#10;        playerViewModel.loadAudio(videoId, title)&#10;&#10;        // Configurar el servicio para reproducción en background&#10;        val audioUrls = searchPlaylist.mapNotNull { it.youtubeVideoId }&#10;        if (audioUrls.isNotEmpty()) {&#10;            musicService?.playPlaylist(audioUrls, selectedIndex)&#10;        }&#10;    }    &#10;    /**&#10;     * Limpia recursos al destruir la actividad.&#10;     */&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;&#10;        // Si la aplicación se está cerrando, detener completamente el servicio&#10;        if (isAppClosing || isFinishing) {&#10;            stopMusicServiceCompletely()&#10;        } else {&#10;            // Solo desconectar el binding, pero mantener el servicio para reproducción en background&#10;            disconnectMusicService()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Maneja el botón de back para cerrar la aplicación completamente&#10;     */&#10;    override fun onBackPressed() {&#10;        // Marcar que la aplicación se está cerrando intencionalmente&#10;        isAppClosing = true&#10;        super.onBackPressed()&#10;    }&#10;&#10;    /**&#10;     * Detiene completamente el servicio de música y cierra la aplicación&#10;     */&#10;    private fun stopMusicServiceCompletely() {&#10;        musicService?.let { service -&gt;&#10;            // Parar la reproducción&#10;            val playerViewModel = (application as PlyrApp).playerViewModel&#10;            playerViewModel.pausePlayer()&#10;&#10;            // Detener el servicio foreground&#10;            service.stopForegroundService()&#10;        }&#10;&#10;        // Desconectar el binding&#10;        disconnectMusicService()&#10;&#10;        // Detener el servicio completamente&#10;        stopService(Intent(this, MusicService::class.java))&#10;    }&#10;    &#10;    /**&#10;     * Desconecta el servicio de música si está conectado.&#10;     */&#10;    private fun disconnectMusicService() {&#10;        if (bound) {&#10;            unbindService(connection)&#10;            bound = false&#10;        }&#10;    }&#10;    &#10;    // === MANEJO DE INTENTS ===&#10;    &#10;    /**&#10;     * Maneja nuevos intents, especialmente callbacks de Spotify OAuth.&#10;     */&#10;    override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        setIntent(intent)&#10;        handleSpotifyCallback(intent)&#10;    }&#10;    &#10;    // === AUTENTICACIÓN DE SPOTIFY ===&#10;    &#10;    /**&#10;     * Procesa callbacks de OAuth de Spotify cuando el usuario autoriza la aplicación.&#10;     * &#10;     * @param intent Intent que puede contener datos de callback de Spotify&#10;     */&#10;    private fun handleSpotifyCallback(intent: Intent?) {&#10;        intent?.data?.let { uri -&gt;&#10;            if (isSpotifyCallback(uri)) {&#10;                processSpotifyAuthResult(uri)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el URI es un callback de Spotify OAuth.&#10;     * @param uri URI a verificar&#10;     * @return true si es un callback de Spotify&#10;     */&#10;    private fun isSpotifyCallback(uri: Uri): Boolean {&#10;        return uri.scheme == &quot;plyr&quot; &amp;&amp; uri.host == &quot;spotify&quot;&#10;    }&#10;    &#10;    /**&#10;     * Procesa el resultado de la autorización de Spotify.&#10;     * @param uri URI con los parámetros de respuesta de OAuth&#10;     */&#10;    private fun processSpotifyAuthResult(uri: Uri) {&#10;        val code = uri.getQueryParameter(&quot;code&quot;)&#10;        val error = uri.getQueryParameter(&quot;error&quot;)&#10;        &#10;        when {&#10;            error != null -&gt; handleSpotifyAuthError(error)&#10;            code != null -&gt; handleSpotifyAuthSuccess(code)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Maneja errores en la autorización de Spotify.&#10;     * @param error Código de error recibido&#10;     */&#10;    private fun handleSpotifyAuthError(error: String) {&#10;        println(&quot;MainActivity: Spotify OAuth error: $error&quot;)&#10;        SpotifyAuthEvent.onAuthComplete(false, &quot;cancelled_by_user&quot;)&#10;    }&#10;    &#10;    /**&#10;     * Maneja la autorización exitosa de Spotify.&#10;     * @param code Código de autorización recibido&#10;     */&#10;    private fun handleSpotifyAuthSuccess(code: String) {&#10;        SpotifyRepository.exchangeCodeForTokens(this, code) { tokens, tokenError -&gt;&#10;            if (tokens != null &amp;&amp; tokenError == null) {&#10;                saveSpotifyTokens(tokens)&#10;                println(&quot;MainActivity: Spotify OAuth success: Tokens guardados&quot;)&#10;                SpotifyAuthEvent.onAuthComplete(true, &quot;connected_successfully&quot;)&#10;            } else {&#10;                println(&quot;MainActivity: Error intercambiando tokens: $tokenError&quot;)&#10;                SpotifyAuthEvent.onAuthComplete(false, &quot;token_exchange_failed&quot;)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Guarda los tokens de Spotify en las preferencias.&#10;     * @param tokens Tokens de acceso y refresh recibidos&#10;     */&#10;    private fun saveSpotifyTokens(tokens: SpotifyTokens) {&#10;        Config.setSpotifyTokens(&#10;            this,&#10;            tokens.accessToken,&#10;            tokens.refreshToken,&#10;            tokens.expiresIn&#10;        )&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/database/PlaylistLocalRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/database/PlaylistLocalRepository.kt" />
              <option name="originalContent" value="package com.plyr.database&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.asLiveData&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.utils.Config&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import android.util.Log&#10;&#10;/**&#10; * PlaylistLocalRepository - Repositorio para gestión local de playlists y tracks&#10; * &#10; * Esta clase maneja:&#10; * - Operaciones CRUD sobre playlists y tracks en base de datos local&#10; * - Sincronización automática con Spotify&#10; * - Caché inteligente para evitar consultas innecesarias&#10; * - Observación de cambios mediante LiveData/Flow&#10; * - Gestión de YouTube IDs para tracks&#10; * &#10; * Proporciona una capa de abstracción entre la UI y la base de datos,&#10; * asegurando que los datos estén siempre actualizados y sincronizados.&#10; */&#10;class PlaylistLocalRepository(context: Context) {&#10;&#10;    // === PROPIEDADES ===&#10;&#10;    /** Base de datos local para playlists y tracks */&#10;    private val database = PlaylistDatabase.getDatabase(context)&#10;&#10;    /** DAO para operaciones sobre playlists */&#10;    private val playlistDao = database.playlistDao()&#10;&#10;    /** DAO para operaciones sobre tracks */&#10;    private val trackDao = database.trackDao()&#10;&#10;    /** Contexto de aplicación para operaciones persistentes */&#10;    private val appContext = context.applicationContext&#10;&#10;    // === CONSTANTES ===&#10;&#10;    companion object {&#10;        private const val TAG = &quot;PlaylistLocalRepo&quot;&#10;&#10;        /** Intervalo de sincronización automática (24 horas) */&#10;        private const val SYNC_INTERVAL = 24 * 60 * 60 * 1000L&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - OBSERVACIÓN DE DATOS ===&#10;&#10;    /**&#10;     * Observa todas las playlists locales mediante LiveData.&#10;     * Los cambios se notifican automáticamente a los observadores.&#10;     *&#10;     * @return LiveData que emite la lista de playlists cuando cambian&#10;     */&#10;    fun getAllPlaylistsLiveData(): LiveData&lt;List&lt;PlaylistEntity&gt;&gt; {&#10;        return playlistDao.getAllPlaylists().asLiveData()&#10;    }&#10;&#10;    /**&#10;     * Observa los tracks de una playlist específica.&#10;     *&#10;     * @param playlistId ID de la playlist a observar&#10;     * @return LiveData que emite los tracks cuando cambian&#10;     */&#10;    fun getTracksByPlaylistLiveData(playlistId: String): LiveData&lt;List&lt;TrackEntity&gt;&gt; {&#10;        return trackDao.getTracksByPlaylist(playlistId).asLiveData()&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - SINCRONIZACIÓN AUTOMÁTICA ===&#10;&#10;    /**&#10;     * Obtiene todas las playlists con sincronización automática.&#10;     * Verifica si es necesario sincronizar con Spotify y lo hace automáticamente.&#10;     *&#10;     * @return Lista de playlists actualizadas&#10;     */&#10;    suspend fun getPlaylistsWithAutoSync(): List&lt;PlaylistEntity&gt; = withContext(Dispatchers.IO) {&#10;        Log.d(TAG, &quot;Obteniendo playlists con sincronización automática&quot;)&#10;&#10;        val localPlaylists = playlistDao.getAllPlaylistsSync()&#10;&#10;        // Verificar si necesita sincronización&#10;        val shouldSync = shouldSyncPlaylists(localPlaylists)&#10;&#10;        return@withContext if (shouldSync) {&#10;            Log.d(TAG, &quot;Iniciando sincronización de playlists&quot;)&#10;            syncPlaylistsFromSpotify()&#10;            playlistDao.getAllPlaylistsSync()&#10;        } else {&#10;            Log.d(TAG, &quot;Las playlists están actualizadas&quot;)&#10;            localPlaylists&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Obtiene los tracks de una playlist con sincronización automática.&#10;     * Verifica si es necesario sincronizar con Spotify y lo hace automáticamente.&#10;     *&#10;     * @param playlistId ID de la playlist&#10;     * @return Lista de tracks actualizados&#10;     */&#10;    suspend fun getTracksWithAutoSync(playlistId: String): List&lt;TrackEntity&gt; =&#10;        withContext(Dispatchers.IO) {&#10;            Log.d(TAG, &quot;Obteniendo tracks para playlist $playlistId con sincronización automática&quot;)&#10;&#10;            val localTracks = trackDao.getTracksByPlaylistSync(playlistId)&#10;            val playlist = playlistDao.getPlaylistById(playlistId)&#10;&#10;            // Verificar si necesita sincronización&#10;            val shouldSync = shouldSyncTracks(playlist)&#10;&#10;            if (shouldSync) {&#10;                Log.d(TAG, &quot;Iniciando sincronización de tracks para playlist $playlistId&quot;)&#10;                syncTracksFromSpotify(playlistId)&#10;                trackDao.getTracksByPlaylistSync(playlistId)&#10;            } else {&#10;                Log.d(TAG, &quot;Los tracks están actualizados&quot;)&#10;                localTracks&#10;            }&#10;        }&#10;&#10;    // === MÉTODOS PÚBLICOS - SINCRONIZACIÓN MANUAL ===&#10;&#10;    /**&#10;     * Sincroniza todas las playlists desde Spotify de forma manual.&#10;     *&#10;     * @return true si la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun syncPlaylistsFromSpotify(): Boolean = withContext(Dispatchers.IO) {&#10;        try {&#10;            Log.d(TAG, &quot;Sincronizando playlists desde Spotify&quot;)&#10;&#10;            val accessToken = getValidAccessToken()&#10;            if (accessToken == null) {&#10;                Log.e(TAG, &quot;No se pudo obtener token de acceso válido&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            var success = false&#10;            SpotifyRepository.getUserPlaylists(accessToken) { playlists, error -&gt;&#10;                if (error != null) {&#10;                    Log.e(TAG, &quot;Error al obtener playlists: $error&quot;)&#10;                } else if (playlists != null) {&#10;                    Log.d(TAG, &quot;Recibidas ${playlists.size} playlists de Spotify&quot;)&#10;&#10;                    // Convertir y guardar playlists&#10;                    val playlistEntities = playlists.map { playlist -&gt;&#10;                        PlaylistEntity(&#10;                            spotifyId = playlist.id,&#10;                            name = playlist.name,&#10;                            description = playlist.description,&#10;                            trackCount = playlist.tracks?.total ?: 0,&#10;                            imageUrl = playlist.getImageUrl(),&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Usar runBlocking dentro del callback para operaciones suspend&#10;                    kotlinx.coroutines.runBlocking {&#10;                        playlistDao.insertPlaylists(playlistEntities)&#10;                        Log.d(&#10;                            TAG,&#10;                            &quot;Guardadas ${playlistEntities.size} playlists en base de datos local&quot;&#10;                        )&#10;                    }&#10;                    success = true&#10;                }&#10;            }&#10;&#10;            // Esperar a que termine el callback&#10;            var attempts = 0&#10;            while (!success &amp;&amp; attempts &lt; 50) { // 5 segundos máximo&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            success&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error en sincronización de playlists&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sincroniza los tracks de una playlist específica desde Spotify.&#10;     *&#10;     * @param playlistId ID de la playlist a sincronizar&#10;     * @return true si la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun syncTracksFromSpotify(playlistId: String): Boolean = withContext(Dispatchers.IO) {&#10;        try {&#10;            Log.d(TAG, &quot;Sincronizando tracks para playlist $playlistId desde Spotify&quot;)&#10;&#10;            val accessToken = getValidAccessToken()&#10;            if (accessToken == null) {&#10;                Log.e(TAG, &quot;No se pudo obtener token de acceso válido&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            var success = false&#10;            SpotifyRepository.getPlaylistTracks(accessToken, playlistId) { tracks, error -&gt;&#10;                if (error != null) {&#10;                    Log.e(TAG, &quot;Error al obtener tracks: $error&quot;)&#10;                } else if (tracks != null) {&#10;                    Log.d(&#10;                        TAG,&#10;                        &quot;Recibidos ${tracks.size} tracks de Spotify para playlist $playlistId&quot;&#10;                    )&#10;&#10;                    // Convertir y guardar tracks&#10;                    val trackEntities = tracks.mapIndexedNotNull { index, playlistTrack -&gt;&#10;                        val track = playlistTrack.track&#10;                        if (track != null) {&#10;                            TrackEntity(&#10;                                id = &quot;${playlistId}_${track.id}&quot;,&#10;                                playlistId = playlistId,&#10;                                spotifyTrackId = track.id,&#10;                                name = track.name,&#10;                                artists = track.getArtistNames(),&#10;                                youtubeVideoId = null, // Se llenará después si es necesario&#10;                                position = index,&#10;                                lastSyncTime = System.currentTimeMillis()&#10;                            )&#10;                        } else {&#10;                            null&#10;                        }&#10;                    }&#10;&#10;                    // Usar runBlocking dentro del callback&#10;                    kotlinx.coroutines.runBlocking {&#10;                        // Eliminar tracks antiguos de esta playlist&#10;                        trackDao.deleteTracksByPlaylist(playlistId)&#10;                        // Insertar nuevos tracks&#10;                        trackDao.insertTracks(trackEntities)&#10;&#10;                        // Actualizar tiempo de sincronización de la playlist&#10;                        val playlist = playlistDao.getPlaylistById(playlistId)&#10;                        playlist?.let {&#10;                            playlistDao.updatePlaylist(it.copy(lastSyncTime = System.currentTimeMillis()))&#10;                        }&#10;&#10;                        Log.d(TAG, &quot;Guardados ${trackEntities.size} tracks en base de datos local&quot;)&#10;                    }&#10;                    success = true&#10;                }&#10;            }&#10;&#10;            // Esperar a que termine el callback&#10;            var attempts = 0&#10;            while (!success &amp;&amp; attempts &lt; 50) { // 5 segundos máximo&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            success&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error en sincronización de tracks&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Actualiza el YouTube video ID para un track específico.&#10;     * Permite asociar un video de YouTube con un track de Spotify.&#10;     *&#10;     * @param trackId ID único del track&#10;     * @param youtubeVideoId ID del video de YouTube&#10;     */&#10;    suspend fun updateTrackYoutubeId(trackId: String, youtubeVideoId: String) =&#10;        withContext(Dispatchers.IO) {&#10;            try {&#10;                trackDao.updateYoutubeVideoId(trackId, youtubeVideoId)&#10;                Log.d(TAG, &quot;YouTube ID actualizado para track $trackId: $youtubeVideoId&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;Error actualizando YouTube ID&quot;, e)&#10;            }&#10;        }&#10;&#10;    // === MÉTODOS PRIVADOS - VERIFICACIÓN DE SINCRONIZACIÓN ===&#10;&#10;    /**&#10;     * Verifica si las playlists necesitan sincronización con Spotify.&#10;     *&#10;     * @param localPlaylists Lista de playlists locales&#10;     * @return true si necesita sincronización, false en caso contrario&#10;     */&#10;    private suspend fun shouldSyncPlaylists(localPlaylists: List&lt;PlaylistEntity&gt;): Boolean {&#10;        if (localPlaylists.isEmpty()) {&#10;            Log.d(TAG, &quot;No hay playlists locales, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val oldestSync = localPlaylists.minOfOrNull { it.lastSyncTime } ?: 0L&#10;        val needsSync = (System.currentTimeMillis() - oldestSync) &gt; SYNC_INTERVAL&#10;&#10;        Log.d(TAG, &quot;Verificación de sincronización de playlists: needsSync=$needsSync&quot;)&#10;        return needsSync&#10;    }&#10;&#10;    /**&#10;     * Verifica si los tracks de una playlist necesitan sincronización.&#10;     *&#10;     * @param playlist Entidad de la playlist a verificar&#10;     * @return true si necesita sincronización, false en caso contrario&#10;     */&#10;    private suspend fun shouldSyncTracks(playlist: PlaylistEntity?): Boolean {&#10;        if (playlist == null) {&#10;            Log.d(TAG, &quot;Playlist no encontrada, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val localTracks = trackDao.getTracksByPlaylistSync(playlist.spotifyId)&#10;        if (localTracks.isEmpty()) {&#10;            Log.d(TAG, &quot;No hay tracks locales, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val needsSync = (System.currentTimeMillis() - playlist.lastSyncTime) &gt; SYNC_INTERVAL&#10;        Log.d(TAG, &quot;Verificación de sincronización de tracks: needsSync=$needsSync&quot;)&#10;        return needsSync&#10;    }&#10;&#10;    /**&#10;     * Obtiene un token de acceso válido para Spotify.&#10;     * Intenta usar el token actual o refrescarlo automáticamente.&#10;     *&#10;     * @return Token de acceso válido o null si no se pudo obtener&#10;     */&#10;    private suspend fun getValidAccessToken(): String? = withContext(Dispatchers.IO) {&#10;        val accessToken = Config.getSpotifyAccessToken(appContext)&#10;        if (accessToken != null) {&#10;            return@withContext accessToken&#10;        }&#10;&#10;        val refreshToken = Config.getSpotifyRefreshToken(appContext)&#10;        if (refreshToken != null) {&#10;            var newToken: String? = null&#10;            SpotifyRepository.refreshAccessToken(appContext, refreshToken) { token, error -&gt;&#10;                if (token != null) {&#10;                    Config.setSpotifyTokens(appContext, token, refreshToken, 3600)&#10;                    newToken = token&#10;                }&#10;            }&#10;&#10;            // Esperar respuesta&#10;            var attempts = 0&#10;            while (newToken == null &amp;&amp; attempts &lt; 30) {&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            return@withContext newToken&#10;        }&#10;&#10;        return@withContext null&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - OPERACIONES ESPECIALES ===&#10;&#10;    /**&#10;     * Fuerza una sincronización completa de todas las playlists y tracks.&#10;     * Útil para refrescar completamente los datos locales.&#10;     *&#10;     * @return true si toda la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun forceSyncAll(): Boolean = withContext(Dispatchers.IO) {&#10;        Log.d(TAG, &quot;Forzando sincronización completa&quot;)&#10;        val playlistsSuccess = syncPlaylistsFromSpotify()&#10;&#10;        if (playlistsSuccess) {&#10;            val playlists = playlistDao.getAllPlaylistsSync()&#10;            var allTracksSuccess = true&#10;&#10;            for (playlist in playlists) {&#10;                val tracksSuccess = syncTracksFromSpotify(playlist.spotifyId)&#10;                if (!tracksSuccess) {&#10;                    allTracksSuccess = false&#10;                }&#10;            }&#10;&#10;            return@withContext allTracksSuccess&#10;        }&#10;&#10;        return@withContext false&#10;    }&#10;&#10;    /**&#10;     * Limpia todos los datos locales de playlists y tracks.&#10;     * Útil para reset completo o troubleshooting.&#10;     */&#10;    suspend fun clearAllData() = withContext(Dispatchers.IO) {&#10;        try {&#10;            trackDao.deleteAllTracks()&#10;            playlistDao.deleteAllPlaylists()&#10;            Log.d(TAG, &quot;Datos locales limpiados&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error limpiando datos locales&quot;, e)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.database&#10;&#10;import android.content.Context&#10;import androidx.lifecycle.LiveData&#10;import androidx.lifecycle.asLiveData&#10;import com.plyr.network.SpotifyRepository&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyTokenManager&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.withContext&#10;import android.util.Log&#10;&#10;/**&#10; * PlaylistLocalRepository - Repositorio para gestión local de playlists y tracks&#10; * &#10; * Esta clase maneja:&#10; * - Operaciones CRUD sobre playlists y tracks en base de datos local&#10; * - Sincronización automática con Spotify&#10; * - Caché inteligente para evitar consultas innecesarias&#10; * - Observación de cambios mediante LiveData/Flow&#10; * - Gestión de YouTube IDs para tracks&#10; * &#10; * Proporciona una capa de abstracción entre la UI y la base de datos,&#10; * asegurando que los datos estén siempre actualizados y sincronizados.&#10; */&#10;class PlaylistLocalRepository(context: Context) {&#10;&#10;    // === PROPIEDADES ===&#10;&#10;    /** Base de datos local para playlists y tracks */&#10;    private val database = PlaylistDatabase.getDatabase(context)&#10;&#10;    /** DAO para operaciones sobre playlists */&#10;    private val playlistDao = database.playlistDao()&#10;&#10;    /** DAO para operaciones sobre tracks */&#10;    private val trackDao = database.trackDao()&#10;&#10;    /** Contexto de aplicación para operaciones persistentes */&#10;    private val appContext = context.applicationContext&#10;&#10;    // === CONSTANTES ===&#10;&#10;    companion object {&#10;        private const val TAG = &quot;PlaylistLocalRepo&quot;&#10;&#10;        /** Intervalo de sincronización automática (24 horas) */&#10;        private const val SYNC_INTERVAL = 24 * 60 * 60 * 1000L&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - OBSERVACIÓN DE DATOS ===&#10;&#10;    /**&#10;     * Observa todas las playlists locales mediante LiveData.&#10;     * Los cambios se notifican automáticamente a los observadores.&#10;     *&#10;     * @return LiveData que emite la lista de playlists cuando cambian&#10;     */&#10;    fun getAllPlaylistsLiveData(): LiveData&lt;List&lt;PlaylistEntity&gt;&gt; {&#10;        return playlistDao.getAllPlaylists().asLiveData()&#10;    }&#10;&#10;    /**&#10;     * Observa los tracks de una playlist específica.&#10;     *&#10;     * @param playlistId ID de la playlist a observar&#10;     * @return LiveData que emite los tracks cuando cambian&#10;     */&#10;    fun getTracksByPlaylistLiveData(playlistId: String): LiveData&lt;List&lt;TrackEntity&gt;&gt; {&#10;        return trackDao.getTracksByPlaylist(playlistId).asLiveData()&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - SINCRONIZACIÓN AUTOMÁTICA ===&#10;&#10;    /**&#10;     * Obtiene todas las playlists con sincronización automática.&#10;     * Verifica si es necesario sincronizar con Spotify y lo hace automáticamente.&#10;     *&#10;     * @return Lista de playlists actualizadas&#10;     */&#10;    suspend fun getPlaylistsWithAutoSync(): List&lt;PlaylistEntity&gt; = withContext(Dispatchers.IO) {&#10;        Log.d(TAG, &quot;Obteniendo playlists con sincronización automática&quot;)&#10;&#10;        val localPlaylists = playlistDao.getAllPlaylistsSync()&#10;&#10;        // Verificar si necesita sincronización&#10;        val shouldSync = shouldSyncPlaylists(localPlaylists)&#10;&#10;        return@withContext if (shouldSync) {&#10;            Log.d(TAG, &quot;Iniciando sincronización de playlists&quot;)&#10;            syncPlaylistsFromSpotify()&#10;            playlistDao.getAllPlaylistsSync()&#10;        } else {&#10;            Log.d(TAG, &quot;Las playlists están actualizadas&quot;)&#10;            localPlaylists&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Obtiene los tracks de una playlist con sincronización automática.&#10;     * Verifica si es necesario sincronizar con Spotify y lo hace automáticamente.&#10;     *&#10;     * @param playlistId ID de la playlist&#10;     * @return Lista de tracks actualizados&#10;     */&#10;    suspend fun getTracksWithAutoSync(playlistId: String): List&lt;TrackEntity&gt; =&#10;        withContext(Dispatchers.IO) {&#10;            Log.d(TAG, &quot;Obteniendo tracks para playlist $playlistId con sincronización automática&quot;)&#10;&#10;            val localTracks = trackDao.getTracksByPlaylistSync(playlistId)&#10;            val playlist = playlistDao.getPlaylistById(playlistId)&#10;&#10;            // Verificar si necesita sincronización&#10;            val shouldSync = shouldSyncTracks(playlist)&#10;&#10;            if (shouldSync) {&#10;                Log.d(TAG, &quot;Iniciando sincronización de tracks para playlist $playlistId&quot;)&#10;                syncTracksFromSpotify(playlistId)&#10;                trackDao.getTracksByPlaylistSync(playlistId)&#10;            } else {&#10;                Log.d(TAG, &quot;Los tracks están actualizados&quot;)&#10;                localTracks&#10;            }&#10;        }&#10;&#10;    // === MÉTODOS PÚBLICOS - SINCRONIZACIÓN MANUAL ===&#10;&#10;    /**&#10;     * Sincroniza todas las playlists desde Spotify de forma manual.&#10;     *&#10;     * @return true si la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun syncPlaylistsFromSpotify(): Boolean = withContext(Dispatchers.IO) {&#10;        try {&#10;            Log.d(TAG, &quot;Sincronizando playlists desde Spotify&quot;)&#10;&#10;            val accessToken = getValidAccessToken()&#10;            if (accessToken == null) {&#10;                Log.e(TAG, &quot;No se pudo obtener token de acceso válido&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            var success = false&#10;            SpotifyRepository.getUserPlaylists(accessToken) { playlists, error -&gt;&#10;                if (error != null) {&#10;                    Log.e(TAG, &quot;Error al obtener playlists: $error&quot;)&#10;                } else if (playlists != null) {&#10;                    Log.d(TAG, &quot;Recibidas ${playlists.size} playlists de Spotify&quot;)&#10;&#10;                    // Convertir y guardar playlists&#10;                    val playlistEntities = playlists.map { playlist -&gt;&#10;                        PlaylistEntity(&#10;                            spotifyId = playlist.id,&#10;                            name = playlist.name,&#10;                            description = playlist.description,&#10;                            trackCount = playlist.tracks?.total ?: 0,&#10;                            imageUrl = playlist.getImageUrl(),&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Usar runBlocking dentro del callback para operaciones suspend&#10;                    kotlinx.coroutines.runBlocking {&#10;                        playlistDao.insertPlaylists(playlistEntities)&#10;                        Log.d(&#10;                            TAG,&#10;                            &quot;Guardadas ${playlistEntities.size} playlists en base de datos local&quot;&#10;                        )&#10;                    }&#10;                    success = true&#10;                }&#10;            }&#10;&#10;            // Esperar a que termine el callback&#10;            var attempts = 0&#10;            while (!success &amp;&amp; attempts &lt; 50) { // 5 segundos máximo&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            success&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error en sincronización de playlists&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Sincroniza los tracks de una playlist específica desde Spotify.&#10;     *&#10;     * @param playlistId ID de la playlist a sincronizar&#10;     * @return true si la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun syncTracksFromSpotify(playlistId: String): Boolean = withContext(Dispatchers.IO) {&#10;        try {&#10;            Log.d(TAG, &quot;Sincronizando tracks para playlist $playlistId desde Spotify&quot;)&#10;&#10;            val accessToken = getValidAccessToken()&#10;            if (accessToken == null) {&#10;                Log.e(TAG, &quot;No se pudo obtener token de acceso válido&quot;)&#10;                return@withContext false&#10;            }&#10;&#10;            var success = false&#10;            SpotifyRepository.getPlaylistTracks(accessToken, playlistId) { tracks, error -&gt;&#10;                if (error != null) {&#10;                    Log.e(TAG, &quot;Error al obtener tracks: $error&quot;)&#10;                } else if (tracks != null) {&#10;                    Log.d(&#10;                        TAG,&#10;                        &quot;Recibidos ${tracks.size} tracks de Spotify para playlist $playlistId&quot;&#10;                    )&#10;&#10;                    // Convertir y guardar tracks&#10;                    val trackEntities = tracks.mapIndexedNotNull { index, playlistTrack -&gt;&#10;                        val track = playlistTrack.track&#10;                        if (track != null) {&#10;                            TrackEntity(&#10;                                id = &quot;${playlistId}_${track.id}&quot;,&#10;                                playlistId = playlistId,&#10;                                spotifyTrackId = track.id,&#10;                                name = track.name,&#10;                                artists = track.getArtistNames(),&#10;                                youtubeVideoId = null, // Se llenará después si es necesario&#10;                                position = index,&#10;                                lastSyncTime = System.currentTimeMillis()&#10;                            )&#10;                        } else {&#10;                            null&#10;                        }&#10;                    }&#10;&#10;                    // Usar runBlocking dentro del callback&#10;                    kotlinx.coroutines.runBlocking {&#10;                        // Eliminar tracks antiguos de esta playlist&#10;                        trackDao.deleteTracksByPlaylist(playlistId)&#10;                        // Insertar nuevos tracks&#10;                        trackDao.insertTracks(trackEntities)&#10;&#10;                        // Actualizar tiempo de sincronización de la playlist&#10;                        val playlist = playlistDao.getPlaylistById(playlistId)&#10;                        playlist?.let {&#10;                            playlistDao.updatePlaylist(it.copy(lastSyncTime = System.currentTimeMillis()))&#10;                        }&#10;&#10;                        Log.d(TAG, &quot;Guardados ${trackEntities.size} tracks en base de datos local&quot;)&#10;                    }&#10;                    success = true&#10;                }&#10;            }&#10;&#10;            // Esperar a que termine el callback&#10;            var attempts = 0&#10;            while (!success &amp;&amp; attempts &lt; 50) { // 5 segundos máximo&#10;                kotlinx.coroutines.delay(100)&#10;                attempts++&#10;            }&#10;&#10;            success&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error en sincronización de tracks&quot;, e)&#10;            false&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Actualiza el YouTube video ID para un track específico.&#10;     * Permite asociar un video de YouTube con un track de Spotify.&#10;     *&#10;     * @param trackId ID único del track&#10;     * @param youtubeVideoId ID del video de YouTube&#10;     */&#10;    suspend fun updateTrackYoutubeId(trackId: String, youtubeVideoId: String) =&#10;        withContext(Dispatchers.IO) {&#10;            try {&#10;                trackDao.updateYoutubeVideoId(trackId, youtubeVideoId)&#10;                Log.d(TAG, &quot;YouTube ID actualizado para track $trackId: $youtubeVideoId&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;Error actualizando YouTube ID&quot;, e)&#10;            }&#10;        }&#10;&#10;    // === MÉTODOS PRIVADOS - VERIFICACIÓN DE SINCRONIZACIÓN ===&#10;&#10;    /**&#10;     * Verifica si las playlists necesitan sincronización con Spotify.&#10;     *&#10;     * @param localPlaylists Lista de playlists locales&#10;     * @return true si necesita sincronización, false en caso contrario&#10;     */&#10;    private suspend fun shouldSyncPlaylists(localPlaylists: List&lt;PlaylistEntity&gt;): Boolean {&#10;        if (localPlaylists.isEmpty()) {&#10;            Log.d(TAG, &quot;No hay playlists locales, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val oldestSync = localPlaylists.minOfOrNull { it.lastSyncTime } ?: 0L&#10;        val needsSync = (System.currentTimeMillis() - oldestSync) &gt; SYNC_INTERVAL&#10;&#10;        Log.d(TAG, &quot;Verificación de sincronización de playlists: needsSync=$needsSync&quot;)&#10;        return needsSync&#10;    }&#10;&#10;    /**&#10;     * Verifica si los tracks de una playlist necesitan sincronización.&#10;     *&#10;     * @param playlist Entidad de la playlist a verificar&#10;     * @return true si necesita sincronización, false en caso contrario&#10;     */&#10;    private suspend fun shouldSyncTracks(playlist: PlaylistEntity?): Boolean {&#10;        if (playlist == null) {&#10;            Log.d(TAG, &quot;Playlist no encontrada, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val localTracks = trackDao.getTracksByPlaylistSync(playlist.spotifyId)&#10;        if (localTracks.isEmpty()) {&#10;            Log.d(TAG, &quot;No hay tracks locales, necesita sincronización&quot;)&#10;            return true&#10;        }&#10;&#10;        val needsSync = (System.currentTimeMillis() - playlist.lastSyncTime) &gt; SYNC_INTERVAL&#10;        Log.d(TAG, &quot;Verificación de sincronización de tracks: needsSync=$needsSync&quot;)&#10;        return needsSync&#10;    }&#10;&#10;    /**&#10;     * Obtiene un token de acceso válido para Spotify.&#10;     * Usa el nuevo SpotifyTokenManager para renovación automática.&#10;     *&#10;     * @return Token de acceso válido o null si no se pudo obtener&#10;     */&#10;    private suspend fun getValidAccessToken(): String? = withContext(Dispatchers.IO) {&#10;        return@withContext SpotifyTokenManager.getValidAccessToken(appContext)&#10;    }&#10;&#10;    // === MÉTODOS PÚBLICOS - OPERACIONES ESPECIALES ===&#10;&#10;    /**&#10;     * Fuerza una sincronización completa de todas las playlists y tracks.&#10;     * Útil para refrescar completamente los datos locales.&#10;     *&#10;     * @return true si toda la sincronización fue exitosa, false en caso contrario&#10;     */&#10;    suspend fun forceSyncAll(): Boolean = withContext(Dispatchers.IO) {&#10;        Log.d(TAG, &quot;Forzando sincronización completa&quot;)&#10;        val playlistsSuccess = syncPlaylistsFromSpotify()&#10;&#10;        if (playlistsSuccess) {&#10;            val playlists = playlistDao.getAllPlaylistsSync()&#10;            var allTracksSuccess = true&#10;&#10;            for (playlist in playlists) {&#10;                val tracksSuccess = syncTracksFromSpotify(playlist.spotifyId)&#10;                if (!tracksSuccess) {&#10;                    allTracksSuccess = false&#10;                }&#10;            }&#10;&#10;            return@withContext allTracksSuccess&#10;        }&#10;&#10;        return@withContext false&#10;    }&#10;&#10;    /**&#10;     * Limpia todos los datos locales de playlists y tracks.&#10;     * Útil para reset completo o troubleshooting.&#10;     */&#10;    suspend fun clearAllData() = withContext(Dispatchers.IO) {&#10;        try {&#10;            trackDao.deleteAllTracks()&#10;            playlistDao.deleteAllPlaylists()&#10;            Log.d(TAG, &quot;Datos locales limpiados&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error limpiando datos locales&quot;, e)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/examples/NotificationIntegrationExample.kt" />
              <option name="updatedContent" value="package com.plyr.examples&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.os.Build&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.core.content.ContextCompat&#10;import androidx.lifecycle.lifecycleScope&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * Ejemplo de integración del sistema de notificaciones de música&#10; * &#10; * Este archivo muestra cómo implementar las notificaciones en tu MainActivity.&#10; * Copia este código a tu MainActivity existente.&#10; */&#10;class NotificationIntegrationExample {&#10;    &#10;    // En tu MainActivity, agrega estas propiedades:&#10;    private lateinit var notificationManager: MusicNotificationManager&#10;    private lateinit var playerViewModel: PlayerViewModel&#10;    &#10;    // Launcher para pedir permisos de notificación (Android 13+)&#10;    private val notificationPermissionLauncher = registerForActivityResult(&#10;        ActivityResultContracts.RequestPermission()&#10;    ) { isGranted -&gt;&#10;        if (isGranted) {&#10;            // Permiso concedido, continuar con la inicialización&#10;            initializeNotificationSystem()&#10;        } else {&#10;            // Permiso denegado, manejar el caso apropiadamente&#10;            // Puedes mostrar un mensaje al usuario explicando por qué necesitas el permiso&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Llama este método en onCreate() de tu MainActivity&#10;     */&#10;    fun setupNotificationSystem(activity: ComponentActivity, viewModel: PlayerViewModel) {&#10;        playerViewModel = viewModel&#10;        &#10;        // Verificar y pedir permisos de notificación para Android 13+&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10;            when {&#10;                ContextCompat.checkSelfPermission(&#10;                    activity,&#10;                    Manifest.permission.POST_NOTIFICATIONS&#10;                ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10;                    // Permiso ya concedido&#10;                    initializeNotificationSystem()&#10;                }&#10;                else -&gt; {&#10;                    // Pedir permiso&#10;                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10;                }&#10;            }&#10;        } else {&#10;            // Android 12 y menores no necesitan permiso explícito&#10;            initializeNotificationSystem()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicializa el sistema de notificaciones&#10;     */&#10;    private fun initializeNotificationSystem() {&#10;        notificationManager = MusicNotificationManager(this)&#10;        notificationManager.startService()&#10;        &#10;        // Configurar listeners para actualizar notificación cuando cambie el track&#10;        setupNotificationListeners()&#10;    }&#10;    &#10;    /**&#10;     * Configura los listeners para sincronizar el PlayerViewModel con las notificaciones&#10;     */&#10;    private fun setupNotificationListeners() {&#10;        // Observar cambios en el track actual&#10;        playerViewModel.currentTrack.observe(this) { track -&gt;&#10;            track?.let {&#10;                notificationManager.updateSongInfo(it.name, it.artists)&#10;            }&#10;        }&#10;        &#10;        // Observar cambios en el título actual&#10;        playerViewModel.currentTitle.observe(this) { title -&gt;&#10;            title?.let {&#10;                // Si tienes información del artista disponible&#10;                val artist = &quot;Artista Desconocido&quot; // Reemplaza con la fuente real del artista&#10;                notificationManager.updateSongInfo(it, artist)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Ejemplo de cómo reproducir una canción con notificación&#10;     */&#10;    fun playTrackWithNotification(audioUrl: String, title: String, artist: String) {&#10;        lifecycleScope.launch {&#10;            // Actualizar información en la notificación&#10;            notificationManager.updateSongInfo(title, artist)&#10;            &#10;            // Reproducir el audio en el servicio de notificación&#10;            notificationManager.playAudio(audioUrl, title, artist)&#10;            &#10;            // También reproducir en tu PlayerViewModel existente&#10;            // playerViewModel.playAudio(audioUrl) // Tu método existente&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Limpieza en onDestroy()&#10;     */&#10;    fun cleanupNotificationSystem() {&#10;        if (::notificationManager.isInitialized) {&#10;            notificationManager.stopService()&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * INTEGRACIÓN COMPLETA EN TU MAINACTIVITY:&#10; * &#10; * class MainActivity : ComponentActivity() {&#10; *     private lateinit var notificationManager: MusicNotificationManager&#10; *     private lateinit var playerViewModel: PlayerViewModel&#10; *     &#10; *     // Launcher para permisos de notificación&#10; *     private val notificationPermissionLauncher = registerForActivityResult(&#10; *         ActivityResultContracts.RequestPermission()&#10; *     ) { isGranted -&gt;&#10; *         if (isGranted) {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onCreate(savedInstanceState: Bundle?) {&#10; *         super.onCreate(savedInstanceState)&#10; *         &#10; *         // Tu código existente...&#10; *         playerViewModel = ViewModelProvider(this)[PlayerViewModel::class.java]&#10; *         &#10; *         // Configurar notificaciones&#10; *         setupNotificationSystem()&#10; *         &#10; *         // Tu código de Compose...&#10; *     }&#10; *     &#10; *     private fun setupNotificationSystem() {&#10; *         if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU) {&#10; *             when {&#10; *                 ContextCompat.checkSelfPermission(&#10; *                     this, Manifest.permission.POST_NOTIFICATIONS&#10; *                 ) == PackageManager.PERMISSION_GRANTED -&gt; {&#10; *                     initializeNotificationSystem()&#10; *                 }&#10; *                 else -&gt; {&#10; *                     notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)&#10; *                 }&#10; *             }&#10; *         } else {&#10; *             initializeNotificationSystem()&#10; *         }&#10; *     }&#10; *     &#10; *     private fun initializeNotificationSystem() {&#10; *         notificationManager = MusicNotificationManager(this)&#10; *         notificationManager.startService()&#10; *         &#10; *         // Observar cambios en el track actual&#10; *         playerViewModel.currentTrack.observe(this) { track -&gt;&#10; *             track?.let {&#10; *                 notificationManager.updateSongInfo(it.name, it.artists)&#10; *             }&#10; *         }&#10; *     }&#10; *     &#10; *     override fun onDestroy() {&#10; *         super.onDestroy()&#10; *         if (::notificationManager.isInitialized) {&#10; *             notificationManager.stopService()&#10; *         }&#10; *     }&#10; * }&#10; */" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/network/SpotifyRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/network/SpotifyRepository.kt" />
              <option name="originalContent" value="package com.plyr.network&#10;&#10;import com.google.gson.Gson&#10;import com.google.gson.annotations.SerializedName&#10;import okhttp3.*&#10;import okhttp3.MediaType.Companion.toMediaType&#10;import okhttp3.RequestBody.Companion.toRequestBody&#10;import java.io.IOException&#10;import android.util.Base64&#10;import android.content.Context&#10;import com.plyr.utils.Config&#10;&#10;object SpotifyRepository {&#10;    &#10;    private val client = OkHttpClient()&#10;    private val gson = Gson()&#10;    &#10;    // URLs de Spotify&#10;    private const val AUTH_URL = &quot;https://accounts.spotify.com/authorize&quot;&#10;    private const val TOKEN_URL = &quot;https://accounts.spotify.com/api/token&quot;&#10;    private const val API_BASE_URL = &quot;https://api.spotify.com/v1&quot;&#10;    &#10;    // Generar URL de autorización&#10;    fun getAuthorizationUrl(context: Context): String? {&#10;        val clientId = Config.getSpotifyClientId(context)&#10;        return if (clientId != null) {&#10;            &quot;$AUTH_URL?client_id=$clientId&amp;response_type=code&amp;redirect_uri=${Config.SPOTIFY_REDIRECT_URI}&amp;scope=${Config.SPOTIFY_SCOPES.replace(&quot; &quot;, &quot;%20&quot;)}&quot;&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Iniciar flujo OAuth (abrir browser)&#10;    fun startOAuthFlow(context: Context): Boolean {&#10;        val authUrl = getAuthorizationUrl(context)&#10;        return if (authUrl != null) {&#10;            val intent = android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(authUrl))&#10;            context.startActivity(intent)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;    &#10;    // Intercambiar código de autorización por tokens&#10;    fun exchangeCodeForTokens(context: Context, authCode: String, callback: (SpotifyTokens?, String?) -&gt; Unit) {&#10;        if (!Config.hasSpotifyCredentials(context)) {&#10;            callback(null, &quot;Spotify credentials not configured&quot;)&#10;            return&#10;        }&#10;        &#10;        val authHeader = createBasicAuthHeader(context)&#10;        if (authHeader == null) {&#10;            callback(null, &quot;Failed to create auth header&quot;)&#10;            return&#10;        }&#10;        val formBody = FormBody.Builder()&#10;            .add(&quot;grant_type&quot;, &quot;authorization_code&quot;)&#10;            .add(&quot;code&quot;, authCode)&#10;            .add(&quot;redirect_uri&quot;, Config.SPOTIFY_REDIRECT_URI)&#10;            .build()&#10;        &#10;        val request = Request.Builder()&#10;            .url(TOKEN_URL)&#10;            .addHeader(&quot;Authorization&quot;, authHeader)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)&#10;            .post(formBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        val tokens = gson.fromJson(body, SpotifyTokens::class.java)&#10;                        callback(tokens, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing tokens: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Renovar access token usando refresh token&#10;    fun refreshAccessToken(context: Context, refreshToken: String, callback: (String?, String?) -&gt; Unit) {&#10;        if (!Config.hasSpotifyCredentials(context)) {&#10;            callback(null, &quot;Spotify credentials not configured&quot;)&#10;            return&#10;        }&#10;        &#10;        val authHeader = createBasicAuthHeader(context)&#10;        if (authHeader == null) {&#10;            callback(null, &quot;Failed to create auth header&quot;)&#10;            return&#10;        }&#10;        val formBody = FormBody.Builder()&#10;            .add(&quot;grant_type&quot;, &quot;refresh_token&quot;)&#10;            .add(&quot;refresh_token&quot;, refreshToken)&#10;            .build()&#10;        &#10;        val request = Request.Builder()&#10;            .url(TOKEN_URL)&#10;            .addHeader(&quot;Authorization&quot;, authHeader)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)&#10;            .post(formBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        val tokens = gson.fromJson(body, SpotifyTokens::class.java)&#10;                        callback(tokens.accessToken, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing token: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Obtener playlists del usuario con paginación&#10;    fun getUserPlaylists(accessToken: String, callback: (List&lt;SpotifyPlaylist&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        var allPlaylists = mutableListOf&lt;SpotifyPlaylist&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/me/playlists?limit=$maxLimit&amp;offset=$offset&amp;fields=items(id,name,description,tracks(total),images)&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User playlists response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val playlistResponse = gson.fromJson(body, SpotifyPlaylistResponse::class.java)&#10;                            &#10;                            // Debug: log tracks data for each playlist&#10;                            playlistResponse.items.forEachIndexed { index, playlist -&gt;&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist $index - '${playlist.name}': tracks=${playlist.tracks}, tracks.total=${playlist.tracks?.total}&quot;)&#10;                            }&#10;                            &#10;                            // Acumular resultados&#10;                            allPlaylists.addAll(playlistResponse.items)&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${playlistResponse.items.size} playlists, total accumulated: ${allPlaylists.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allPlaylists.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMorePlaylists = playlistResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMorePlaylists &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next playlists page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlists pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlists pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final playlists count: ${allPlaylists.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing playlists: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener tracks de un álbum con paginación&#10;    fun getAlbumTracks(accessToken: String, albumId: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        var allTracks = mutableListOf&lt;SpotifyTrack&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/albums/$albumId/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val tracksResponse = gson.fromJson(body, SpotifyTracksSearchResultRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(tracksResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracksResponse.items.filterNotNull().size} tracks, total accumulated: ${allTracks.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = tracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next album tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final album tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing album tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener tracks de una playlist con paginación&#10;    fun getPlaylistTracks(accessToken: String, playlistId: String, callback: (List&lt;SpotifyPlaylistTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        var allTracks = mutableListOf&lt;SpotifyPlaylistTrack&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val tracksResponse = gson.fromJson(body, SpotifyPlaylistTracksResponseRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(tracksResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracksResponse.items.filterNotNull().size} tracks, total accumulated: ${allTracks.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = tracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next playlist tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final playlist tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing playlist tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener álbumes de un artista con paginación&#10;    fun getArtistAlbums(accessToken: String, artistId: String, callback: (List&lt;SpotifyAlbum&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        var allAlbums = mutableListOf&lt;SpotifyAlbum&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/artists/$artistId/albums?include_groups=album,single&amp;limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val albumsResponse = gson.fromJson(body, SpotifyAlbumsSearchResultRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allAlbums.addAll(albumsResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${albumsResponse.items.filterNotNull().size} albums, total accumulated: ${allAlbums.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allAlbums.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreAlbums = albumsResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreAlbums &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next artist albums page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final artist albums count: ${allAlbums.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing artist albums: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Buscar todo tipo de contenido en Spotify (canciones, álbumes, artistas, playlists)&#10;    fun searchAll(accessToken: String, query: String, callback: (SpotifySearchAllResponse?, String?) -&gt; Unit) {&#10;        val encodedQuery = java.net.URLEncoder.encode(query, &quot;UTF-8&quot;)&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/search?q=$encodedQuery&amp;type=track,album,artist,playlist&amp;limit=50&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Search all response: $body&quot;)&#10;                        val searchResponse = gson.fromJson(body, SpotifySearchAllResponse::class.java)&#10;                        callback(searchResponse, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing search results: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Buscar canciones en Spotify (función mantenida para compatibilidad)&#10;    fun searchTracks(accessToken: String, query: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val encodedQuery = java.net.URLEncoder.encode(query, &quot;UTF-8&quot;)&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/search?q=$encodedQuery&amp;type=track&amp;limit=20&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Search response: $body&quot;)&#10;                        val searchResponse = gson.fromJson(body, SpotifySearchResponseRaw::class.java)&#10;                        callback(searchResponse.tracks.items.filterNotNull(), null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing search results: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Seguir una playlist en Spotify&#10;    fun followPlaylist(accessToken: String, playlistId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/playlists/$playlistId/followers&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(RequestBody.create(&quot;application/json&quot;.toMediaType(), &quot;{}&quot;))&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body?.string()&#10;                    &#10;                    // Detectar error de scopes insuficientes&#10;                    if (response.code == 403 &amp;&amp; errorBody?.contains(&quot;Insufficient client scope&quot;) == true) {&#10;                        callback(false, &quot;Permisos insuficientes. Desconecta y vuelve a conectar Spotify para obtener todos los permisos necesarios.&quot;)&#10;                    } else {&#10;                        callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                    }&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Guardar un álbum en la biblioteca de Spotify&#10;    fun saveAlbum(accessToken: String, albumId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/me/albums&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(RequestBody.create(&quot;application/json&quot;.toMediaType(), &quot;&quot;&quot;{&quot;ids&quot;:[&quot;$albumId&quot;]}&quot;&quot;&quot;))&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body?.string()&#10;                    &#10;                    // Detectar error de scopes insuficientes&#10;                    if (response.code == 403 &amp;&amp; errorBody?.contains(&quot;Insufficient client scope&quot;) == true) {&#10;                        callback(false, &quot;Permisos insuficientes. Desconecta y vuelve a conectar Spotify para obtener todos los permisos necesarios.&quot;)&#10;                    } else {&#10;                        callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                    }&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Buscar todo tipo de contenido en Spotify con paginación automática optimizada&#10;    fun searchAllWithPagination(&#10;        accessToken: String, &#10;        query: String, &#10;        callback: (SpotifySearchAllResponse?, String?) -&gt; Unit // Simplificamos el callback&#10;    ) {&#10;        val encodedQuery = java.net.URLEncoder.encode(query, &quot;UTF-8&quot;)&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        &#10;        // Variables para acumular resultados&#10;        var allTracks = mutableListOf&lt;SpotifyTrack&gt;()&#10;        var allAlbums = mutableListOf&lt;SpotifyAlbum&gt;()&#10;        var allArtists = mutableListOf&lt;SpotifyArtistFull&gt;()&#10;        var allPlaylists = mutableListOf&lt;SpotifyPlaylist&gt;()&#10;        &#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/search?q=$encodedQuery&amp;type=track,album,artist,playlist&amp;limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Search paginated response (offset=$offset) body excerpt: ${body.take(500)}...&quot;)&#10;                            val searchResponseRaw = gson.fromJson(body, SpotifySearchAllResponseRaw::class.java)&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Parsed response - tracks: ${searchResponseRaw.tracks.items.size}, albums: ${searchResponseRaw.albums.items.size}, artists: ${searchResponseRaw.artists.items.size}, playlists: ${searchResponseRaw.playlists.items.size}&quot;)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(searchResponseRaw.tracks.items.filterNotNull())&#10;                            allAlbums.addAll(searchResponseRaw.albums.items.filterNotNull())&#10;                            allArtists.addAll(searchResponseRaw.artists.items.filterNotNull())&#10;                            allPlaylists.addAll(searchResponseRaw.playlists.items.filterNotNull())&#10;                            &#10;                            pageCount++&#10;                            &#10;                            // Enviar resultados después de cada página para mostrar progreso&#10;                            val currentResponse = SpotifySearchAllResponse(&#10;                                tracks = SpotifyTracksSearchResult(&#10;                                    items = allTracks.distinctBy { it.id },&#10;                                    total = searchResponseRaw.tracks.total,&#10;                                    limit = maxLimit,&#10;                                    offset = 0,&#10;                                    next = if (searchResponseRaw.tracks.items.size == maxLimit) &quot;more&quot; else null&#10;                                ),&#10;                                albums = SpotifyAlbumsSearchResult(&#10;                                    items = allAlbums.distinctBy { it.id },&#10;                                    total = searchResponseRaw.albums.total,&#10;                                    limit = maxLimit,&#10;                                    offset = 0,&#10;                                    next = if (searchResponseRaw.albums.items.size == maxLimit) &quot;more&quot; else null&#10;                                ),&#10;                                artists = SpotifyArtistsSearchResult(&#10;                                    items = allArtists.distinctBy { it.id },&#10;                                    total = searchResponseRaw.artists.total,&#10;                                    limit = maxLimit,&#10;                                    offset = 0,&#10;                                    next = if (searchResponseRaw.artists.items.size == maxLimit) &quot;more&quot; else null&#10;                                ),&#10;                                playlists = SpotifyPlaylistsSearchResult(&#10;                                    items = allPlaylists.distinctBy { it.id },&#10;                                    total = searchResponseRaw.playlists.total,&#10;                                    limit = maxLimit,&#10;                                    offset = 0,&#10;                                    next = if (searchResponseRaw.playlists.items.size == maxLimit) &quot;more&quot; else null&#10;                                )&#10;                            )&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount sent: ${allTracks.size} tracks, ${allAlbums.size} albums, ${allArtists.size} artists, ${allPlaylists.size} playlists&quot;)&#10;                            callback(currentResponse, null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = searchResponseRaw.tracks.items.size == maxLimit &amp;&amp; allTracks.size &lt; (searchResponseRaw.tracks.total ?: 0)&#10;                            val hasMoreAlbums = searchResponseRaw.albums.items.size == maxLimit &amp;&amp; allAlbums.size &lt; (searchResponseRaw.albums.total ?: 0)&#10;                            val hasMoreArtists = searchResponseRaw.artists.items.size == maxLimit &amp;&amp; allArtists.size &lt; (searchResponseRaw.artists.total ?: 0)&#10;                            val hasMorePlaylists = searchResponseRaw.playlists.items.size == maxLimit &amp;&amp; allPlaylists.size &lt; (searchResponseRaw.playlists.total ?: 0)&#10;                            &#10;                            // Verificar si el próximo offset excedería el límite de Spotify (1000)&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido en cualquier categoría y no excedemos el límite, continuar paginando&#10;                            if ((hasMoreTracks || hasMoreAlbums || hasMoreArtists || hasMorePlaylists) &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next page: offset=$nextOffset&quot;)&#10;                                // Agregar un pequeño delay para no sobrecargar la API&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200) // 200ms de delay entre requests&#10;                            } else {&#10;                                // Paginación completada (por límite de API o porque no hay más resultados)&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Pagination stopped: reached Spotify API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final results: ${allTracks.size} tracks, ${allAlbums.size} albums, ${allArtists.size} artists, ${allPlaylists.size} playlists&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing search results: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;&#10;    // Obtener el user_id del usuario actual&#10;    fun getCurrentUserId(accessToken: String, callback: (String?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/me&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Network error: ${e.message}&quot;)&#10;            }&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        val json = gson.fromJson(body, Map::class.java)&#10;                        val userId = json[&quot;id&quot;] as? String&#10;                        callback(userId, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing user id: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;HTTP error ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Crear playlist&#10;    fun createPlaylist(&#10;        accessToken: String,&#10;        name: String,&#10;        description: String,&#10;        isPublic: Boolean,&#10;        callback: (Boolean, String?) -&gt; Unit&#10;    ) {&#10;        getCurrentUserId(accessToken) { userId, error -&gt;&#10;            if (userId == null) {&#10;                callback(false, error ?: &quot;Could not get user id&quot;)&#10;                return@getCurrentUserId&#10;            }&#10;            val url = &quot;https://api.spotify.com/v1/users/$userId/playlists&quot;&#10;            val jsonBody = &quot;&quot;&quot;&#10;            {&#10;                &quot;name&quot;: &quot;$name&quot;,&#10;                &quot;description&quot;: &quot;$description&quot;,&#10;                &quot;public&quot;: $isPublic&#10;            }&#10;        &quot;&quot;&quot;.trimIndent()&#10;            val request = Request.Builder()&#10;                .url(url)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .post(jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType()))&#10;                .build()&#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(false, &quot;Network error: ${e.message}&quot;)&#10;                }&#10;                override fun onResponse(call: Call, response: Response) {&#10;                    if (response.isSuccessful) {&#10;                        callback(true, null)&#10;                    } else {&#10;                        val errorBody = response.body?.string()&#10;                        callback(false, &quot;HTTP error ${response.code}: $errorBody&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;    }&#10;&#10;    private fun createBasicAuthHeader(context: Context): String {&#10;        val credentials = &quot;${Config.getSpotifyClientId(context)}:${Config.getSpotifyClientSecret(context)}&quot;&#10;        val encodedCredentials = Base64.encodeToString(credentials.toByteArray(), Base64.NO_WRAP)&#10;        return &quot;Basic $encodedCredentials&quot;&#10;    }&#10;}&#10;&#10;&#10;// Data classes para Spotify API&#10;data class SpotifyTokens(&#10;    @SerializedName(&quot;access_token&quot;) val accessToken: String,&#10;    @SerializedName(&quot;token_type&quot;) val tokenType: String,&#10;    @SerializedName(&quot;scope&quot;) val scope: String,&#10;    @SerializedName(&quot;expires_in&quot;) val expiresIn: Int,&#10;    @SerializedName(&quot;refresh_token&quot;) val refreshToken: String?&#10;)&#10;&#10;data class SpotifyPlaylistResponse(&#10;    val items: List&lt;SpotifyPlaylist&gt;&#10;)&#10;&#10;data class SpotifyPlaylist(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String?,&#10;    val tracks: SpotifyPlaylistTracks?,&#10;    val images: List&lt;SpotifyImage&gt;?&#10;) {&#10;    fun getTrackCount(): String {&#10;        return tracks?.total?.let { &quot;$it songs&quot; } ?: &quot;0 songs&quot;&#10;    }&#10;    &#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyPlaylistTracks(&#10;    val href: String?,&#10;    val total: Int&#10;)&#10;&#10;data class SpotifyImage(&#10;    val url: String,&#10;    val height: Int?,&#10;    val width: Int?&#10;)&#10;&#10;data class SpotifyTracksResponse(&#10;    val items: List&lt;SpotifyTrackItem&gt;&#10;)&#10;&#10;data class SpotifyTrackItem(&#10;    val track: SpotifyTrack?&#10;)&#10;&#10;data class SpotifyTrack(&#10;    val id: String,&#10;    val name: String,&#10;    val artists: List&lt;SpotifyArtist&gt;,&#10;    @SerializedName(&quot;duration_ms&quot;) val durationMs: Int? = null&#10;) {&#10;    fun getArtistNames(): String {&#10;        return artists.joinToString(&quot;, &quot;) { it.name }&#10;    }&#10;    &#10;    fun getDisplayName(): String {&#10;        return &quot;$name - ${getArtistNames()}&quot;&#10;    }&#10;    &#10;    fun getDurationText(): String {&#10;        return durationMs?.let {&#10;            val minutes = it / 60000&#10;            val seconds = (it % 60000) / 1000&#10;            &quot;${minutes}:${seconds.toString().padStart(2, '0')}&quot;&#10;        } ?: &quot;0:00&quot;&#10;    }&#10;}&#10;&#10;data class SpotifySearchResponse(&#10;    val tracks: SpotifyTracksSearchResult&#10;)&#10;&#10;data class SpotifySearchResponseRaw(&#10;    val tracks: SpotifyTracksSearchResultRaw&#10;)&#10;&#10;data class SpotifySearchAllResponse(&#10;    val tracks: SpotifyTracksSearchResult,&#10;    val albums: SpotifyAlbumsSearchResult,&#10;    val artists: SpotifyArtistsSearchResult,&#10;    val playlists: SpotifyPlaylistsSearchResult&#10;)&#10;&#10;data class SpotifyTracksSearchResult(&#10;    val items: List&lt;SpotifyTrack&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbumsSearchResult(&#10;    val items: List&lt;SpotifyAlbum&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyArtistsSearchResult(&#10;    val items: List&lt;SpotifyArtistFull&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistsSearchResult(&#10;    val items: List&lt;SpotifyPlaylist&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbum(&#10;    val id: String,&#10;    val name: String,&#10;    val artists: List&lt;SpotifyArtist&gt;,&#10;    val images: List&lt;SpotifyImage&gt;?,&#10;    @SerializedName(&quot;release_date&quot;) val release_date: String? = null,&#10;    @SerializedName(&quot;total_tracks&quot;) val total_tracks: Int? = null&#10;) {&#10;    fun getArtistNames(): String {&#10;        return artists.joinToString(&quot;, &quot;) { it.name }&#10;    }&#10;    &#10;    fun getDisplayName(): String {&#10;        return &quot;$name - ${getArtistNames()}&quot;&#10;    }&#10;    &#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyArtistFull(&#10;    val id: String,&#10;    val name: String,&#10;    val images: List&lt;SpotifyImage&gt;?,&#10;    val followers: SpotifyFollowers?,&#10;    val genres: List&lt;String&gt;?&#10;) {&#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;    &#10;    fun getFollowersCount(): String {&#10;        return followers?.total?.let { &quot;${it} seguidores&quot; } ?: &quot;0 seguidores&quot;&#10;    }&#10;    &#10;    fun getGenresText(): String {&#10;        return genres?.joinToString(&quot;, &quot;) ?: &quot;Sin géneros&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyFollowers(&#10;    val total: Int&#10;)&#10;&#10;data class SpotifyArtist(&#10;    val name: String&#10;)&#10;&#10;// Data classes para contenido interno&#10;data class SpotifyPlaylistTracksResponse(&#10;    val items: List&lt;SpotifyPlaylistTrack&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistTracksResponseRaw(&#10;    val items: List&lt;SpotifyPlaylistTrack?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistTrack(&#10;    val track: SpotifyTrack?&#10;)&#10;&#10;// Data classes auxiliares para parsing (con nullable items)&#10;data class SpotifyTracksSearchResultRaw(&#10;    val items: List&lt;SpotifyTrack?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbumsSearchResultRaw(&#10;    val items: List&lt;SpotifyAlbum?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyArtistsSearchResultRaw(&#10;    val items: List&lt;SpotifyArtistFull?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistsSearchResultRaw(&#10;    val items: List&lt;SpotifyPlaylist?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifySearchAllResponseRaw(&#10;    val tracks: SpotifyTracksSearchResultRaw,&#10;    val albums: SpotifyAlbumsSearchResultRaw,&#10;    val artists: SpotifyArtistsSearchResultRaw,&#10;    val playlists: SpotifyPlaylistsSearchResultRaw&#10;)&#10;" />
              <option name="updatedContent" value="package com.plyr.network&#10;&#10;import com.google.gson.Gson&#10;import com.google.gson.annotations.SerializedName&#10;import okhttp3.*&#10;import okhttp3.MediaType.Companion.toMediaType&#10;import okhttp3.RequestBody.Companion.toRequestBody&#10;import java.io.IOException&#10;import android.util.Base64&#10;import android.content.Context&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyTokenManager&#10;&#10;object SpotifyRepository {&#10;    &#10;    private val client = OkHttpClient()&#10;    private val gson = Gson()&#10;    &#10;    // URLs de Spotify&#10;    private const val AUTH_URL = &quot;https://accounts.spotify.com/authorize&quot;&#10;    private const val TOKEN_URL = &quot;https://accounts.spotify.com/api/token&quot;&#10;    private const val API_BASE_URL = &quot;https://api.spotify.com/v1&quot;&#10;    &#10;    // Generar URL de autorización&#10;    fun getAuthorizationUrl(context: Context): String? {&#10;        val clientId = Config.getSpotifyClientId(context)&#10;        return if (clientId != null) {&#10;            &quot;$AUTH_URL?client_id=$clientId&amp;response_type=code&amp;redirect_uri=${Config.SPOTIFY_REDIRECT_URI}&amp;scope=${Config.SPOTIFY_SCOPES.replace(&quot; &quot;, &quot;%20&quot;)}&quot;&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Iniciar flujo OAuth (abrir browser)&#10;    fun startOAuthFlow(context: Context): Boolean {&#10;        val authUrl = getAuthorizationUrl(context)&#10;        return if (authUrl != null) {&#10;            val intent = android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(authUrl))&#10;            context.startActivity(intent)&#10;            true&#10;        } else {&#10;            false&#10;        }&#10;    }&#10;    &#10;    // Intercambiar código de autorización por tokens&#10;    fun exchangeCodeForTokens(context: Context, authCode: String, callback: (SpotifyTokens?, String?) -&gt; Unit) {&#10;        if (!Config.hasSpotifyCredentials(context)) {&#10;            callback(null, &quot;Spotify credentials not configured&quot;)&#10;            return&#10;        }&#10;        &#10;        val authHeader = createBasicAuthHeader(context)&#10;        if (authHeader == null) {&#10;            callback(null, &quot;Failed to create auth header&quot;)&#10;            return&#10;        }&#10;        val formBody = FormBody.Builder()&#10;            .add(&quot;grant_type&quot;, &quot;authorization_code&quot;)&#10;            .add(&quot;code&quot;, authCode)&#10;            .add(&quot;redirect_uri&quot;, Config.SPOTIFY_REDIRECT_URI)&#10;            .build()&#10;        &#10;        val request = Request.Builder()&#10;            .url(TOKEN_URL)&#10;            .addHeader(&quot;Authorization&quot;, authHeader)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)&#10;            .post(formBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        val tokens = gson.fromJson(body, SpotifyTokens::class.java)&#10;                        callback(tokens, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing tokens: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Renovar access token usando refresh token&#10;    fun refreshAccessToken(context: Context, refreshToken: String, callback: (String?, String?) -&gt; Unit) {&#10;        if (!Config.hasSpotifyCredentials(context)) {&#10;            callback(null, &quot;Spotify credentials not configured&quot;)&#10;            return&#10;        }&#10;        &#10;        val authHeader = createBasicAuthHeader(context)&#10;        if (authHeader == null) {&#10;            callback(null, &quot;Failed to create auth header&quot;)&#10;            return&#10;        }&#10;        val formBody = FormBody.Builder()&#10;            .add(&quot;grant_type&quot;, &quot;refresh_token&quot;)&#10;            .add(&quot;refresh_token&quot;, refreshToken)&#10;            .build()&#10;        &#10;        val request = Request.Builder()&#10;            .url(TOKEN_URL)&#10;            .addHeader(&quot;Authorization&quot;, authHeader)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)&#10;            .post(formBody)&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        val tokens = gson.fromJson(body, SpotifyTokens::class.java)&#10;                        callback(tokens.accessToken, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing token: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Obtener playlists del usuario con renovación automática de tokens&#10;    suspend fun getUserPlaylistsWithAutoRefresh(context: Context, callback: (List&lt;SpotifyPlaylist&gt;?, String?) -&gt; Unit) {&#10;        SpotifyTokenManager.withValidToken(context) { token -&gt;&#10;            getUserPlaylists(token, callback)&#10;        }&#10;    }&#10;    &#10;    // Obtener playlists del usuario con paginación (versión original para compatibilidad)&#10;    fun getUserPlaylists(accessToken: String, callback: (List&lt;SpotifyPlaylist&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        var allPlaylists = mutableListOf&lt;SpotifyPlaylist&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/me/playlists?limit=$maxLimit&amp;offset=$offset&amp;fields=items(id,name,description,tracks(total),images)&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;User playlists response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val playlistResponse = gson.fromJson(body, SpotifyPlaylistResponse::class.java)&#10;                            &#10;                            // Debug: log tracks data for each playlist&#10;                            playlistResponse.items.forEachIndexed { index, playlist -&gt;&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist $index - '${playlist.name}': tracks=${playlist.tracks}, tracks.total=${playlist.tracks?.total}&quot;)&#10;                            }&#10;                            &#10;                            // Acumular resultados&#10;                            allPlaylists.addAll(playlistResponse.items)&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${playlistResponse.items.size} playlists, total accumulated: ${allPlaylists.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allPlaylists.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMorePlaylists = playlistResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMorePlaylists &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next playlists page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlists pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlists pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final playlists count: ${allPlaylists.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing playlists: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener tracks de un álbum con paginación&#10;    fun getAlbumTracks(accessToken: String, albumId: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        var allTracks = mutableListOf&lt;SpotifyTrack&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/albums/$albumId/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val tracksResponse = gson.fromJson(body, SpotifyTracksSearchResultRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(tracksResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracksResponse.items.filterNotNull().size} tracks, total accumulated: ${allTracks.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = tracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next album tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Album tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final album tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing album tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener tracks de una playlist con paginación&#10;    fun getPlaylistTracks(accessToken: String, playlistId: String, callback: (List&lt;SpotifyPlaylistTrack&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        var allTracks = mutableListOf&lt;SpotifyPlaylistTrack&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/playlists/$playlistId/tracks?limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val tracksResponse = gson.fromJson(body, SpotifyPlaylistTracksResponseRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(tracksResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${tracksResponse.items.filterNotNull().size} tracks, total accumulated: ${allTracks.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allTracks.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = tracksResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreTracks &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next playlist tracks page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Playlist tracks pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final playlist tracks count: ${allTracks.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing playlist tracks: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Obtener álbumes de un artista con paginación&#10;    fun getArtistAlbums(accessToken: String, artistId: String, callback: (List&lt;SpotifyAlbum&gt;?, String?) -&gt; Unit) {&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        var allAlbums = mutableListOf&lt;SpotifyAlbum&gt;()&#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/artists/$artistId/albums?include_groups=album,single&amp;limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums response (offset=$offset): ${body.take(200)}...&quot;)&#10;                            val albumsResponse = gson.fromJson(body, SpotifyAlbumsSearchResultRaw::class.java)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allAlbums.addAll(albumsResponse.items.filterNotNull())&#10;                            pageCount++&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount loaded: ${albumsResponse.items.filterNotNull().size} albums, total accumulated: ${allAlbums.size}&quot;)&#10;                            &#10;                            // Enviar resultados actualizados después de cada página&#10;                            callback(allAlbums.toList(), null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreAlbums = albumsResponse.items.size == maxLimit&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido y no excedemos el límite, continuar paginando&#10;                            if (hasMoreAlbums &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next artist albums page: offset=$nextOffset&quot;)&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200)&#10;                            } else {&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums pagination stopped: reached API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Artist albums pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final artist albums count: ${allAlbums.size}&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing artist albums: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;    &#10;    // Buscar todo tipo de contenido en Spotify (canciones, álbumes, artistas, playlists)&#10;    fun searchAll(accessToken: String, query: String, callback: (SpotifySearchAllResponse?, String?) -&gt; Unit) {&#10;        val encodedQuery = java.net.URLEncoder.encode(query, &quot;UTF-8&quot;)&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/search?q=$encodedQuery&amp;type=track,album,artist,playlist&amp;limit=50&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Search all response: $body&quot;)&#10;                        val searchResponse = gson.fromJson(body, SpotifySearchAllResponse::class.java)&#10;                        callback(searchResponse, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing search results: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Buscar canciones en Spotify (función mantenida para compatibilidad)&#10;    fun searchTracks(accessToken: String, query: String, callback: (List&lt;SpotifyTrack&gt;?, String?) -&gt; Unit) {&#10;        val encodedQuery = java.net.URLEncoder.encode(query, &quot;UTF-8&quot;)&#10;        val request = Request.Builder()&#10;            .url(&quot;$API_BASE_URL/search?q=$encodedQuery&amp;type=track&amp;limit=20&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Search response: $body&quot;)&#10;                        val searchResponse = gson.fromJson(body, SpotifySearchResponseRaw::class.java)&#10;                        callback(searchResponse.tracks.items.filterNotNull(), null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing search results: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Seguir una playlist en Spotify&#10;    fun followPlaylist(accessToken: String, playlistId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/playlists/$playlistId/followers&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(RequestBody.create(&quot;application/json&quot;.toMediaType(), &quot;{}&quot;))&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body?.string()&#10;                    &#10;                    // Detectar error de scopes insuficientes&#10;                    if (response.code == 403 &amp;&amp; errorBody?.contains(&quot;Insufficient client scope&quot;) == true) {&#10;                        callback(false, &quot;Permisos insuficientes. Desconecta y vuelve a conectar Spotify para obtener todos los permisos necesarios.&quot;)&#10;                    } else {&#10;                        callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                    }&#10;                }&#10;            }&#10;        })&#10;    }&#10;    &#10;    // Guardar un álbum en la biblioteca de Spotify&#10;    fun saveAlbum(accessToken: String, albumId: String, callback: (Boolean, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/me/albums&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;            .put(RequestBody.create(&quot;application/json&quot;.toMediaType(), &quot;&quot;&quot;{&quot;ids&quot;:[&quot;$albumId&quot;]}&quot;&quot;&quot;))&#10;            .build()&#10;        &#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(false, &quot;Error de red: ${e.message}&quot;)&#10;            }&#10;            &#10;            override fun onResponse(call: Call, response: Response) {&#10;                if (response.isSuccessful) {&#10;                    callback(true, null)&#10;                } else {&#10;                    val errorBody = response.body?.string()&#10;                    &#10;                    // Detectar error de scopes insuficientes&#10;                    if (response.code == 403 &amp;&amp; errorBody?.contains(&quot;Insufficient client scope&quot;) == true) {&#10;                        callback(false, &quot;Permisos insuficientes. Desconecta y vuelve a conectar Spotify para obtener todos los permisos necesarios.&quot;)&#10;                    } else {&#10;                        callback(false, &quot;Error HTTP ${response.code}: $errorBody&quot;)&#10;                    }&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Buscar todo tipo de contenido en Spotify con paginación automática optimizada&#10;    fun searchAllWithPagination(&#10;        accessToken: String, &#10;        query: String, &#10;        callback: (SpotifySearchAllResponse?, String?) -&gt; Unit // Simplificamos el callback&#10;    ) {&#10;        val encodedQuery = java.net.URLEncoder.encode(query, &quot;UTF-8&quot;)&#10;        val maxLimit = 50 // Máximo permitido por Spotify&#10;        &#10;        // Variables para acumular resultados&#10;        var allTracks = mutableListOf&lt;SpotifyTrack&gt;()&#10;        var allAlbums = mutableListOf&lt;SpotifyAlbum&gt;()&#10;        var allArtists = mutableListOf&lt;SpotifyArtistFull&gt;()&#10;        var allPlaylists = mutableListOf&lt;SpotifyPlaylist&gt;()&#10;        &#10;        var pageCount = 0&#10;        &#10;        // Función recursiva para obtener todas las páginas&#10;        fun fetchPage(offset: Int = 0) {&#10;            val request = Request.Builder()&#10;                .url(&quot;$API_BASE_URL/search?q=$encodedQuery&amp;type=track,album,artist,playlist&amp;limit=$maxLimit&amp;offset=$offset&quot;)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .get()&#10;                .build()&#10;            &#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(null, &quot;Error de red: ${e.message}&quot;)&#10;                }&#10;                &#10;                override fun onResponse(call: Call, response: Response) {&#10;                    val body = response.body?.string()&#10;                    if (response.isSuccessful &amp;&amp; body != null) {&#10;                        try {&#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Search paginated response (offset=$offset) body excerpt: ${body.take(500)}...&quot;)&#10;                            val searchResponseRaw = gson.fromJson(body, SpotifySearchAllResponseRaw::class.java)&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Parsed response - tracks: ${searchResponseRaw.tracks.items.size}, albums: ${searchResponseRaw.albums.items.size}, artists: ${searchResponseRaw.artists.items.size}, playlists: ${searchResponseRaw.playlists.items.size}&quot;)&#10;                            &#10;                            // Acumular resultados (filtrando nulls)&#10;                            allTracks.addAll(searchResponseRaw.tracks.items.filterNotNull())&#10;                            allAlbums.addAll(searchResponseRaw.albums.items.filterNotNull())&#10;                            allArtists.addAll(searchResponseRaw.artists.items.filterNotNull())&#10;                            allPlaylists.addAll(searchResponseRaw.playlists.items.filterNotNull())&#10;                            &#10;                            pageCount++&#10;                            &#10;                            // Enviar resultados después de cada página para mostrar progreso&#10;                            val currentResponse = SpotifySearchAllResponse(&#10;                                tracks = SpotifyTracksSearchResult(&#10;                                    items = allTracks.distinctBy { it.id },&#10;                                    total = searchResponseRaw.tracks.total,&#10;                                    limit = maxLimit,&#10;                                    offset = 0,&#10;                                    next = if (searchResponseRaw.tracks.items.size == maxLimit) &quot;more&quot; else null&#10;                                ),&#10;                                albums = SpotifyAlbumsSearchResult(&#10;                                    items = allAlbums.distinctBy { it.id },&#10;                                    total = searchResponseRaw.albums.total,&#10;                                    limit = maxLimit,&#10;                                    offset = 0,&#10;                                    next = if (searchResponseRaw.albums.items.size == maxLimit) &quot;more&quot; else null&#10;                                ),&#10;                                artists = SpotifyArtistsSearchResult(&#10;                                    items = allArtists.distinctBy { it.id },&#10;                                    total = searchResponseRaw.artists.total,&#10;                                    limit = maxLimit,&#10;                                    offset = 0,&#10;                                    next = if (searchResponseRaw.artists.items.size == maxLimit) &quot;more&quot; else null&#10;                                ),&#10;                                playlists = SpotifyPlaylistsSearchResult(&#10;                                    items = allPlaylists.distinctBy { it.id },&#10;                                    total = searchResponseRaw.playlists.total,&#10;                                    limit = maxLimit,&#10;                                    offset = 0,&#10;                                    next = if (searchResponseRaw.playlists.items.size == maxLimit) &quot;more&quot; else null&#10;                                )&#10;                            )&#10;                            &#10;                            android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Page $pageCount sent: ${allTracks.size} tracks, ${allAlbums.size} albums, ${allArtists.size} artists, ${allPlaylists.size} playlists&quot;)&#10;                            callback(currentResponse, null)&#10;                            &#10;                            // Verificar si hay más páginas que cargar&#10;                            val hasMoreTracks = searchResponseRaw.tracks.items.size == maxLimit &amp;&amp; allTracks.size &lt; (searchResponseRaw.tracks.total ?: 0)&#10;                            val hasMoreAlbums = searchResponseRaw.albums.items.size == maxLimit &amp;&amp; allAlbums.size &lt; (searchResponseRaw.albums.total ?: 0)&#10;                            val hasMoreArtists = searchResponseRaw.artists.items.size == maxLimit &amp;&amp; allArtists.size &lt; (searchResponseRaw.artists.total ?: 0)&#10;                            val hasMorePlaylists = searchResponseRaw.playlists.items.size == maxLimit &amp;&amp; allPlaylists.size &lt; (searchResponseRaw.playlists.total ?: 0)&#10;                            &#10;                            // Verificar si el próximo offset excedería el límite de Spotify (1000)&#10;                            val nextOffset = offset + maxLimit&#10;                            val wouldExceedLimit = nextOffset &gt;= 1000&#10;                            &#10;                            // Si hay más contenido en cualquier categoría y no excedemos el límite, continuar paginando&#10;                            if ((hasMoreTracks || hasMoreAlbums || hasMoreArtists || hasMorePlaylists) &amp;&amp; !wouldExceedLimit) {&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Fetching next page: offset=$nextOffset&quot;)&#10;                                // Agregar un pequeño delay para no sobrecargar la API&#10;                                android.os.Handler(android.os.Looper.getMainLooper()).postDelayed({&#10;                                    fetchPage(nextOffset)&#10;                                }, 200) // 200ms de delay entre requests&#10;                            } else {&#10;                                // Paginación completada (por límite de API o porque no hay más resultados)&#10;                                if (wouldExceedLimit) {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Pagination stopped: reached Spotify API limit (offset would be $nextOffset &gt;= 1000)&quot;)&#10;                                } else {&#10;                                    android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Pagination completed: no more results available&quot;)&#10;                                }&#10;                                android.util.Log.d(&quot;SpotifyRepository&quot;, &quot;Final results: ${allTracks.size} tracks, ${allAlbums.size} albums, ${allArtists.size} artists, ${allPlaylists.size} playlists&quot;)&#10;                            }&#10;                        } catch (e: Exception) {&#10;                            callback(null, &quot;Error parsing search results: ${e.message}&quot;)&#10;                        }&#10;                    } else {&#10;                        callback(null, &quot;Error HTTP ${response.code}: $body&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;        &#10;        // Iniciar la paginación&#10;        fetchPage(0)&#10;    }&#10;&#10;    // Obtener el user_id del usuario actual&#10;    fun getCurrentUserId(accessToken: String, callback: (String?, String?) -&gt; Unit) {&#10;        val request = Request.Builder()&#10;            .url(&quot;https://api.spotify.com/v1/me&quot;)&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;            .get()&#10;            .build()&#10;&#10;        client.newCall(request).enqueue(object : Callback {&#10;            override fun onFailure(call: Call, e: IOException) {&#10;                callback(null, &quot;Network error: ${e.message}&quot;)&#10;            }&#10;            override fun onResponse(call: Call, response: Response) {&#10;                val body = response.body?.string()&#10;                if (response.isSuccessful &amp;&amp; body != null) {&#10;                    try {&#10;                        val json = gson.fromJson(body, Map::class.java)&#10;                        val userId = json[&quot;id&quot;] as? String&#10;                        callback(userId, null)&#10;                    } catch (e: Exception) {&#10;                        callback(null, &quot;Error parsing user id: ${e.message}&quot;)&#10;                    }&#10;                } else {&#10;                    callback(null, &quot;HTTP error ${response.code}: $body&quot;)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // Crear playlist&#10;    fun createPlaylist(&#10;        accessToken: String,&#10;        name: String,&#10;        description: String,&#10;        isPublic: Boolean,&#10;        callback: (Boolean, String?) -&gt; Unit&#10;    ) {&#10;        getCurrentUserId(accessToken) { userId, error -&gt;&#10;            if (userId == null) {&#10;                callback(false, error ?: &quot;Could not get user id&quot;)&#10;                return@getCurrentUserId&#10;            }&#10;            val url = &quot;https://api.spotify.com/v1/users/$userId/playlists&quot;&#10;            val jsonBody = &quot;&quot;&quot;&#10;            {&#10;                &quot;name&quot;: &quot;$name&quot;,&#10;                &quot;description&quot;: &quot;$description&quot;,&#10;                &quot;public&quot;: $isPublic&#10;            }&#10;        &quot;&quot;&quot;.trimIndent()&#10;            val request = Request.Builder()&#10;                .url(url)&#10;                .addHeader(&quot;Authorization&quot;, &quot;Bearer $accessToken&quot;)&#10;                .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)&#10;                .post(jsonBody.toRequestBody(&quot;application/json&quot;.toMediaType()))&#10;                .build()&#10;            client.newCall(request).enqueue(object : Callback {&#10;                override fun onFailure(call: Call, e: IOException) {&#10;                    callback(false, &quot;Network error: ${e.message}&quot;)&#10;                }&#10;                override fun onResponse(call: Call, response: Response) {&#10;                    if (response.isSuccessful) {&#10;                        callback(true, null)&#10;                    } else {&#10;                        val errorBody = response.body?.string()&#10;                        callback(false, &quot;HTTP error ${response.code}: $errorBody&quot;)&#10;                    }&#10;                }&#10;            })&#10;        }&#10;    }&#10;&#10;    private fun createBasicAuthHeader(context: Context): String {&#10;        val credentials = &quot;${Config.getSpotifyClientId(context)}:${Config.getSpotifyClientSecret(context)}&quot;&#10;        val encodedCredentials = Base64.encodeToString(credentials.toByteArray(), Base64.NO_WRAP)&#10;        return &quot;Basic $encodedCredentials&quot;&#10;    }&#10;}&#10;&#10;&#10;// Data classes para Spotify API&#10;data class SpotifyTokens(&#10;    @SerializedName(&quot;access_token&quot;) val accessToken: String,&#10;    @SerializedName(&quot;token_type&quot;) val tokenType: String,&#10;    @SerializedName(&quot;scope&quot;) val scope: String,&#10;    @SerializedName(&quot;expires_in&quot;) val expiresIn: Int,&#10;    @SerializedName(&quot;refresh_token&quot;) val refreshToken: String?&#10;)&#10;&#10;data class SpotifyPlaylistResponse(&#10;    val items: List&lt;SpotifyPlaylist&gt;&#10;)&#10;&#10;data class SpotifyPlaylist(&#10;    val id: String,&#10;    val name: String,&#10;    val description: String?,&#10;    val tracks: SpotifyPlaylistTracks?,&#10;    val images: List&lt;SpotifyImage&gt;?&#10;) {&#10;    fun getTrackCount(): String {&#10;        return tracks?.total?.let { &quot;$it songs&quot; } ?: &quot;0 songs&quot;&#10;    }&#10;    &#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyPlaylistTracks(&#10;    val href: String?,&#10;    val total: Int&#10;)&#10;&#10;data class SpotifyImage(&#10;    val url: String,&#10;    val height: Int?,&#10;    val width: Int?&#10;)&#10;&#10;data class SpotifyTracksResponse(&#10;    val items: List&lt;SpotifyTrackItem&gt;&#10;)&#10;&#10;data class SpotifyTrackItem(&#10;    val track: SpotifyTrack?&#10;)&#10;&#10;data class SpotifyTrack(&#10;    val id: String,&#10;    val name: String,&#10;    val artists: List&lt;SpotifyArtist&gt;,&#10;    @SerializedName(&quot;duration_ms&quot;) val durationMs: Int? = null&#10;) {&#10;    fun getArtistNames(): String {&#10;        return artists.joinToString(&quot;, &quot;) { it.name }&#10;    }&#10;    &#10;    fun getDisplayName(): String {&#10;        return &quot;$name - ${getArtistNames()}&quot;&#10;    }&#10;    &#10;    fun getDurationText(): String {&#10;        return durationMs?.let {&#10;            val minutes = it / 60000&#10;            val seconds = (it % 60000) / 1000&#10;            &quot;${minutes}:${seconds.toString().padStart(2, '0')}&quot;&#10;        } ?: &quot;0:00&quot;&#10;    }&#10;}&#10;&#10;data class SpotifySearchResponse(&#10;    val tracks: SpotifyTracksSearchResult&#10;)&#10;&#10;data class SpotifySearchResponseRaw(&#10;    val tracks: SpotifyTracksSearchResultRaw&#10;)&#10;&#10;data class SpotifySearchAllResponse(&#10;    val tracks: SpotifyTracksSearchResult,&#10;    val albums: SpotifyAlbumsSearchResult,&#10;    val artists: SpotifyArtistsSearchResult,&#10;    val playlists: SpotifyPlaylistsSearchResult&#10;)&#10;&#10;data class SpotifyTracksSearchResult(&#10;    val items: List&lt;SpotifyTrack&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbumsSearchResult(&#10;    val items: List&lt;SpotifyAlbum&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyArtistsSearchResult(&#10;    val items: List&lt;SpotifyArtistFull&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistsSearchResult(&#10;    val items: List&lt;SpotifyPlaylist&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbum(&#10;    val id: String,&#10;    val name: String,&#10;    val artists: List&lt;SpotifyArtist&gt;,&#10;    val images: List&lt;SpotifyImage&gt;?,&#10;    @SerializedName(&quot;release_date&quot;) val release_date: String? = null,&#10;    @SerializedName(&quot;total_tracks&quot;) val total_tracks: Int? = null&#10;) {&#10;    fun getArtistNames(): String {&#10;        return artists.joinToString(&quot;, &quot;) { it.name }&#10;    }&#10;    &#10;    fun getDisplayName(): String {&#10;        return &quot;$name - ${getArtistNames()}&quot;&#10;    }&#10;    &#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyArtistFull(&#10;    val id: String,&#10;    val name: String,&#10;    val images: List&lt;SpotifyImage&gt;?,&#10;    val followers: SpotifyFollowers?,&#10;    val genres: List&lt;String&gt;?&#10;) {&#10;    fun getImageUrl(): String {&#10;        return images?.firstOrNull()?.url ?: &quot;&quot;&#10;    }&#10;    &#10;    fun getFollowersCount(): String {&#10;        return followers?.total?.let { &quot;${it} seguidores&quot; } ?: &quot;0 seguidores&quot;&#10;    }&#10;    &#10;    fun getGenresText(): String {&#10;        return genres?.joinToString(&quot;, &quot;) ?: &quot;Sin géneros&quot;&#10;    }&#10;}&#10;&#10;data class SpotifyFollowers(&#10;    val total: Int&#10;)&#10;&#10;data class SpotifyArtist(&#10;    val name: String&#10;)&#10;&#10;// Data classes para contenido interno&#10;data class SpotifyPlaylistTracksResponse(&#10;    val items: List&lt;SpotifyPlaylistTrack&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistTracksResponseRaw(&#10;    val items: List&lt;SpotifyPlaylistTrack?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistTrack(&#10;    val track: SpotifyTrack?&#10;)&#10;&#10;// Data classes auxiliares para parsing (con nullable items)&#10;data class SpotifyTracksSearchResultRaw(&#10;    val items: List&lt;SpotifyTrack?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyAlbumsSearchResultRaw(&#10;    val items: List&lt;SpotifyAlbum?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyArtistsSearchResultRaw(&#10;    val items: List&lt;SpotifyArtistFull?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifyPlaylistsSearchResultRaw(&#10;    val items: List&lt;SpotifyPlaylist?&gt;,&#10;    val total: Int? = null,&#10;    val limit: Int? = null,&#10;    val offset: Int? = null,&#10;    val next: String? = null&#10;)&#10;&#10;data class SpotifySearchAllResponseRaw(&#10;    val tracks: SpotifyTracksSearchResultRaw,&#10;    val albums: SpotifyAlbumsSearchResultRaw,&#10;    val artists: SpotifyArtistsSearchResultRaw,&#10;    val playlists: SpotifyPlaylistsSearchResultRaw&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicNotificationManager.kt" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.content.ComponentName&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.content.ServiceConnection&#10;import android.os.IBinder&#10;import android.util.Log&#10;import com.plyr.database.TrackEntity&#10;&#10;/**&#10; * MusicNotificationManager - Clase helper para gestionar la notificación de música&#10; * &#10; * Esta clase actúa como puente entre tu PlayerViewModel y el MusicService,&#10; * facilitando el control de la notificación sin tener que manejar directamente&#10; * el service binding en el ViewModel.&#10; */&#10;class MusicNotificationManager(private val context: Context) {&#10;    &#10;    private var musicService: MusicService? = null&#10;    private var isBound = false&#10;    &#10;    companion object {&#10;        private const val TAG = &quot;MusicNotificationManager&quot;&#10;    }&#10;    &#10;    /**&#10;     * Conexión con el servicio de música&#10;     */&#10;    private val serviceConnection = object : ServiceConnection {&#10;        override fun onServiceConnected(name: ComponentName?, service: IBinder?) {&#10;            Log.d(TAG, &quot;Service connected&quot;)&#10;            val binder = service as MusicService.MusicBinder&#10;            musicService = binder.getService()&#10;            isBound = true&#10;        }&#10;        &#10;        override fun onServiceDisconnected(name: ComponentName?) {&#10;            Log.d(TAG, &quot;Service disconnected&quot;)&#10;            musicService = null&#10;            isBound = false&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Inicia el servicio y se conecta a él&#10;     */&#10;    fun startService() {&#10;        Log.d(TAG, &quot;Starting MusicService&quot;)&#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.startService(serviceIntent)&#10;        context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;    }&#10;    &#10;    /**&#10;     * Para el servicio y se desconecta&#10;     */&#10;    fun stopService() {&#10;        Log.d(TAG, &quot;Stopping MusicService&quot;)&#10;        if (isBound) {&#10;            context.unbindService(serviceConnection)&#10;            isBound = false&#10;        }&#10;        &#10;        val serviceIntent = Intent(context, MusicService::class.java)&#10;        context.stopService(serviceIntent)&#10;        musicService = null&#10;    }&#10;    &#10;    /**&#10;     * Inicia la reproducción de audio con notificación&#10;     */&#10;    fun playAudio(audioUrl: String, title: String, artist: String) {&#10;        Log.d(TAG, &quot;Playing audio: $title by $artist&quot;)&#10;        &#10;        if (!isBound) {&#10;            // Si no está conectado, iniciar el servicio con los datos&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;AUDIO_URL&quot;, audioUrl)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;            context.bindService(serviceIntent, serviceConnection, Context.BIND_AUTO_CREATE)&#10;        } else {&#10;            // Si ya está conectado, usar el servicio directamente&#10;            musicService?.updateSongInfo(title, artist)&#10;            musicService?.playAudio(audioUrl)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza la información de la canción en la notificación&#10;     */&#10;    fun updateSongInfo(title: String, artist: String) {&#10;        Log.d(TAG, &quot;Updating song info: $title by $artist&quot;)&#10;        &#10;        if (isBound &amp;&amp; musicService != null) {&#10;            musicService?.updateSongInfo(title, artist)&#10;        } else {&#10;            // Si no está conectado, enviar intent de actualización&#10;            val serviceIntent = Intent(context, MusicService::class.java).apply {&#10;                putExtra(&quot;UPDATE_INFO&quot;, true)&#10;                putExtra(&quot;SONG_TITLE&quot;, title)&#10;                putExtra(&quot;SONG_ARTIST&quot;, artist)&#10;            }&#10;            context.startService(serviceIntent)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Actualiza usando un TrackEntity&#10;     */&#10;    fun updateSongInfo(track: TrackEntity) {&#10;        updateSongInfo(track.name, track.artists)&#10;    }&#10;    &#10;    /**&#10;     * Pausa/reanuda la reproducción desde la notificación&#10;     */&#10;    fun togglePlayPause() {&#10;        musicService?.togglePlayPause()&#10;    }&#10;    &#10;    /**&#10;     * Para completamente la reproducción&#10;     */&#10;    fun stopPlayback() {&#10;        musicService?.stopPlayback()&#10;    }&#10;    &#10;    /**&#10;     * Verifica si está reproduciendo&#10;     */&#10;    fun isPlaying(): Boolean {&#10;        return musicService?.isPlaying() ?: false&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el servicio está conectado&#10;     */&#10;    fun isServiceConnected(): Boolean {&#10;        return isBound &amp;&amp; musicService != null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicService.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/service/MusicService.kt" />
              <option name="originalContent" value="package com.plyr.service&#10;&#10;import android.app.Notification&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.app.Service&#10;import android.content.Intent&#10;import android.os.Binder&#10;import android.os.Build&#10;import android.os.IBinder&#10;import android.os.PowerManager&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import androidx.media3.common.Player&#10;import androidx.media3.session.MediaSession&#10;import com.plyr.MainActivity&#10;import com.plyr.PlyrApp&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;class MusicService : Service() {&#10;&#10;    // === PROPIEDADES ===&#10;    private var mediaSession: MediaSession? = null&#10;    private lateinit var wakeLock: PowerManager.WakeLock&#10;    private var playlist: List&lt;String&gt; = emptyList()&#10;    private var currentIndex: Int = 0&#10;&#10;    // === CONSTANTES ===&#10;    companion object {&#10;        private const val NOTIFICATION_ID = 1&#10;        private const val CHANNEL_ID = &quot;music_channel&quot;&#10;        private const val CHANNEL_NAME = &quot;Music Playback&quot;&#10;        private const val CHANNEL_DESCRIPTION = &quot;Controls for music playback&quot;&#10;    }&#10;&#10;    // === CICLO DE VIDA DEL SERVICIO ===&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        val powerManager = getSystemService(POWER_SERVICE) as PowerManager&#10;        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &quot;MusicService::WakeLock&quot;)&#10;        wakeLock.acquire(10 * 60 * 1000L /* 10 minutos */)&#10;&#10;        createNotificationChannel()&#10;        // Iniciar foreground service con notificación persistente&#10;        startForeground(NOTIFICATION_ID, createNotification())&#10;        setupPlayerListener()&#10;        createMediaSession()&#10;    }&#10;&#10;    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        when (intent?.action) {&#10;            &quot;ACTION_PLAY&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot; ACTION_PLAY recibido&quot;)&#10;                plyr.playPlayer()&#10;&#10;                // Actualizar notificación después de un breve delay&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    kotlinx.coroutines.delay(200)&#10;                    updateNotification()&#10;                }&#10;            }&#10;            &quot;ACTION_PAUSE&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏸️ ACTION_PAUSE recibido&quot;)&#10;                plyr.pausePlayer()&#10;&#10;                // Actualizar notificación después de un breve delay&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    kotlinx.coroutines.delay(200)&#10;                    updateNotification()&#10;                }&#10;            }&#10;            &quot;ACTION_NEXT&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏭️ ACTION_NEXT recibido&quot;)&#10;                if (plyr.hasNext.value == true) {&#10;                    println(&quot;⏭️ NAVEGANDO: Siguiente canción...&quot;)&#10;&#10;                    // Ejecutar en el hilo principal&#10;                    CoroutineScope(Dispatchers.Main).launch {&#10;                        plyr.navigateToNext()&#10;                        val player = plyr.getPlayer()&#10;                        player?.playWhenReady = true&#10;&#10;                        kotlinx.coroutines.delay(300)&#10;                        updateNotification()&#10;                    }&#10;                } else {&#10;                    Log.d(&quot;MusicService&quot;, &quot;No next track available&quot;)&#10;                }&#10;            }&#10;            &quot;ACTION_PREV&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏮️ ACTION_PREV recibido&quot;)&#10;                if (plyr.hasPrevious.value == true) {&#10;                    println(&quot;⏮️ NAVEGANDO: Canción anterior...&quot;)&#10;&#10;                    // Ejecutar en el hilo principal&#10;                    CoroutineScope(Dispatchers.Main).launch {&#10;                        plyr.navigateToPrevious()&#10;                        val player = plyr.getPlayer()&#10;                        player?.playWhenReady = true&#10;&#10;                        kotlinx.coroutines.delay(300)&#10;                        updateNotification()&#10;                    }&#10;                } else {&#10;                    Log.d(&quot;MusicService&quot;, &quot;No previous track available&quot;)&#10;                }&#10;            }&#10;            else -&gt; {&#10;                val audioUrl = intent?.getStringExtra(&quot;AUDIO_URL&quot;)&#10;                if (audioUrl != null) playAudio(audioUrl)&#10;            }&#10;        }&#10;        return START_STICKY&#10;    }&#10;&#10;    // === CONFIGURACIÓN DE COMPONENTES ===&#10;    private fun createMediaSession() {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val sharedPlayer = plyr.getPlayer()&#10;&#10;        if (sharedPlayer != null) {&#10;            mediaSession = MediaSession.Builder(this, sharedPlayer).build()&#10;            Log.d(&quot;MusicService&quot;, &quot;✅ MediaSession creada correctamente&quot;)&#10;        } else {&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ No se pudo obtener el player de PlayerViewModel&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupPlayerListener() {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val sharedPlayer = plyr.getPlayer()&#10;&#10;        sharedPlayer?.addListener(object : Player.Listener {&#10;            override fun onIsPlayingChanged(isPlaying: Boolean) {&#10;                Log.d(&quot;MusicService&quot;, &quot; onIsPlayingChanged: isPlaying = $isPlaying&quot;)&#10;&#10;                // Printear el estado actual&#10;                if (isPlaying) {&#10;                    println(&quot; ESTADO: PLAYING - La canción está reproduciéndose&quot;)&#10;                    Log.d(&quot;MusicService&quot;, &quot; ESTADO: PLAYING&quot;)&#10;                } else {&#10;                    println(&quot;⏸️ ESTADO: PAUSED - La canción está pausada&quot;)&#10;                    Log.d(&quot;MusicService&quot;, &quot;⏸️ ESTADO: PAUSED&quot;)&#10;                }&#10;&#10;                // Ejecutar en el hilo principal&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    handlePlaybackStateChange(isPlaying)&#10;                }&#10;            }&#10;&#10;            override fun onPlaybackStateChanged(playbackState: Int) {&#10;                val stateName = when (playbackState) {&#10;                    Player.STATE_IDLE -&gt; &quot;IDLE&quot;&#10;                    Player.STATE_BUFFERING -&gt; &quot;BUFFERING&quot;&#10;                    Player.STATE_READY -&gt; &quot;READY&quot;&#10;                    Player.STATE_ENDED -&gt; &quot;ENDED&quot;&#10;                    else -&gt; &quot;UNKNOWN&quot;&#10;                }&#10;&#10;                // Printear los cambios de estado&#10;                when (playbackState) {&#10;                    Player.STATE_BUFFERING -&gt; {&#10;                        println(&quot;⏳ ESTADO: LOADING - Cargando canción...&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot;⏳ ESTADO: LOADING - Buffering&quot;)&#10;                    }&#10;                    Player.STATE_READY -&gt; {&#10;                        println(&quot;✅ ESTADO: READY - Canción lista para reproducir&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot;✅ ESTADO: READY&quot;)&#10;&#10;                        // Verificar si debe empezar a reproducir automáticamente (en hilo principal)&#10;                        CoroutineScope(Dispatchers.Main).launch {&#10;                            val player = plyr.getPlayer()&#10;                            if (player?.playWhenReady == true &amp;&amp; !player.isPlaying) {&#10;                                println(&quot; INICIANDO REPRODUCCIÓN AUTOMÁTICA&quot;)&#10;                                Log.d(&quot;MusicService&quot;, &quot; Iniciando reproducción automática&quot;)&#10;                                player.play()&#10;                            }&#10;                            updateNotification()&#10;                        }&#10;                    }&#10;                    Player.STATE_ENDED -&gt; {&#10;                        println(&quot; ESTADO: ENDED - Canción terminada&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot; ESTADO: ENDED&quot;)&#10;                        CoroutineScope(Dispatchers.Main).launch {&#10;                            handleTrackEnded()&#10;                        }&#10;                    }&#10;                    Player.STATE_IDLE -&gt; {&#10;                        println(&quot; ESTADO: IDLE - Player inactivo&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot; ESTADO: IDLE&quot;)&#10;                    }&#10;                }&#10;&#10;                Log.d(&quot;MusicService&quot;, &quot; onPlaybackStateChanged: state = $stateName ($playbackState)&quot;)&#10;            }&#10;&#10;            override fun onPlayerError(error: androidx.media3.common.PlaybackException) {&#10;                println(&quot;❌ ESTADO: ERROR - ${error.message}&quot;)&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Player error: ${error.message}&quot;, error)&#10;&#10;                // Ejecutar en el hilo principal&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    handlePlayerError(error)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // === MÉTODOS DE REPRODUCCIÓN ===&#10;    fun playAudio(audioUrl: String) {&#10;        Log.d(&quot;MusicService&quot;, &quot; playAudio llamado con: $audioUrl&quot;)&#10;        println(&quot; INICIANDO CARGA: $audioUrl&quot;)&#10;&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;&#10;        try {&#10;            plyr.loadAudio(audioUrl, &quot;Audio Track&quot;)&#10;&#10;            // Asegurar que se reproduce cuando esté listo (en hilo principal)&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                val player = plyr.getPlayer()&#10;                player?.playWhenReady = true&#10;&#10;                kotlinx.coroutines.delay(500)&#10;                startForeground(NOTIFICATION_ID, createNotification())&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;❌ ERROR AL CARGAR: ${e.message}&quot;)&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ Error al reproducir audio: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;    fun playPlaylist(urls: List&lt;String&gt;, startIndex: Int = 0) {&#10;        playlist = urls&#10;        currentIndex = startIndex.coerceIn(0, urls.size - 1)&#10;&#10;        if (playlist.isNotEmpty()) {&#10;            Log.d(&quot;MusicService&quot;, &quot; Playing playlist: ${playlist.size} tracks, starting at index $currentIndex&quot;)&#10;            playAudio(playlist[currentIndex])&#10;        } else {&#10;            Log.w(&quot;MusicService&quot;, &quot;⚠️ Attempted to play empty playlist&quot;)&#10;        }&#10;    }&#10;&#10;    // === MANEJO DE ESTADOS ===&#10;    private fun handlePlaybackStateChange(isPlaying: Boolean) {&#10;        Log.d(&quot;MusicService&quot;, &quot; handlePlaybackStateChange: isPlaying = $isPlaying&quot;)&#10;&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val hasMedia = plyr.getPlayer()?.currentMediaItem != null&#10;&#10;        if (hasMedia || isPlaying) {&#10;            Log.d(&quot;MusicService&quot;, &quot; Actualizando notificación - isPlaying: $isPlaying&quot;)&#10;            try {&#10;                // Para la primera vez, usar startForeground&#10;                if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                    updateNotification()&#10;                } else {&#10;                    startForeground(NOTIFICATION_ID, createNotification())&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Error al mostrar notificación: ${e.message}&quot;, e)&#10;            }&#10;        } else {&#10;            Log.d(&quot;MusicService&quot;, &quot;⏸️ Sin contenido, deteniendo servicio en primer plano&quot;)&#10;            stopForeground(STOP_FOREGROUND_DETACH)&#10;        }&#10;    }&#10;&#10;    private fun handleTrackEnded() {&#10;        if (playlist.isNotEmpty() &amp;&amp; currentIndex &lt; playlist.size - 1) {&#10;            currentIndex++&#10;            val nextUrl = playlist[currentIndex]&#10;            Log.d(&quot;MusicService&quot;, &quot;⏭️ Track ended, playing next: $nextUrl&quot;)&#10;            playAudio(nextUrl)&#10;        } else {&#10;            Log.d(&quot;MusicService&quot;, &quot; Playlist ended&quot;)&#10;            stopForeground(STOP_FOREGROUND_DETACH)&#10;        }&#10;    }&#10;&#10;    private fun handlePlayerError(error: androidx.media3.common.PlaybackException) {&#10;        Log.e(&quot;MusicService&quot;, &quot;❌ Manejando error del player: ${error.message}&quot;)&#10;&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            try {&#10;                // Limpiar MediaSession&#10;                cleanupResources()&#10;&#10;                // Esperar un momento antes de reintentar&#10;                kotlinx.coroutines.delay(1000)&#10;&#10;                // Recrear MediaSession con el player existente&#10;                createMediaSession()&#10;&#10;                // Reintentar la reproducción si hay un track actual&#10;                if (playlist.isNotEmpty() &amp;&amp; currentIndex &lt; playlist.size) {&#10;                    Log.d(&quot;MusicService&quot;, &quot; Reintentando reproducción del track actual&quot;)&#10;                    playAudio(playlist[currentIndex])&#10;                }&#10;&#10;                Log.d(&quot;MusicService&quot;, &quot; Recuperación de error completada&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Error durante la recuperación: ${e.message}&quot;, e)&#10;&#10;                // Si falla todo, detener el servicio&#10;                stopForeground(STOP_FOREGROUND_DETACH)&#10;                stopSelf()&#10;            }&#10;        }&#10;    }&#10;&#10;    // === CONFIGURACIÓN DE NOTIFICACIONES ===&#10;    private fun createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                CHANNEL_ID,&#10;                CHANNEL_NAME,&#10;                NotificationManager.IMPORTANCE_LOW&#10;            ).apply {&#10;                description = CHANNEL_DESCRIPTION&#10;                setShowBadge(false)&#10;                lockscreenVisibility = Notification.VISIBILITY_PUBLIC&#10;                setSound(null, null) // Sin sonido para la notificación&#10;            }&#10;&#10;            val notificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;    }&#10;    private fun createNotification(): Notification {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val player = plyr.getPlayer()&#10;        val currentMediaItem = player?.currentMediaItem&#10;        val title = currentMediaItem?.mediaMetadata?.title?.toString() ?: &quot;Music Player&quot;&#10;&#10;        // Obtener el estado correcto del player&#10;        val isCurrentlyPlaying = player?.isPlaying == true&#10;&#10;        Log.d(&quot;MusicService&quot;, &quot; Creando notificación - Playing: $isCurrentlyPlaying, Title: $title&quot;)&#10;&#10;        val playIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PLAY&quot; }&#10;        val pauseIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PAUSE&quot; }&#10;        val nextIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_NEXT&quot; }&#10;        val prevIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PREV&quot; }&#10;&#10;        val playPendingIntent = PendingIntent.getService(this, 0, playIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val pausePendingIntent = PendingIntent.getService(this, 1, pauseIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val nextPendingIntent = PendingIntent.getService(this, 2, nextIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val prevPendingIntent = PendingIntent.getService(this, 3, prevIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;&#10;        val builder = NotificationCompat.Builder(this, CHANNEL_ID)&#10;            .setContentTitle(title)&#10;            .setContentText(if (isCurrentlyPlaying) &quot;Reproduciendo...&quot; else &quot;En pausa&quot;)&#10;            .setSmallIcon(if (isCurrentlyPlaying) android.R.drawable.ic_media_pause else android.R.drawable.ic_media_play)&#10;            .setContentIntent(createMainActivityPendingIntent())&#10;            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)&#10;            .setPriority(NotificationCompat.PRIORITY_LOW)&#10;            .setOngoing(true) // Notificación persistente&#10;            .setShowWhen(false)&#10;            .setOnlyAlertOnce(true) // Evita alertas repetidas&#10;&#10;        val compactActions = mutableListOf&lt;Int&gt;()&#10;        var actionIndex = 0&#10;&#10;        // Botón anterior (si hay pista anterior)&#10;        if (plyr.hasPrevious.value == true) {&#10;            builder.addAction(android.R.drawable.ic_media_previous, &quot;Previous&quot;, prevPendingIntent)&#10;            compactActions.add(actionIndex)&#10;            actionIndex++&#10;        }&#10;&#10;        // Botón play/pause (siempre presente)&#10;        val playPauseIcon = if (isCurrentlyPlaying) android.R.drawable.ic_media_pause else android.R.drawable.ic_media_play&#10;        val playPauseText = if (isCurrentlyPlaying) &quot;Pause&quot; else &quot;Play&quot;&#10;        val playPauseIntent = if (isCurrentlyPlaying) pausePendingIntent else playPendingIntent&#10;&#10;        builder.addAction(playPauseIcon, playPauseText, playPauseIntent)&#10;        compactActions.add(actionIndex)&#10;        actionIndex++&#10;&#10;        // Botón siguiente (si hay pista siguiente)&#10;        if (plyr.hasNext.value == true) {&#10;            builder.addAction(android.R.drawable.ic_media_next, &quot;Next&quot;, nextPendingIntent)&#10;            compactActions.add(actionIndex)&#10;        }&#10;&#10;        // MediaStyle simplificado sin MediaSession token&#10;        builder.setStyle(androidx.media.app.NotificationCompat.MediaStyle()&#10;            .setShowActionsInCompactView(*compactActions.toIntArray())&#10;        )&#10;&#10;        return builder.build()&#10;    }&#10;&#10;    private fun createMainActivityPendingIntent(): PendingIntent {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        return PendingIntent.getActivity(&#10;            this, 0, intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;    }&#10;    /**&#10;     * Actualiza la notificación existente&#10;     */&#10;    private fun updateNotification() {&#10;        try {&#10;            val notification = createNotification()&#10;            val notificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.notify(NOTIFICATION_ID, notification)&#10;            Log.d(&quot;MusicService&quot;, &quot; Notificación actualizada&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ Error al actualizar notificación: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    // === BINDING ===&#10;    inner class MusicBinder : Binder() {&#10;        fun getService(): MusicService = this@MusicService&#10;    }&#10;&#10;    private val binder = MusicBinder()&#10;&#10;    override fun onBind(intent: Intent): IBinder {&#10;        return binder&#10;    }&#10;&#10;    // === LIMPIEZA DE RECURSOS ===&#10;    override fun onDestroy() {&#10;        Log.d(&quot;MusicService&quot;, &quot;️ Destruyendo MusicService&quot;)&#10;        if (::wakeLock.isInitialized &amp;&amp; wakeLock.isHeld) {&#10;            wakeLock.release()&#10;        }&#10;        cleanupResources()&#10;        super.onDestroy()&#10;    }&#10;&#10;    private fun cleanupResources() {&#10;        mediaSession?.run {&#10;            release()&#10;            mediaSession = null&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.plyr.service&#10;&#10;import android.app.Notification&#10;import android.app.NotificationChannel&#10;import android.app.NotificationManager&#10;import android.app.PendingIntent&#10;import android.app.Service&#10;import android.content.Intent&#10;import android.os.Binder&#10;import android.os.Build&#10;import android.os.IBinder&#10;import android.os.PowerManager&#10;import android.util.Log&#10;import androidx.core.app.NotificationCompat&#10;import androidx.media3.common.Player&#10;import androidx.media3.session.MediaSession&#10;import com.plyr.MainActivity&#10;import com.plyr.PlyrApp&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;&#10;class MusicService : Service() {&#10;&#10;    // === PROPIEDADES ===&#10;    private var mediaSession: MediaSession? = null&#10;    private lateinit var wakeLock: PowerManager.WakeLock&#10;    private var playlist: List&lt;String&gt; = emptyList()&#10;    private var currentIndex: Int = 0&#10;&#10;    // === CONSTANTES ===&#10;    companion object {&#10;        private const val NOTIFICATION_ID = 1&#10;        private const val CHANNEL_ID = &quot;music_channel&quot;&#10;        private const val CHANNEL_NAME = &quot;Music Playback&quot;&#10;        private const val CHANNEL_DESCRIPTION = &quot;Controls for music playback&quot;&#10;    }&#10;&#10;    // === CICLO DE VIDA DEL SERVICIO ===&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        val powerManager = getSystemService(POWER_SERVICE) as PowerManager&#10;        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, &quot;MusicService::WakeLock&quot;)&#10;        wakeLock.acquire(10 * 60 * 1000L /* 10 minutos */)&#10;&#10;        createNotificationChannel()&#10;        // Iniciar foreground service con notificación persistente&#10;        startForeground(NOTIFICATION_ID, createNotification())&#10;        setupPlayerListener()&#10;        createMediaSession()&#10;    }&#10;&#10;    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        when (intent?.action) {&#10;            &quot;ACTION_PLAY&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot; ACTION_PLAY recibido&quot;)&#10;                plyr.playPlayer()&#10;&#10;                // Actualizar notificación después de un breve delay&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    kotlinx.coroutines.delay(200)&#10;                    updateNotification()&#10;                }&#10;            }&#10;            &quot;ACTION_PAUSE&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏸️ ACTION_PAUSE recibido&quot;)&#10;                plyr.pausePlayer()&#10;&#10;                // Actualizar notificación después de un breve delay&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    kotlinx.coroutines.delay(200)&#10;                    updateNotification()&#10;                }&#10;            }&#10;            &quot;ACTION_NEXT&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏭️ ACTION_NEXT recibido&quot;)&#10;                if (plyr.hasNext.value == true) {&#10;                    println(&quot;⏭️ NAVEGANDO: Siguiente canción...&quot;)&#10;&#10;                    // Ejecutar en el hilo principal&#10;                    CoroutineScope(Dispatchers.Main).launch {&#10;                        plyr.navigateToNext()&#10;                        val player = plyr.getPlayer()&#10;                        player?.playWhenReady = true&#10;&#10;                        kotlinx.coroutines.delay(300)&#10;                        updateNotification()&#10;                    }&#10;                } else {&#10;                    Log.d(&quot;MusicService&quot;, &quot;No next track available&quot;)&#10;                }&#10;            }&#10;            &quot;ACTION_PREV&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot;⏮️ ACTION_PREV recibido&quot;)&#10;                if (plyr.hasPrevious.value == true) {&#10;                    println(&quot;⏮️ NAVEGANDO: Canción anterior...&quot;)&#10;&#10;                    // Ejecutar en el hilo principal&#10;                    CoroutineScope(Dispatchers.Main).launch {&#10;                        plyr.navigateToPrevious()&#10;                        val player = plyr.getPlayer()&#10;                        player?.playWhenReady = true&#10;&#10;                        kotlinx.coroutines.delay(300)&#10;                        updateNotification()&#10;                    }&#10;                } else {&#10;                    Log.d(&quot;MusicService&quot;, &quot;No previous track available&quot;)&#10;                }&#10;            }&#10;            &quot;ACTION_STOP&quot; -&gt; {&#10;                Log.d(&quot;MusicService&quot;, &quot; ACTION_STOP recibido - Deteniendo servicio&quot;)&#10;                stopForegroundService()&#10;                return START_NOT_STICKY&#10;            }&#10;            else -&gt; {&#10;                val audioUrl = intent?.getStringExtra(&quot;AUDIO_URL&quot;)&#10;                if (audioUrl != null) playAudio(audioUrl)&#10;            }&#10;        }&#10;        // Cambiar a START_NOT_STICKY para que no se reinicie automáticamente&#10;        return START_NOT_STICKY&#10;    }&#10;&#10;    // === CONFIGURACIÓN DE COMPONENTES ===&#10;    private fun createMediaSession() {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val sharedPlayer = plyr.getPlayer()&#10;&#10;        if (sharedPlayer != null) {&#10;            mediaSession = MediaSession.Builder(this, sharedPlayer).build()&#10;            Log.d(&quot;MusicService&quot;, &quot;✅ MediaSession creada correctamente&quot;)&#10;        } else {&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ No se pudo obtener el player de PlayerViewModel&quot;)&#10;        }&#10;    }&#10;&#10;    private fun setupPlayerListener() {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val sharedPlayer = plyr.getPlayer()&#10;&#10;        sharedPlayer?.addListener(object : Player.Listener {&#10;            override fun onIsPlayingChanged(isPlaying: Boolean) {&#10;                Log.d(&quot;MusicService&quot;, &quot; onIsPlayingChanged: isPlaying = $isPlaying&quot;)&#10;&#10;                // Printear el estado actual&#10;                if (isPlaying) {&#10;                    println(&quot; ESTADO: PLAYING - La canción está reproduciéndose&quot;)&#10;                    Log.d(&quot;MusicService&quot;, &quot; ESTADO: PLAYING&quot;)&#10;                } else {&#10;                    println(&quot;⏸️ ESTADO: PAUSED - La canción está pausada&quot;)&#10;                    Log.d(&quot;MusicService&quot;, &quot;⏸️ ESTADO: PAUSED&quot;)&#10;                }&#10;&#10;                // Ejecutar en el hilo principal&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    handlePlaybackStateChange(isPlaying)&#10;                }&#10;            }&#10;&#10;            override fun onPlaybackStateChanged(playbackState: Int) {&#10;                val stateName = when (playbackState) {&#10;                    Player.STATE_IDLE -&gt; &quot;IDLE&quot;&#10;                    Player.STATE_BUFFERING -&gt; &quot;BUFFERING&quot;&#10;                    Player.STATE_READY -&gt; &quot;READY&quot;&#10;                    Player.STATE_ENDED -&gt; &quot;ENDED&quot;&#10;                    else -&gt; &quot;UNKNOWN&quot;&#10;                }&#10;&#10;                // Printear los cambios de estado&#10;                when (playbackState) {&#10;                    Player.STATE_BUFFERING -&gt; {&#10;                        println(&quot;⏳ ESTADO: LOADING - Cargando canción...&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot;⏳ ESTADO: LOADING - Buffering&quot;)&#10;                    }&#10;                    Player.STATE_READY -&gt; {&#10;                        println(&quot;✅ ESTADO: READY - Canción lista para reproducir&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot;✅ ESTADO: READY&quot;)&#10;&#10;                        // Verificar si debe empezar a reproducir automáticamente (en hilo principal)&#10;                        CoroutineScope(Dispatchers.Main).launch {&#10;                            val player = plyr.getPlayer()&#10;                            if (player?.playWhenReady == true &amp;&amp; !player.isPlaying) {&#10;                                println(&quot; INICIANDO REPRODUCCIÓN AUTOMÁTICA&quot;)&#10;                                Log.d(&quot;MusicService&quot;, &quot; Iniciando reproducción automática&quot;)&#10;                                player.play()&#10;                            }&#10;                            updateNotification()&#10;                        }&#10;                    }&#10;                    Player.STATE_ENDED -&gt; {&#10;                        println(&quot; ESTADO: ENDED - Canción terminada&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot; ESTADO: ENDED&quot;)&#10;                        CoroutineScope(Dispatchers.Main).launch {&#10;                            handleTrackEnded()&#10;                        }&#10;                    }&#10;                    Player.STATE_IDLE -&gt; {&#10;                        println(&quot; ESTADO: IDLE - Player inactivo&quot;)&#10;                        Log.d(&quot;MusicService&quot;, &quot; ESTADO: IDLE&quot;)&#10;                    }&#10;                }&#10;&#10;                Log.d(&quot;MusicService&quot;, &quot; onPlaybackStateChanged: state = $stateName ($playbackState)&quot;)&#10;            }&#10;&#10;            override fun onPlayerError(error: androidx.media3.common.PlaybackException) {&#10;                println(&quot;❌ ESTADO: ERROR - ${error.message}&quot;)&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Player error: ${error.message}&quot;, error)&#10;&#10;                // Ejecutar en el hilo principal&#10;                CoroutineScope(Dispatchers.Main).launch {&#10;                    handlePlayerError(error)&#10;                }&#10;            }&#10;        })&#10;    }&#10;&#10;    // === MÉTODOS DE REPRODUCCIÓN ===&#10;    fun playAudio(audioUrl: String) {&#10;        Log.d(&quot;MusicService&quot;, &quot; playAudio llamado con: $audioUrl&quot;)&#10;        println(&quot; INICIANDO CARGA: $audioUrl&quot;)&#10;&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;&#10;        try {&#10;            plyr.loadAudio(audioUrl, &quot;Audio Track&quot;)&#10;&#10;            // Asegurar que se reproduce cuando esté listo (en hilo principal)&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                val player = plyr.getPlayer()&#10;                player?.playWhenReady = true&#10;&#10;                kotlinx.coroutines.delay(500)&#10;                startForeground(NOTIFICATION_ID, createNotification())&#10;            }&#10;        } catch (e: Exception) {&#10;            println(&quot;❌ ERROR AL CARGAR: ${e.message}&quot;)&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ Error al reproducir audio: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;    fun playPlaylist(urls: List&lt;String&gt;, startIndex: Int = 0) {&#10;        playlist = urls&#10;        currentIndex = startIndex.coerceIn(0, urls.size - 1)&#10;&#10;        if (playlist.isNotEmpty()) {&#10;            Log.d(&quot;MusicService&quot;, &quot; Playing playlist: ${playlist.size} tracks, starting at index $currentIndex&quot;)&#10;            playAudio(playlist[currentIndex])&#10;        } else {&#10;            Log.w(&quot;MusicService&quot;, &quot;⚠️ Attempted to play empty playlist&quot;)&#10;        }&#10;    }&#10;&#10;    // === MANEJO DE ESTADOS ===&#10;    private fun handlePlaybackStateChange(isPlaying: Boolean) {&#10;        Log.d(&quot;MusicService&quot;, &quot; handlePlaybackStateChange: isPlaying = $isPlaying&quot;)&#10;&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val hasMedia = plyr.getPlayer()?.currentMediaItem != null&#10;&#10;        if (hasMedia || isPlaying) {&#10;            Log.d(&quot;MusicService&quot;, &quot; Actualizando notificación - isPlaying: $isPlaying&quot;)&#10;            try {&#10;                // Para la primera vez, usar startForeground&#10;                if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.Q) {&#10;                    updateNotification()&#10;                } else {&#10;                    startForeground(NOTIFICATION_ID, createNotification())&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Error al mostrar notificación: ${e.message}&quot;, e)&#10;            }&#10;        } else {&#10;            Log.d(&quot;MusicService&quot;, &quot;⏸️ Sin contenido, deteniendo servicio en primer plano&quot;)&#10;            stopForeground(STOP_FOREGROUND_DETACH)&#10;        }&#10;    }&#10;&#10;    private fun handleTrackEnded() {&#10;        if (playlist.isNotEmpty() &amp;&amp; currentIndex &lt; playlist.size - 1) {&#10;            currentIndex++&#10;            val nextUrl = playlist[currentIndex]&#10;            Log.d(&quot;MusicService&quot;, &quot;⏭️ Track ended, playing next: $nextUrl&quot;)&#10;            playAudio(nextUrl)&#10;        } else {&#10;            Log.d(&quot;MusicService&quot;, &quot; Playlist ended&quot;)&#10;            stopForeground(STOP_FOREGROUND_DETACH)&#10;        }&#10;    }&#10;&#10;    private fun handlePlayerError(error: androidx.media3.common.PlaybackException) {&#10;        Log.e(&quot;MusicService&quot;, &quot;❌ Manejando error del player: ${error.message}&quot;)&#10;&#10;        CoroutineScope(Dispatchers.Main).launch {&#10;            try {&#10;                // Limpiar MediaSession&#10;                cleanupResources()&#10;&#10;                // Esperar un momento antes de reintentar&#10;                kotlinx.coroutines.delay(1000)&#10;&#10;                // Recrear MediaSession con el player existente&#10;                createMediaSession()&#10;&#10;                // Reintentar la reproducción si hay un track actual&#10;                if (playlist.isNotEmpty() &amp;&amp; currentIndex &lt; playlist.size) {&#10;                    Log.d(&quot;MusicService&quot;, &quot; Reintentando reproducción del track actual&quot;)&#10;                    playAudio(playlist[currentIndex])&#10;                }&#10;&#10;                Log.d(&quot;MusicService&quot;, &quot; Recuperación de error completada&quot;)&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;MusicService&quot;, &quot;❌ Error durante la recuperación: ${e.message}&quot;, e)&#10;&#10;                // Si falla todo, detener el servicio&#10;                stopForeground(STOP_FOREGROUND_DETACH)&#10;                stopSelf()&#10;            }&#10;        }&#10;    }&#10;&#10;    // === CONFIGURACIÓN DE NOTIFICACIONES ===&#10;    private fun createNotificationChannel() {&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {&#10;            val channel = NotificationChannel(&#10;                CHANNEL_ID,&#10;                CHANNEL_NAME,&#10;                NotificationManager.IMPORTANCE_LOW&#10;            ).apply {&#10;                description = CHANNEL_DESCRIPTION&#10;                setShowBadge(false)&#10;                lockscreenVisibility = Notification.VISIBILITY_PUBLIC&#10;                setSound(null, null) // Sin sonido para la notificación&#10;            }&#10;&#10;            val notificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.createNotificationChannel(channel)&#10;        }&#10;    }&#10;    private fun createNotification(): Notification {&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        val player = plyr.getPlayer()&#10;        val currentMediaItem = player?.currentMediaItem&#10;        val title = currentMediaItem?.mediaMetadata?.title?.toString() ?: &quot;Music Player&quot;&#10;&#10;        // Obtener el estado correcto del player&#10;        val isCurrentlyPlaying = player?.isPlaying == true&#10;&#10;        Log.d(&quot;MusicService&quot;, &quot; Creando notificación - Playing: $isCurrentlyPlaying, Title: $title&quot;)&#10;&#10;        val playIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PLAY&quot; }&#10;        val pauseIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PAUSE&quot; }&#10;        val nextIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_NEXT&quot; }&#10;        val prevIntent = Intent(this, MusicService::class.java).apply { action = &quot;ACTION_PREV&quot; }&#10;&#10;        val playPendingIntent = PendingIntent.getService(this, 0, playIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val pausePendingIntent = PendingIntent.getService(this, 1, pauseIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val nextPendingIntent = PendingIntent.getService(this, 2, nextIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;        val prevPendingIntent = PendingIntent.getService(this, 3, prevIntent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)&#10;&#10;        val builder = NotificationCompat.Builder(this, CHANNEL_ID)&#10;            .setContentTitle(title)&#10;            .setContentText(if (isCurrentlyPlaying) &quot;Reproduciendo...&quot; else &quot;En pausa&quot;)&#10;            .setSmallIcon(if (isCurrentlyPlaying) android.R.drawable.ic_media_pause else android.R.drawable.ic_media_play)&#10;            .setContentIntent(createMainActivityPendingIntent())&#10;            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)&#10;            .setPriority(NotificationCompat.PRIORITY_LOW)&#10;            .setOngoing(true) // Notificación persistente&#10;            .setShowWhen(false)&#10;            .setOnlyAlertOnce(true) // Evita alertas repetidas&#10;&#10;        val compactActions = mutableListOf&lt;Int&gt;()&#10;        var actionIndex = 0&#10;&#10;        // Botón anterior (si hay pista anterior)&#10;        if (plyr.hasPrevious.value == true) {&#10;            builder.addAction(android.R.drawable.ic_media_previous, &quot;Previous&quot;, prevPendingIntent)&#10;            compactActions.add(actionIndex)&#10;            actionIndex++&#10;        }&#10;&#10;        // Botón play/pause (siempre presente)&#10;        val playPauseIcon = if (isCurrentlyPlaying) android.R.drawable.ic_media_pause else android.R.drawable.ic_media_play&#10;        val playPauseText = if (isCurrentlyPlaying) &quot;Pause&quot; else &quot;Play&quot;&#10;        val playPauseIntent = if (isCurrentlyPlaying) pausePendingIntent else playPendingIntent&#10;&#10;        builder.addAction(playPauseIcon, playPauseText, playPauseIntent)&#10;        compactActions.add(actionIndex)&#10;        actionIndex++&#10;&#10;        // Botón siguiente (si hay pista siguiente)&#10;        if (plyr.hasNext.value == true) {&#10;            builder.addAction(android.R.drawable.ic_media_next, &quot;Next&quot;, nextPendingIntent)&#10;            compactActions.add(actionIndex)&#10;        }&#10;&#10;        // MediaStyle simplificado sin MediaSession token&#10;        builder.setStyle(androidx.media.app.NotificationCompat.MediaStyle()&#10;            .setShowActionsInCompactView(*compactActions.toIntArray())&#10;        )&#10;&#10;        return builder.build()&#10;    }&#10;&#10;    private fun createMainActivityPendingIntent(): PendingIntent {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        return PendingIntent.getActivity(&#10;            this, 0, intent,&#10;            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE&#10;        )&#10;    }&#10;    /**&#10;     * Actualiza la notificación existente&#10;     */&#10;    private fun updateNotification() {&#10;        try {&#10;            val notification = createNotification()&#10;            val notificationManager = getSystemService(NotificationManager::class.java)&#10;            notificationManager.notify(NOTIFICATION_ID, notification)&#10;            Log.d(&quot;MusicService&quot;, &quot; Notificación actualizada&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;MusicService&quot;, &quot;❌ Error al actualizar notificación: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    // === BINDING ===&#10;    inner class MusicBinder : Binder() {&#10;        fun getService(): MusicService = this@MusicService&#10;    }&#10;&#10;    private val binder = MusicBinder()&#10;&#10;    override fun onBind(intent: Intent): IBinder {&#10;        return binder&#10;    }&#10;&#10;    // === LIMPIEZA DE RECURSOS ===&#10;    &#10;    /**&#10;     * Detiene el servicio foreground y limpia todos los recursos&#10;     */&#10;    fun stopForegroundService() {&#10;        Log.d(&quot;MusicService&quot;, &quot; Deteniendo servicio foreground&quot;)&#10;        &#10;        // Pausar la reproducción&#10;        val plyr = (application as PlyrApp).playerViewModel&#10;        plyr.pausePlayer()&#10;        &#10;        // Detener el servicio foreground&#10;        stopForeground(STOP_FOREGROUND_REMOVE)&#10;        &#10;        // Limpiar recursos&#10;        cleanupResources()&#10;        &#10;        // Detener el servicio completamente&#10;        stopSelf()&#10;    }&#10;    &#10;    override fun onDestroy() {&#10;        Log.d(&quot;MusicService&quot;, &quot;️ Destruyendo MusicService&quot;)&#10;        if (::wakeLock.isInitialized &amp;&amp; wakeLock.isHeld) {&#10;            wakeLock.release()&#10;        }&#10;        cleanupResources()&#10;        super.onDestroy()&#10;    }&#10;&#10;    private fun cleanupResources() {&#10;        mediaSession?.run {&#10;            release()&#10;            mediaSession = null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/ConfigScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/ConfigScreen.kt" />
              <option name="originalContent" value="package com.plyr.ui&#10;&#10;import android.content.Context&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyAuthEvent&#10;import com.plyr.network.SpotifyRepository&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.graphics.Color&#10;&#10;@Composable&#10;fun ConfigScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    onThemeChanged: (String) -&gt; Unit = {}&#10;) {&#10;    var selectedTheme by remember { mutableStateOf(Config.getTheme(context)) }&#10;    var selectedSearchEngine by remember { mutableStateOf(Config.getSearchEngine(context)) }&#10;&#10;    // Estado para Spotify&#10;    var isSpotifyConnected by remember { mutableStateOf(Config.isSpotifyConnected(context)) }&#10;    var isConnecting by remember { mutableStateOf(false) }&#10;    var connectionMessage by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(selectedTheme) {&#10;        Config.setTheme(context, selectedTheme)&#10;        onThemeChanged(selectedTheme)&#10;    }&#10;&#10;    LaunchedEffect(selectedSearchEngine) {&#10;        Config.setSearchEngine(context, selectedSearchEngine)&#10;    }&#10;&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_config&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Selector de tema&#10;        Text(&#10;            text = &quot;&gt; theme&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                //color = MaterialTheme.colorScheme.secondary&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Dark&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedTheme = &quot;dark&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Text(&#10;                    text = &quot;dark&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedTheme == &quot;dark&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Opción Light&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedTheme = &quot;light&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedTheme == &quot;light&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Selector de motor de búsqueda&#10;        Text(&#10;            text = &quot;&gt; search_engine&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                //color = MaterialTheme.colorScheme.secondary&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Spotify&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedSearchEngine = &quot;spotify&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;spotify&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedSearchEngine == &quot;spotify&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color =MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            // Opción YouTube&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedSearchEngine = &quot;youtube&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;youtube&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedSearchEngine == &quot;youtube&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Información de uso&#10;        Column {&#10;            Text(&#10;                text = &quot;&gt; info&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    //color = MaterialTheme.colorScheme.secondary&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;    ● don't pirate music!\n    ● Change engine with yt: / sp:&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                lineHeight = 18.sp&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Escuchar eventos de autenticación de Spotify&#10;        LaunchedEffect(Unit) {&#10;            SpotifyAuthEvent.setAuthCallback { success, message -&gt;&#10;                isConnecting = false&#10;                isSpotifyConnected = success&#10;                connectionMessage = message ?: if (success) &quot;connected&quot; else &quot;error&quot;&#10;            }&#10;        }&#10;&#10;        // Limpiar callback al salir&#10;        DisposableEffect(Unit) {&#10;            onDispose {&#10;                SpotifyAuthEvent.clearCallback()&#10;            }&#10;        }&#10;&#10;        // Status unificado de plyr y Spotify&#10;        Column {&#10;            Text(&#10;                text = &quot;&gt; sptfy_status&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    //color = MaterialTheme.colorScheme.secondary&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;&#10;            // Estado de Spotify (clickeable)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable {&#10;                        if (isSpotifyConnected) {&#10;                            // Desconectar Spotify&#10;                            Config.clearSpotifyTokens(context)&#10;                            isSpotifyConnected = false&#10;                            connectionMessage = &quot;disconnected&quot;&#10;                        } else {&#10;                            // Verificar que las credenciales estén configuradas&#10;                            if (!Config.hasSpotifyCredentials(context)) {&#10;                                connectionMessage = &quot;credentials_required&quot;&#10;                            } else {&#10;                                // Conectar con Spotify&#10;                                isConnecting = true&#10;                                connectionMessage = &quot;opening_browser...&quot;&#10;                                try {&#10;                                    val success = SpotifyRepository.startOAuthFlow(context)&#10;                                    if (success) {&#10;                                        connectionMessage = &quot;check_browser&quot;&#10;                                    } else {&#10;                                        connectionMessage = &quot;error_starting_oauth&quot;&#10;                                        isConnecting = false&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    connectionMessage = &quot;error: ${e.message}&quot;&#10;                                    isConnecting = false&#10;                                }&#10;                            }&#10;                        }&#10;                        haptic.performHapticFeedback(HapticFeedbackType.LongPress)&#10;                    }&#10;                    .padding(vertical = 4.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;    ● client:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Estado de conexión&#10;                    Text(&#10;                        text = when {&#10;                            connectionMessage == &quot;credentials_required&quot; -&gt; &quot;configure credentials first&quot;&#10;                            connectionMessage.isNotEmpty() -&gt; connectionMessage&#10;                            isSpotifyConnected &amp;&amp; Config.hasSpotifyCredentials(context) -&gt; &quot;connected&quot;&#10;                            Config.hasSpotifyCredentials(context) -&gt; &quot;disconnected&quot;&#10;                            else -&gt; &quot;credentials required&quot;&#10;                        },&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = when {&#10;                                connectionMessage == &quot;credentials_required&quot; -&gt; Color(0xFFE74C3C)&#10;                                !Config.hasSpotifyCredentials(context) -&gt; Color(0xFFE74C3C)&#10;                                isSpotifyConnected -&gt; Color(0xFF1DB954)&#10;                                else -&gt; Color(0xFF95A5A6)&#10;                            }&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Configuración de API de Spotify&#10;        SpotifyApiConfigSection(context = context)&#10;&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun SpotifyApiConfigSection(context: Context) {&#10;    var isExpanded by remember { mutableStateOf(false) }&#10;    var clientId by remember { mutableStateOf(Config.getSpotifyClientId(context) ?: &quot;&quot;) }&#10;    var clientSecret by remember { mutableStateOf(Config.getSpotifyClientSecret(context) ?: &quot;&quot;) }&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    Column {&#10;        // Campo principal de API - similar al formato del cliente&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable {&#10;                    isExpanded = !isExpanded&#10;                    haptic.performHapticFeedback(HapticFeedbackType.LongPress)&#10;                }&#10;                .padding(vertical = 4.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;    ● api:&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                )&#10;            )&#10;&#10;            Text(&#10;                text = if (Config.hasSpotifyCredentials(context)) &quot;configured&quot; else &quot;not_configured&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 12.sp,&#10;                    color = if (Config.hasSpotifyCredentials(context)) Color(0xFF1DB954) else Color(0xFFE74C3C)&#10;                )&#10;            )&#10;        }&#10;&#10;        // Desplegable con campos de configuración&#10;        if (isExpanded) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(start = 16.dp, top = 8.dp)&#10;            ) {&#10;                // Campos de entrada&#10;                Text(&#10;                    text = &quot;      client_id:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;&#10;                OutlinedTextField(&#10;                    value = clientId,&#10;                    onValueChange = {&#10;                        clientId = it&#10;                        Config.setSpotifyClientId(context, it)&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 8.dp),&#10;                    textStyle = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp&#10;                    ),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = Color(0xFF1DB954),&#10;                        unfocusedBorderColor = Color(0xFF95A5A6),&#10;                        focusedTextColor = Color(0xFFECF0F1),&#10;                        unfocusedTextColor = Color(0xFFBDC3C7)&#10;                    ),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;enter your spotify client id&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF7F8C8D)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;      client_secret:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;&#10;                OutlinedTextField(&#10;                    value = clientSecret,&#10;                    onValueChange = {&#10;                        clientSecret = it&#10;                        Config.setSpotifyClientSecret(context, it)&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp),&#10;                    textStyle = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp&#10;                    ),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = Color(0xFF1DB954),&#10;                        unfocusedBorderColor = Color(0xFF95A5A6),&#10;                        focusedTextColor = Color(0xFFECF0F1),&#10;                        unfocusedTextColor = Color(0xFFBDC3C7)&#10;                    ),&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;enter your spotify client secret&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF7F8C8D)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;&#10;                // Explicación detallada&#10;                Column(&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;      &gt; how to get spotify api credentials:&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 11.sp,&#10;                            color = Color(0xFF3498DB)&#10;                        ),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    val instructions = listOf(&#10;                        &quot;1. go to https://developer.spotify.com/dashboard&quot;,&#10;                        &quot;2. log in with your spotify account&quot;,&#10;                        &quot;3. click 'create app'&quot;,&#10;                        &quot;4. fill app name (e.g., 'plyr mobile')&quot;,&#10;                        &quot;5. set redirect uri: 'plyr://spotify/callback'&quot;,&#10;                        &quot;6. select 'mobile' and 'web api'&quot;,&#10;                        &quot;7. click 'save'&quot;,&#10;                        &quot;8. copy client id and client secret&quot;,&#10;                        &quot;9. paste them in the fields above&quot;&#10;                    )&#10;&#10;                    instructions.forEach { instruction -&gt;&#10;                        Text(&#10;                            text = &quot;        $instruction&quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 10.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.padding(bottom = 2.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = &quot;      note: these credentials are stored locally&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF7F8C8D)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.plyr.ui&#10;&#10;import android.content.Context&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.utils.Config&#10;import com.plyr.utils.SpotifyAuthEvent&#10;import com.plyr.network.SpotifyRepository&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.graphics.Color&#10;&#10;@Composable&#10;fun ConfigScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    onThemeChanged: (String) -&gt; Unit = {}&#10;) {&#10;    var selectedTheme by remember { mutableStateOf(Config.getTheme(context)) }&#10;    var selectedSearchEngine by remember { mutableStateOf(Config.getSearchEngine(context)) }&#10;&#10;    // Estado para Spotify&#10;    var isSpotifyConnected by remember { mutableStateOf(Config.isSpotifyConnected(context)) }&#10;    var isConnecting by remember { mutableStateOf(false) }&#10;    var connectionMessage by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(selectedTheme) {&#10;        Config.setTheme(context, selectedTheme)&#10;        onThemeChanged(selectedTheme)&#10;    }&#10;&#10;    LaunchedEffect(selectedSearchEngine) {&#10;        Config.setSearchEngine(context, selectedSearchEngine)&#10;    }&#10;&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_config&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Selector de tema&#10;        Text(&#10;            text = &quot;&gt; theme&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                //color = MaterialTheme.colorScheme.secondary&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Dark&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedTheme = &quot;dark&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;&#10;                Text(&#10;                    text = &quot;dark&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedTheme == &quot;dark&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Opción Light&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedTheme = &quot;light&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;light&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedTheme == &quot;light&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Selector de motor de búsqueda&#10;        Text(&#10;            text = &quot;&gt; search_engine&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                //color = MaterialTheme.colorScheme.secondary&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Spotify&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedSearchEngine = &quot;spotify&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;spotify&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedSearchEngine == &quot;spotify&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color =MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;            // Opción YouTube&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedSearchEngine = &quot;youtube&quot;&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;youtube&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedSearchEngine == &quot;youtube&quot;) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Información de uso&#10;        Column {&#10;            Text(&#10;                text = &quot;&gt; info&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    //color = MaterialTheme.colorScheme.secondary&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;    ● don't pirate music!\n    ● Change engine with yt: / sp:&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                lineHeight = 18.sp&#10;            )&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Escuchar eventos de autenticación de Spotify&#10;        LaunchedEffect(Unit) {&#10;            SpotifyAuthEvent.setAuthCallback { success, message -&gt;&#10;                isConnecting = false&#10;                isSpotifyConnected = success&#10;                connectionMessage = message ?: if (success) &quot;connected&quot; else &quot;error&quot;&#10;            }&#10;        }&#10;&#10;        // Limpiar callback al salir&#10;        DisposableEffect(Unit) {&#10;            onDispose {&#10;                SpotifyAuthEvent.clearCallback()&#10;            }&#10;        }&#10;&#10;        // Status unificado de plyr y Spotify&#10;        Column {&#10;            Text(&#10;                text = &quot;&gt; sptfy_status&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    //color = MaterialTheme.colorScheme.secondary&#10;                ),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;&#10;            // Estado de Spotify (clickeable)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable {&#10;                        if (isSpotifyConnected) {&#10;                            // Desconectar Spotify&#10;                            Config.clearSpotifyTokens(context)&#10;                            isSpotifyConnected = false&#10;                            connectionMessage = &quot;disconnected&quot;&#10;                        } else {&#10;                            // Verificar que las credenciales estén configuradas&#10;                            if (!Config.hasSpotifyCredentials(context)) {&#10;                                connectionMessage = &quot;credentials_required&quot;&#10;                            } else {&#10;                                // Conectar con Spotify&#10;                                isConnecting = true&#10;                                connectionMessage = &quot;opening_browser...&quot;&#10;                                try {&#10;                                    val success = SpotifyRepository.startOAuthFlow(context)&#10;                                    if (success) {&#10;                                        connectionMessage = &quot;check_browser&quot;&#10;                                    } else {&#10;                                        connectionMessage = &quot;error_starting_oauth&quot;&#10;                                        isConnecting = false&#10;                                    }&#10;                                } catch (e: Exception) {&#10;                                    connectionMessage = &quot;error: ${e.message}&quot;&#10;                                    isConnecting = false&#10;                                }&#10;                            }&#10;                        }&#10;                        haptic.performHapticFeedback(HapticFeedbackType.LongPress)&#10;                    }&#10;                    .padding(vertical = 4.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;    ● client:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Estado de conexión&#10;                    Text(&#10;                        text = when {&#10;                            connectionMessage == &quot;credentials_required&quot; -&gt; &quot;configure credentials first&quot;&#10;                            connectionMessage.isNotEmpty() -&gt; connectionMessage&#10;                            isSpotifyConnected &amp;&amp; Config.hasSpotifyCredentials(context) -&gt; &quot;connected&quot;&#10;                            Config.hasSpotifyCredentials(context) -&gt; &quot;disconnected&quot;&#10;                            else -&gt; &quot;credentials required&quot;&#10;                        },&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = when {&#10;                                connectionMessage == &quot;credentials_required&quot; -&gt; Color(0xFFE74C3C)&#10;                                !Config.hasSpotifyCredentials(context) -&gt; Color(0xFFE74C3C)&#10;                                isSpotifyConnected -&gt; Color(0xFF1DB954)&#10;                                else -&gt; Color(0xFF95A5A6)&#10;                            }&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Configuración de API de Spotify&#10;        SpotifyApiConfigSection(context = context)&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;&#10;        // Selector de calidad de audio&#10;        Text(&#10;            text = &quot;&gt; audio_quality&quot;,&#10;            style = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        // Estado para la calidad de audio&#10;        var selectedAudioQuality by remember { mutableStateOf(Config.getAudioQuality(context)) }&#10;&#10;        // Aplicar cambios cuando cambie la selección&#10;        LaunchedEffect(selectedAudioQuality) {&#10;            Config.setAudioQuality(context, selectedAudioQuality)&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.Center,&#10;        ) {&#10;            // Opción Worst&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedAudioQuality = Config.AUDIO_QUALITY_WORST&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;low&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedAudioQuality == Config.AUDIO_QUALITY_WORST) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Opción Medium&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedAudioQuality = Config.AUDIO_QUALITY_MEDIUM&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;med&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedAudioQuality == Config.AUDIO_QUALITY_MEDIUM) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.padding(8.dp)&#10;            ){&#10;                Text(&#10;                    text = &quot;/&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;&#10;            // Opción Best&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier&#10;                    .clickable {&#10;                        selectedAudioQuality = Config.AUDIO_QUALITY_BEST&#10;                        haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                    }&#10;                    .padding(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;high&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 14.sp,&#10;                        color = if (selectedAudioQuality == Config.AUDIO_QUALITY_BEST) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Información sobre la calidad seleccionada&#10;        Text(&#10;            text = &quot;    ● ${getAudioQualityInfo(selectedAudioQuality)}&quot;,&#10;            style = MaterialTheme.typography.bodySmall.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 12.sp,&#10;                color = Color(0xFF95A5A6)&#10;            ),&#10;            modifier = Modifier.padding(top = 4.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(30.dp))&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun SpotifyApiConfigSection(context: Context) {&#10;    var isExpanded by remember { mutableStateOf(false) }&#10;    var clientId by remember { mutableStateOf(Config.getSpotifyClientId(context) ?: &quot;&quot;) }&#10;    var clientSecret by remember { mutableStateOf(Config.getSpotifyClientSecret(context) ?: &quot;&quot;) }&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    Column {&#10;        // Campo principal de API - similar al formato del cliente&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable {&#10;                    isExpanded = !isExpanded&#10;                    haptic.performHapticFeedback(HapticFeedbackType.LongPress)&#10;                }&#10;                .padding(vertical = 4.dp),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;    ● api:&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 14.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                )&#10;            )&#10;&#10;            Text(&#10;                text = if (Config.hasSpotifyCredentials(context)) &quot;configured&quot; else &quot;not_configured&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 12.sp,&#10;                    color = if (Config.hasSpotifyCredentials(context)) Color(0xFF1DB954) else Color(0xFFE74C3C)&#10;                )&#10;            )&#10;        }&#10;&#10;        // Desplegable con campos de configuración&#10;        if (isExpanded) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(start = 16.dp, top = 8.dp)&#10;            ) {&#10;                // Campos de entrada&#10;                Text(&#10;                    text = &quot;      client_id:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;&#10;                OutlinedTextField(&#10;                    value = clientId,&#10;                    onValueChange = {&#10;                        clientId = it&#10;                        Config.setSpotifyClientId(context, it)&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 8.dp),&#10;                    textStyle = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp&#10;                    ),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = Color(0xFF1DB954),&#10;                        unfocusedBorderColor = Color(0xFF95A5A6),&#10;                        focusedTextColor = Color(0xFFECF0F1),&#10;                        unfocusedTextColor = Color(0xFFBDC3C7)&#10;                    ),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;enter your spotify client id&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF7F8C8D)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;      client_secret:&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(bottom = 4.dp)&#10;                )&#10;&#10;                OutlinedTextField(&#10;                    value = clientSecret,&#10;                    onValueChange = {&#10;                        clientSecret = it&#10;                        Config.setSpotifyClientSecret(context, it)&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp),&#10;                    textStyle = TextStyle(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 11.sp&#10;                    ),&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = Color(0xFF1DB954),&#10;                        unfocusedBorderColor = Color(0xFF95A5A6),&#10;                        focusedTextColor = Color(0xFFECF0F1),&#10;                        unfocusedTextColor = Color(0xFFBDC3C7)&#10;                    ),&#10;                    visualTransformation = PasswordVisualTransformation(),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;enter your spotify client secret&quot;,&#10;                            style = TextStyle(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 11.sp,&#10;                                color = Color(0xFF7F8C8D)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;&#10;                // Explicación detallada&#10;                Column(&#10;                    modifier = Modifier.padding(bottom = 16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;      &gt; how to get spotify api credentials:&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 11.sp,&#10;                            color = Color(0xFF3498DB)&#10;                        ),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    val instructions = listOf(&#10;                        &quot;1. go to https://developer.spotify.com/dashboard&quot;,&#10;                        &quot;2. log in with your spotify account&quot;,&#10;                        &quot;3. click 'create app'&quot;,&#10;                        &quot;4. fill app name (e.g., 'plyr mobile')&quot;,&#10;                        &quot;5. set redirect uri: 'plyr://spotify/callback'&quot;,&#10;                        &quot;6. select 'mobile' and 'web api'&quot;,&#10;                        &quot;7. click 'save'&quot;,&#10;                        &quot;8. copy client id and client secret&quot;,&#10;                        &quot;9. paste them in the fields above&quot;&#10;                    )&#10;&#10;                    instructions.forEach { instruction -&gt;&#10;                        Text(&#10;                            text = &quot;        $instruction&quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 10.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.padding(bottom = 2.dp)&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = &quot;      note: these credentials are stored locally&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF7F8C8D)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;/**&#10; * Función helper para obtener información descriptiva sobre cada calidad de audio&#10; */&#10;private fun getAudioQualityInfo(quality: String): String {&#10;    return when (quality) {&#10;        Config.AUDIO_QUALITY_WORST -&gt; &quot;64kbps • ~0.5MB/min • saves data&quot;&#10;        Config.AUDIO_QUALITY_MEDIUM -&gt; &quot;128kbps • ~1MB/min • balanced (default)&quot;&#10;        Config.AUDIO_QUALITY_BEST -&gt; &quot;192kbps+ • ~1.5MB/min • best quality&quot;&#10;        else -&gt; &quot;unknown quality&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/SearchScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/SearchScreen.kt" />
              <option name="originalContent" value="package com.plyr.ui&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.*&#10;import com.plyr.utils.Config&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.service.YouTubeSearchManager&#10;import com.plyr.ui.components.search.SpotifyArtistDetailView&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;&#10;@Composable&#10;fun SearchScreen(&#10;    context: Context,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var results by remember { mutableStateOf&lt;List&lt;AudioItem&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Estados para resultados de Spotify&#10;    var spotifyResults by remember { mutableStateOf&lt;SpotifySearchAllResponse?&gt;(null) }&#10;    var showSpotifyResults by remember { mutableStateOf(false) }&#10;&#10;    // Estados para paginación&#10;    var currentOffset by remember { mutableStateOf(0) }&#10;    var isLoadingMore by remember { mutableStateOf(false) }&#10;    var hasMoreResults by remember { mutableStateOf(true) }&#10;    val itemsPerPage = 10&#10;&#10;    // Estados para vista detallada de playlist/álbum/artista&#10;    var selectedSpotifyPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedSpotifyAlbum by remember { mutableStateOf&lt;SpotifyAlbum?&gt;(null) }&#10;    var selectedSpotifyArtist by remember { mutableStateOf&lt;SpotifyArtistFull?&gt;(null) } // Nuevo estado para artista&#10;    var selectedItemTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var selectedArtistAlbums by remember { mutableStateOf&lt;List&lt;SpotifyAlbum&gt;&gt;(emptyList()) } // Nuevo estado para álbumes del artista&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    var isLoadingArtistAlbums by remember { mutableStateOf(false) } // Nuevo estado de carga para álbumes&#10;&#10;    // YouTube search manager para búsquedas locales&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Search function with pagination support&#10;    val performSearch: (String, Boolean) -&gt; Unit = { searchQuery, isLoadMore -&gt;&#10;        if (searchQuery.isNotBlank() &amp;&amp; (!isLoading || isLoadMore)) {&#10;            if (isLoadMore) {&#10;                isLoadingMore = true&#10;            } else {&#10;                isLoading = true&#10;                currentOffset = 0&#10;                results = emptyList()&#10;                spotifyResults = null&#10;                showSpotifyResults = false&#10;                hasMoreResults = true&#10;            }&#10;            error = null&#10;&#10;            coroutineScope.launch {&#10;                try {&#10;                    val searchEngine = Config.getSearchEngine(context)&#10;&#10;                    // Permitir override temporal con prefijos&#10;                    val (finalSearchEngine, finalQuery) = when {&#10;                        searchQuery.startsWith(&quot;yt:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;youtube&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        searchQuery.startsWith(&quot;sp:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;spotify&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        else -&gt; searchEngine to searchQuery&#10;                    }&#10;&#10;                    if (finalQuery.isEmpty()) {&#10;                        isLoading = false&#10;                        isLoadingMore = false&#10;                        error = &quot;Query vacía después de procesar prefijo&quot;&#10;                        return@launch&#10;                    }&#10;&#10;                    when (finalSearchEngine) {&#10;                        &quot;youtube&quot; -&gt; {&#10;                            // Search YouTube with detailed information&#10;                            val youtubeResults = youtubeSearchManager.searchYouTubeVideosDetailed(finalQuery)&#10;                            // Convert YouTube video info to AudioItem objects&#10;                            val newResults = youtubeResults.map { videoInfo -&gt;&#10;                                AudioItem(&#10;                                    title = videoInfo.title,&#10;                                    url = &quot;&quot;, // Use empty string for url, required by AudioItem&#10;                                    videoId = videoInfo.videoId,&#10;                                    channel = videoInfo.uploader,&#10;                                    duration = videoInfo.getFormattedDuration()&#10;                                )&#10;                            }&#10;&#10;                            if (isLoadMore) {&#10;                                results = results + newResults&#10;                            } else {&#10;                                results = newResults&#10;                            }&#10;&#10;                            hasMoreResults = newResults.size &gt;= itemsPerPage&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                        }&#10;&#10;                        &quot;spotify&quot; -&gt; {&#10;                            // Search Spotify with pagination&#10;                            if (Config.isSpotifyConnected(context)) {&#10;                                val accessToken = Config.getSpotifyAccessToken(context)&#10;                                if (accessToken != null) {&#10;                                    Log.d(&quot;SearchScreen&quot;, &quot; Iniciando búsqueda en Spotify: '$finalQuery'&quot;)&#10;                                    SpotifyRepository.searchAllWithPagination(accessToken, finalQuery) { searchResults: SpotifySearchAllResponse?, searchError: String? -&gt;&#10;                                        // Asegurar que las actualizaciones se ejecuten en el hilo principal&#10;                                        android.os.Handler(android.os.Looper.getMainLooper()).post {&#10;                                            if (searchError != null) {&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                error = &quot;Error searching Spotify: $searchError&quot;&#10;                                                Log.e(&quot;SearchScreen&quot;, &quot;Error searching Spotify: $searchError&quot;)&#10;                                            } else if (searchResults != null) {&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Resultados actualizados: ${searchResults.tracks.items.size} tracks, ${searchResults.albums.items.size} albums, ${searchResults.artists.items.size} artists, ${searchResults.playlists.items.size} playlists&quot;)&#10;&#10;                                                if (isLoadMore &amp;&amp; spotifyResults != null) {&#10;                                                    // Combinar resultados existentes con nuevos&#10;                                                    val combinedResults = SpotifySearchAllResponse(&#10;                                                        tracks = SpotifyTracksSearchResult(&#10;                                                            items = spotifyResults!!.tracks.items + searchResults.tracks.items,&#10;                                                            total = searchResults.tracks.total,&#10;                                                            limit = searchResults.tracks.limit,&#10;                                                            offset = searchResults.tracks.offset,&#10;                                                            next = searchResults.tracks.next&#10;                                                        ),&#10;                                                        albums = SpotifyAlbumsSearchResult(&#10;                                                            items = spotifyResults!!.albums.items + searchResults.albums.items,&#10;                                                            total = searchResults.albums.total,&#10;                                                            limit = searchResults.albums.limit,&#10;                                                            offset = searchResults.albums.offset,&#10;                                                            next = searchResults.albums.next&#10;                                                        ),&#10;                                                        artists = SpotifyArtistsSearchResult(&#10;                                                            items = spotifyResults!!.artists.items + searchResults.artists.items,&#10;                                                            total = searchResults.artists.total,&#10;                                                            limit = searchResults.artists.limit,&#10;                                                            offset = searchResults.artists.offset,&#10;                                                            next = searchResults.artists.next&#10;                                                        ),&#10;                                                        playlists = SpotifyPlaylistsSearchResult(&#10;                                                            items = spotifyResults!!.playlists.items + searchResults.playlists.items,&#10;                                                            total = searchResults.playlists.total,&#10;                                                            limit = searchResults.playlists.limit,&#10;                                                            offset = searchResults.playlists.offset,&#10;                                                            next = searchResults.playlists.next&#10;                                                        )&#10;                                                    )&#10;                                                    spotifyResults = combinedResults&#10;                                                } else {&#10;                                                    spotifyResults = searchResults&#10;                                                }&#10;&#10;                                                // Para esta implementación, como searchAllWithPagination ya obtiene todos los resultados,&#10;                                                // no hay paginación manual adicional necesaria&#10;                                                hasMoreResults = false&#10;&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                showSpotifyResults = true&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot; Estado actualizado - showSpotifyResults=$showSpotifyResults&quot;)&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                } else {&#10;                                    isLoading = false&#10;                                    isLoadingMore = false&#10;                                    error = &quot;Token de Spotify no disponible&quot;&#10;                                }&#10;                            } else {&#10;                                isLoading = false&#10;                                isLoadingMore = false&#10;                                error = &quot;Spotify no está conectado&quot;&#10;                            }&#10;                        }&#10;&#10;                        else -&gt; {&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                            error = &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;&#10;                            Log.w(&quot;SearchScreen&quot;, &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;)&#10;                        }&#10;                    }&#10;&#10;                } catch (e: Exception) {&#10;                    isLoading = false&#10;                    isLoadingMore = false&#10;                    error = &quot;Error en búsqueda: ${e.message}&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;Error en búsqueda&quot;, e)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Funciones auxiliares para operaciones de Spotify&#10;    val saveSpotifyPlaylistToLibrary: () -&gt; Unit = {&#10;        coroutineScope.launch {&#10;            try {&#10;                selectedSpotifyPlaylist?.let { playlist -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando playlist en biblioteca de Spotify: ${playlist.name}&quot;)&#10;                        SpotifyRepository.followPlaylist(accessToken, playlist.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Playlist seguida exitosamente: ${playlist.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error siguiendo playlist: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;                selectedSpotifyAlbum?.let { album -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando álbum en biblioteca de Spotify: ${album.name}&quot;)&#10;                        SpotifyRepository.saveAlbum(accessToken, album.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Álbum guardado exitosamente: ${album.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error guardando álbum: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error guardando en biblioteca de Spotify&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    val loadSpotifyPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedSpotifyPlaylist = playlist&#10;        selectedSpotifyAlbum = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks de la playlist: ${playlist.name}&quot;)&#10;                    SpotifyRepository.getPlaylistTracks(accessToken, playlist.id) { playlistTracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (playlistTracks != null) {&#10;                            // Convertir SpotifyPlaylistTrack a SpotifyTrack&#10;                            val tracks = playlistTracks.mapNotNull { it.track }&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para la playlist: ${playlist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks de la playlist: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de playlist: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks de la playlist: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando playlist tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    val loadSpotifyAlbumTracks: (SpotifyAlbum) -&gt; Unit = { album -&gt;&#10;        selectedSpotifyAlbum = album&#10;        selectedSpotifyPlaylist = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks del álbum: ${album.name}&quot;)&#10;                    SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (tracks != null) {&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para el álbum: ${album.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks del álbum: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de álbum: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks del álbum: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando album tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Nueva función para cargar álbumes de un artista&#10;    val loadArtistAlbums: (SpotifyArtistFull) -&gt; Unit = { artist -&gt;&#10;        selectedSpotifyArtist = artist&#10;        isLoadingArtistAlbums = true&#10;        error = null&#10;        selectedArtistAlbums = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando álbumes del artista: ${artist.name}&quot;)&#10;                    SpotifyRepository.getArtistAlbums(accessToken, artist.id) { albums, errorMsg -&gt;&#10;                        isLoadingArtistAlbums = false&#10;                        if (albums != null) {&#10;                            selectedArtistAlbums = albums&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${albums.size} álbumes cargados para el artista: ${artist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando álbumes del artista: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando álbumes de artista: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingArtistAlbums = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingArtistAlbums = false&#10;                error = &quot;Error cargando álbumes del artista: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando artist albums&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        when {&#10;            selectedSpotifyPlaylist != null || selectedSpotifyAlbum != null || selectedSpotifyArtist != null -&gt; {&#10;                // Volver de la vista detallada a los resultados de búsqueda&#10;                selectedSpotifyPlaylist = null&#10;                selectedSpotifyAlbum = null&#10;                selectedSpotifyArtist = null&#10;                selectedItemTracks = emptyList()&#10;                selectedArtistAlbums = emptyList()&#10;            }&#10;            else -&gt; onBack()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Mostrar vista detallada o búsqueda normal&#10;        when {&#10;            selectedSpotifyPlaylist != null -&gt; {&#10;                SpotifyPlaylistDetailView(&#10;                    playlist = selectedSpotifyPlaylist!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyPlaylist = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir playlist desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir playlist en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist aleatoria&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyAlbum != null -&gt; {&#10;                SpotifyAlbumDetailView(&#10;                    album = selectedSpotifyAlbum!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyAlbum = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir álbum desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir álbum en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum aleatorio&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyArtist != null -&gt; {&#10;                // Nueva vista detallada para el artista&#10;                SpotifyArtistDetailView(&#10;                    artist = selectedSpotifyArtist!!,&#10;                    albums = selectedArtistAlbums,&#10;                    isLoading = isLoadingArtistAlbums,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyArtist = null&#10;                        selectedArtistAlbums = emptyList()&#10;                    },&#10;                    onAlbumClick = { album -&gt;&#10;                        // Navegar al álbum seleccionado&#10;                        loadSpotifyAlbumTracks(album)&#10;                    },&#10;                    onShuffleAll = {&#10;                        // Reproducir todos los álbumes del artista en orden aleatorio&#10;                        if (selectedArtistAlbums.isNotEmpty()) {&#10;                            val firstAlbum = selectedArtistAlbums.first()&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del primer álbum del artista: ${firstAlbum.name}&quot;)&#10;&#10;                            // Cargar los tracks del primer álbum&#10;                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                            if (accessToken != null) {&#10;                                SpotifyRepository.getAlbumTracks(accessToken, firstAlbum.id) { tracks, errorMsg -&gt;&#10;                                    if (tracks != null) {&#10;                                        // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                                        val shuffledTracks = tracks.shuffled()&#10;                                        val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                            TrackEntity(&#10;                                                id = &quot;spotify_${firstAlbum.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                                playlistId = firstAlbum.id,&#10;                                                spotifyTrackId = spotifyTrack.id,&#10;                                                name = spotifyTrack.name,&#10;                                                artists = spotifyTrack.getArtistNames(),&#10;                                                youtubeVideoId = null, // Se buscará dinámicamente&#10;                                                audioUrl = null,&#10;                                                position = index,&#10;                                                lastSyncTime = System.currentTimeMillis()&#10;                                            )&#10;                                        }&#10;&#10;                                        // Establecer playlist mezclada y comenzar reproducción&#10;                                        playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                                        // Buscar y reproducir el primer track de la lista mezclada&#10;                                        trackEntities.firstOrNull()?.let { track -&gt;&#10;                                            coroutineScope.launch {&#10;                                                try {&#10;                                                    playerViewModel?.loadAudioFromTrack(track)&#10;                                                } catch (e: Exception) {&#10;                                                    Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum del artista aleatorio&quot;, e)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    } else {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks para shuffle: $errorMsg&quot;)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            else -&gt; {&#10;                // Vista normal de búsqueda&#10;                SearchMainView(&#10;                    searchQuery = searchQuery,&#10;                    onSearchQueryChange = { searchQuery = it },&#10;                    results = results,&#10;                    spotifyResults = spotifyResults,&#10;                    showSpotifyResults = showSpotifyResults,&#10;                    isLoading = isLoading,&#10;                    error = error,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                    onAlbumSelected = loadSpotifyAlbumTracks,&#10;                    onPlaylistSelected = loadSpotifyPlaylistTracks,&#10;                    onArtistSelected = loadArtistAlbums, // Agregar callback para artistas&#10;                    onSearchTriggered = performSearch,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;@Composable&#10;private fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Nuevo callback para artistas&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search field with clear button and enter action&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            label = {&#10;                Text(&#10;                    &quot;&gt; search_audio&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                if (searchQuery.isNotEmpty()) {&#10;                    IconButton(onClick = {&#10;                        onSearchQueryChange(&quot;&quot;)&#10;                    }) {&#10;                        Text(&#10;                            text = &quot;x&quot;,&#10;                            style = MaterialTheme.typography.titleLarge.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 18.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    if (searchQuery.isNotBlank() &amp;&amp; !isLoading) {&#10;                        onSearchTriggered(searchQuery, false)&#10;                    }&#10;                }&#10;            ),&#10;            enabled = !isLoading,&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;                focusedLabelColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedLabelColor = MaterialTheme.colorScheme.secondary,&#10;                focusedTextColor = MaterialTheme.colorScheme.onSurface,&#10;                unfocusedTextColor = MaterialTheme.colorScheme.onSurface&#10;            ),&#10;            textStyle = MaterialTheme.typography.bodyLarge.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp&#10;            )&#10;        )&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                )&#10;            )&#10;        }&#10;&#10;        // === MENÚS DESPLEGABLES DE SPOTIFY ===&#10;        android.util.Log.d(&#10;            &quot;SearchMainView&quot;,&#10;            &quot;Renderizando vista principal - showSpotifyResults=$showSpotifyResults, spotifyResults!=null=${spotifyResults != null}&quot;&#10;        )&#10;        if (showSpotifyResults &amp;&amp; spotifyResults != null) {&#10;            CollapsibleSpotifySearchResultsView(&#10;                results = spotifyResults,&#10;                onAlbumSelected = onAlbumSelected,&#10;                onPlaylistSelected = onPlaylistSelected,&#10;                onTrackSelectedFromSearch = { track, allTracks, selectedIndex -&gt;&#10;                    // Convertir tracks de Spotify a TrackEntity y crear playlist temporal&#10;                    val trackEntities = allTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                        TrackEntity(&#10;                            id = &quot;spotify_search_${spotifyTrack.id}_$index&quot;,&#10;                            playlistId = &quot;spotify_search_${System.currentTimeMillis()}&quot;,&#10;                            spotifyTrackId = spotifyTrack.id,&#10;                            name = spotifyTrack.name,&#10;                            artists = spotifyTrack.getArtistNames(),&#10;                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                            audioUrl = null,&#10;                            position = index,&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Establecer playlist en el PlayerViewModel&#10;                    playerViewModel?.setCurrentPlaylist(trackEntities, selectedIndex)&#10;&#10;                    // Cargar el track seleccionado&#10;                    val selectedTrackEntity = trackEntities[selectedIndex]&#10;                    coroutineScope.launch {&#10;                        try {&#10;                            playerViewModel?.loadAudioFromTrack(selectedTrackEntity)&#10;                            Log.d(&#10;                                &quot;SpotifySearch&quot;,&#10;                                &quot; Track Spotify como playlist: ${track.name} (${selectedIndex + 1}/${allTracks.size})&quot;&#10;                            )&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;SpotifySearch&quot;, &quot;Error al reproducir track de Spotify&quot;, e)&#10;                        }&#10;                    }&#10;                },&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;&#10;        // === RESULTADOS DE YOUTUBE ===&#10;        if (results.isNotEmpty()) {&#10;            CollapsibleYouTubeSearchResultsView(&#10;                results = results,&#10;                onVideoSelected = onVideoSelected,&#10;                onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun CollapsibleSpotifySearchResultsView(&#10;    results: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onTrackSelectedFromSearch: (SpotifyTrack, List&lt;SpotifyTrack&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var tracksExpanded by remember { mutableStateOf(true) }&#10;    var albumsExpanded by remember { mutableStateOf(true) }&#10;    var playlistsExpanded by remember { mutableStateOf(true) }&#10;    var artistsExpanded by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (results.tracks.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ tracks [${results.tracks.items.size}] ${if (tracksExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { tracksExpanded = !tracksExpanded }&#10;                    .padding(bottom = 8.dp)&#10;            )&#10;&#10;            if (tracksExpanded) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    results.tracks.items.take(5).forEachIndexed { index, track -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    onTrackSelectedFromSearch(track, results.tracks.items, index)&#10;                                }&#10;                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;&#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                Text(&#10;                                    text = track.name ?: &quot;Unknown Track&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFFE0E0E0)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                                Text(&#10;                                    text = track.getArtistNames(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                            }&#10;&#10;                            Text(&#10;                                text = track.getDurationText(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (results.albums.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ albums [${results.albums.items.size}] ${if (albumsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { albumsExpanded = !albumsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (albumsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.albums.items.size) { index -&gt;&#10;                        val album = results.albums.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onAlbumSelected(album) },&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = album.getImageUrl(),&#10;                                contentDescription = &quot;Album cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = album.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;&#10;                            Text(&#10;                                text = album.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (results.playlists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ playlists [${results.playlists.items.size}] ${if (playlistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { playlistsExpanded = !playlistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (playlistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.playlists.items.size) { index -&gt;&#10;                        val playlist = results.playlists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onPlaylistSelected(playlist) },&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = playlist.getImageUrl(),&#10;                                contentDescription = &quot;Playlist cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = playlist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;&#10;                            Text(&#10;                                text = &quot;${playlist.getTrackCount()} tracks&quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Artists section&#10;        if (results.artists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ artists [${results.artists.items.size}] ${if (artistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { artistsExpanded = !artistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (artistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.artists.items.size) { index -&gt;&#10;                        val artist = results.artists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(100.dp)&#10;                                .clickable { onArtistSelected(artist) }, // Conectar con el callback&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = artist.getImageUrl(),&#10;                                contentDescription = &quot;Artist image&quot;,&#10;                                modifier = Modifier&#10;                                    .size(100.dp)&#10;                                    .clip(RoundedCornerShape(50.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = artist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun CollapsibleYouTubeSearchResultsView(&#10;    results: List&lt;AudioItem&gt;,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var expanded by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;$ youtube_results [${results.size}] ${if (expanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable { expanded = !expanded }&#10;                .padding(bottom = 8.dp, top = 16.dp)&#10;        )&#10;&#10;        if (expanded) {&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                results.take(5).forEachIndexed { index, item -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                onVideoSelectedFromSearch(item.videoId, item.title, results, index)&#10;                            }&#10;                            .padding(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = item.title,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&#10;                                    text = item.channel ?: &quot;Unknown Channel&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.weight(1f),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;&#10;                                item.duration?.let { duration -&gt;&#10;                                    Text(&#10;                                        text = duration,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.*&#10;import com.plyr.utils.Config&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import com.plyr.service.YouTubeSearchManager&#10;import com.plyr.ui.components.search.SpotifyArtistDetailView&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;&#10;@Composable&#10;fun SearchScreen(&#10;    context: Context,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var results by remember { mutableStateOf&lt;List&lt;AudioItem&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    var error by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    // Estados para resultados de Spotify&#10;    var spotifyResults by remember { mutableStateOf&lt;SpotifySearchAllResponse?&gt;(null) }&#10;    var showSpotifyResults by remember { mutableStateOf(false) }&#10;&#10;    // Estados para paginación&#10;    var currentOffset by remember { mutableStateOf(0) }&#10;    var isLoadingMore by remember { mutableStateOf(false) }&#10;    var hasMoreResults by remember { mutableStateOf(true) }&#10;    val itemsPerPage = 10&#10;&#10;    // Estados para vista detallada de playlist/álbum/artista&#10;    var selectedSpotifyPlaylist by remember { mutableStateOf&lt;SpotifyPlaylist?&gt;(null) }&#10;    var selectedSpotifyAlbum by remember { mutableStateOf&lt;SpotifyAlbum?&gt;(null) }&#10;    var selectedSpotifyArtist by remember { mutableStateOf&lt;SpotifyArtistFull?&gt;(null) } // Nuevo estado para artista&#10;    var selectedItemTracks by remember { mutableStateOf&lt;List&lt;SpotifyTrack&gt;&gt;(emptyList()) }&#10;    var selectedArtistAlbums by remember { mutableStateOf&lt;List&lt;SpotifyAlbum&gt;&gt;(emptyList()) } // Nuevo estado para álbumes del artista&#10;    var isLoadingTracks by remember { mutableStateOf(false) }&#10;    var isLoadingArtistAlbums by remember { mutableStateOf(false) } // Nuevo estado de carga para álbumes&#10;&#10;    // YouTube search manager para búsquedas locales&#10;    val youtubeSearchManager = remember { YouTubeSearchManager(context) }&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    val haptic = LocalHapticFeedback.current&#10;&#10;    // Search function with pagination support&#10;    val performSearch: (String, Boolean) -&gt; Unit = { searchQuery, isLoadMore -&gt;&#10;        if (searchQuery.isNotBlank() &amp;&amp; (!isLoading || isLoadMore)) {&#10;            if (isLoadMore) {&#10;                isLoadingMore = true&#10;            } else {&#10;                isLoading = true&#10;                currentOffset = 0&#10;                results = emptyList()&#10;                spotifyResults = null&#10;                showSpotifyResults = false&#10;                hasMoreResults = true&#10;            }&#10;            error = null&#10;&#10;            coroutineScope.launch {&#10;                try {&#10;                    val searchEngine = Config.getSearchEngine(context)&#10;&#10;                    // Permitir override temporal con prefijos&#10;                    val (finalSearchEngine, finalQuery) = when {&#10;                        searchQuery.startsWith(&quot;yt:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;youtube&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        searchQuery.startsWith(&quot;sp:&quot;, ignoreCase = true) -&gt; {&#10;                            &quot;spotify&quot; to searchQuery.substring(3).trim()&#10;                        }&#10;                        else -&gt; searchEngine to searchQuery&#10;                    }&#10;&#10;                    if (finalQuery.isEmpty()) {&#10;                        isLoading = false&#10;                        isLoadingMore = false&#10;                        error = &quot;Query vacía después de procesar prefijo&quot;&#10;                        return@launch&#10;                    }&#10;&#10;                    when (finalSearchEngine) {&#10;                        &quot;youtube&quot; -&gt; {&#10;                            // Search YouTube with detailed information&#10;                            val youtubeResults = youtubeSearchManager.searchYouTubeVideosDetailed(finalQuery)&#10;                            // Convert YouTube video info to AudioItem objects&#10;                            val newResults = youtubeResults.map { videoInfo -&gt;&#10;                                AudioItem(&#10;                                    title = videoInfo.title,&#10;                                    url = &quot;&quot;, // Use empty string for url, required by AudioItem&#10;                                    videoId = videoInfo.videoId,&#10;                                    channel = videoInfo.uploader,&#10;                                    duration = videoInfo.getFormattedDuration()&#10;                                )&#10;                            }&#10;&#10;                            if (isLoadMore) {&#10;                                results = results + newResults&#10;                            } else {&#10;                                results = newResults&#10;                            }&#10;&#10;                            hasMoreResults = newResults.size &gt;= itemsPerPage&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                        }&#10;&#10;                        &quot;spotify&quot; -&gt; {&#10;                            // Search Spotify with pagination&#10;                            if (Config.isSpotifyConnected(context)) {&#10;                                val accessToken = Config.getSpotifyAccessToken(context)&#10;                                if (accessToken != null) {&#10;                                    Log.d(&quot;SearchScreen&quot;, &quot; Iniciando búsqueda en Spotify: '$finalQuery'&quot;)&#10;                                    SpotifyRepository.searchAllWithPagination(accessToken, finalQuery) { searchResults: SpotifySearchAllResponse?, searchError: String? -&gt;&#10;                                        // Asegurar que las actualizaciones se ejecuten en el hilo principal&#10;                                        android.os.Handler(android.os.Looper.getMainLooper()).post {&#10;                                            if (searchError != null) {&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                error = &quot;Error searching Spotify: $searchError&quot;&#10;                                                Log.e(&quot;SearchScreen&quot;, &quot;Error searching Spotify: $searchError&quot;)&#10;                                            } else if (searchResults != null) {&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Resultados actualizados: ${searchResults.tracks.items.size} tracks, ${searchResults.albums.items.size} albums, ${searchResults.artists.items.size} artists, ${searchResults.playlists.items.size} playlists&quot;)&#10;&#10;                                                if (isLoadMore &amp;&amp; spotifyResults != null) {&#10;                                                    // Combinar resultados existentes con nuevos&#10;                                                    val combinedResults = SpotifySearchAllResponse(&#10;                                                        tracks = SpotifyTracksSearchResult(&#10;                                                            items = spotifyResults!!.tracks.items + searchResults.tracks.items,&#10;                                                            total = searchResults.tracks.total,&#10;                                                            limit = searchResults.tracks.limit,&#10;                                                            offset = searchResults.tracks.offset,&#10;                                                            next = searchResults.tracks.next&#10;                                                        ),&#10;                                                        albums = SpotifyAlbumsSearchResult(&#10;                                                            items = spotifyResults!!.albums.items + searchResults.albums.items,&#10;                                                            total = searchResults.albums.total,&#10;                                                            limit = searchResults.albums.limit,&#10;                                                            offset = searchResults.albums.offset,&#10;                                                            next = searchResults.albums.next&#10;                                                        ),&#10;                                                        artists = SpotifyArtistsSearchResult(&#10;                                                            items = spotifyResults!!.artists.items + searchResults.artists.items,&#10;                                                            total = searchResults.artists.total,&#10;                                                            limit = searchResults.artists.limit,&#10;                                                            offset = searchResults.artists.offset,&#10;                                                            next = searchResults.artists.next&#10;                                                        ),&#10;                                                        playlists = SpotifyPlaylistsSearchResult(&#10;                                                            items = spotifyResults!!.playlists.items + searchResults.playlists.items,&#10;                                                            total = searchResults.playlists.total,&#10;                                                            limit = searchResults.playlists.limit,&#10;                                                            offset = searchResults.playlists.offset,&#10;                                                            next = searchResults.playlists.next&#10;                                                        )&#10;                                                    )&#10;                                                    spotifyResults = combinedResults&#10;                                                } else {&#10;                                                    spotifyResults = searchResults&#10;                                                }&#10;&#10;                                                // Para esta implementación, como searchAllWithPagination ya obtiene todos los resultados,&#10;                                                // no hay paginación manual adicional necesaria&#10;                                                hasMoreResults = false&#10;&#10;                                                isLoading = false&#10;                                                isLoadingMore = false&#10;                                                showSpotifyResults = true&#10;                                                Log.d(&quot;SearchScreen&quot;, &quot; Estado actualizado - showSpotifyResults=$showSpotifyResults&quot;)&#10;                                            }&#10;                                        }&#10;                                    }&#10;                                } else {&#10;                                    isLoading = false&#10;                                    isLoadingMore = false&#10;                                    error = &quot;Token de Spotify no disponible&quot;&#10;                                }&#10;                            } else {&#10;                                isLoading = false&#10;                                isLoadingMore = false&#10;                                error = &quot;Spotify no está conectado&quot;&#10;                            }&#10;                        }&#10;&#10;                        else -&gt; {&#10;                            isLoading = false&#10;                            isLoadingMore = false&#10;                            error = &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;&#10;                            Log.w(&quot;SearchScreen&quot;, &quot;Motor de búsqueda no reconocido: $finalSearchEngine&quot;)&#10;                        }&#10;                    }&#10;&#10;                } catch (e: Exception) {&#10;                    isLoading = false&#10;                    isLoadingMore = false&#10;                    error = &quot;Error en búsqueda: ${e.message}&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;Error en búsqueda&quot;, e)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Funciones auxiliares para operaciones de Spotify&#10;    val saveSpotifyPlaylistToLibrary: () -&gt; Unit = {&#10;        coroutineScope.launch {&#10;            try {&#10;                selectedSpotifyPlaylist?.let { playlist -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando playlist en biblioteca de Spotify: ${playlist.name}&quot;)&#10;                        SpotifyRepository.followPlaylist(accessToken, playlist.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Playlist seguida exitosamente: ${playlist.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error siguiendo playlist: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;                selectedSpotifyAlbum?.let { album -&gt;&#10;                    val accessToken = Config.getSpotifyAccessToken(context)&#10;                    if (accessToken != null) {&#10;                        Log.d(&quot;SearchScreen&quot;, &quot; Guardando álbum en biblioteca de Spotify: ${album.name}&quot;)&#10;                        SpotifyRepository.saveAlbum(accessToken, album.id) { success, errorMsg -&gt;&#10;                            if (success) {&#10;                                Log.d(&quot;SearchScreen&quot;, &quot;✅ Álbum guardado exitosamente: ${album.name}&quot;)&#10;                            } else {&#10;                                Log.e(&quot;SearchScreen&quot;, &quot;❌ Error guardando álbum: $errorMsg&quot;)&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                    }&#10;                }&#10;            } catch (e: Exception) {&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error guardando en biblioteca de Spotify&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    val loadSpotifyPlaylistTracks: (SpotifyPlaylist) -&gt; Unit = { playlist -&gt;&#10;        selectedSpotifyPlaylist = playlist&#10;        selectedSpotifyAlbum = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks de la playlist: ${playlist.name}&quot;)&#10;                    SpotifyRepository.getPlaylistTracks(accessToken, playlist.id) { playlistTracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (playlistTracks != null) {&#10;                            // Convertir SpotifyPlaylistTrack a SpotifyTrack&#10;                            val tracks = playlistTracks.mapNotNull { it.track }&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para la playlist: ${playlist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks de la playlist: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de playlist: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks de la playlist: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando playlist tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    val loadSpotifyAlbumTracks: (SpotifyAlbum) -&gt; Unit = { album -&gt;&#10;        selectedSpotifyAlbum = album&#10;        selectedSpotifyPlaylist = null&#10;        isLoadingTracks = true&#10;        error = null&#10;        selectedItemTracks = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando tracks del álbum: ${album.name}&quot;)&#10;                    SpotifyRepository.getAlbumTracks(accessToken, album.id) { tracks, errorMsg -&gt;&#10;                        isLoadingTracks = false&#10;                        if (tracks != null) {&#10;                            selectedItemTracks = tracks&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${tracks.size} tracks cargados para el álbum: ${album.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando tracks del álbum: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks de álbum: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingTracks = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingTracks = false&#10;                error = &quot;Error cargando tracks del álbum: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando album tracks&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Nueva función para cargar álbumes de un artista&#10;    val loadArtistAlbums: (SpotifyArtistFull) -&gt; Unit = { artist -&gt;&#10;        selectedSpotifyArtist = artist&#10;        isLoadingArtistAlbums = true&#10;        error = null&#10;        selectedArtistAlbums = emptyList()&#10;&#10;        coroutineScope.launch {&#10;            try {&#10;                val accessToken = Config.getSpotifyAccessToken(context)&#10;                if (accessToken != null) {&#10;                    Log.d(&quot;SearchScreen&quot;, &quot; Cargando álbumes del artista: ${artist.name}&quot;)&#10;                    SpotifyRepository.getArtistAlbums(accessToken, artist.id) { albums, errorMsg -&gt;&#10;                        isLoadingArtistAlbums = false&#10;                        if (albums != null) {&#10;                            selectedArtistAlbums = albums&#10;                            Log.d(&quot;SearchScreen&quot;, &quot;✅ ${albums.size} álbumes cargados para el artista: ${artist.name}&quot;)&#10;                        } else {&#10;                            error = &quot;Error cargando álbumes del artista: $errorMsg&quot;&#10;                            Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando álbumes de artista: $errorMsg&quot;)&#10;                        }&#10;                    }&#10;                } else {&#10;                    isLoadingArtistAlbums = false&#10;                    error = &quot;Token de Spotify no disponible&quot;&#10;                    Log.e(&quot;SearchScreen&quot;, &quot;❌ Token de Spotify no disponible&quot;)&#10;                }&#10;            } catch (e: Exception) {&#10;                isLoadingArtistAlbums = false&#10;                error = &quot;Error cargando álbumes del artista: ${e.message}&quot;&#10;                Log.e(&quot;SearchScreen&quot;, &quot;Error cargando artist albums&quot;, e)&#10;            }&#10;        }&#10;    }&#10;&#10;    // Handle back button&#10;    BackHandler {&#10;        when {&#10;            selectedSpotifyPlaylist != null || selectedSpotifyAlbum != null || selectedSpotifyArtist != null -&gt; {&#10;                // Volver de la vista detallada a los resultados de búsqueda&#10;                selectedSpotifyPlaylist = null&#10;                selectedSpotifyAlbum = null&#10;                selectedSpotifyArtist = null&#10;                selectedItemTracks = emptyList()&#10;                selectedArtistAlbums = emptyList()&#10;            }&#10;            else -&gt; onBack()&#10;        }&#10;    }&#10;&#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Mostrar vista detallada o búsqueda normal&#10;        when {&#10;            selectedSpotifyPlaylist != null -&gt; {&#10;                SpotifyPlaylistDetailView(&#10;                    playlist = selectedSpotifyPlaylist!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyPlaylist = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir playlist desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir playlist en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria de la playlist: ${selectedSpotifyPlaylist!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyPlaylist!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyPlaylist!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir playlist aleatoria&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyAlbum != null -&gt; {&#10;                SpotifyAlbumDetailView(&#10;                    album = selectedSpotifyAlbum!!,&#10;                    tracks = selectedItemTracks,&#10;                    isLoading = isLoadingTracks,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyAlbum = null&#10;                        selectedItemTracks = emptyList()&#10;                    },&#10;                    onStart = {&#10;                        // Reproducir álbum desde el primer track&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity&#10;                            val trackEntities = selectedItemTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onRandom = {&#10;                        // Reproducir álbum en orden aleatorio&#10;                        if (selectedItemTracks.isNotEmpty()) {&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del álbum: ${selectedSpotifyAlbum!!.name}&quot;)&#10;&#10;                            // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                            val shuffledTracks = selectedItemTracks.shuffled()&#10;                            val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                TrackEntity(&#10;                                    id = &quot;spotify_${selectedSpotifyAlbum!!.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                    playlistId = selectedSpotifyAlbum!!.id,&#10;                                    spotifyTrackId = spotifyTrack.id,&#10;                                    name = spotifyTrack.name,&#10;                                    artists = spotifyTrack.getArtistNames(),&#10;                                    youtubeVideoId = null, // Se buscará dinámicamente&#10;                                    audioUrl = null,&#10;                                    position = index,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                            }&#10;&#10;                            // Establecer playlist mezclada y comenzar reproducción&#10;                            playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                            // Buscar y reproducir el primer track de la lista mezclada&#10;                            trackEntities.firstOrNull()?.let { track -&gt;&#10;                                coroutineScope.launch {&#10;                                    try {&#10;                                        playerViewModel?.loadAudioFromTrack(track)&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum aleatorio&quot;, e)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    onSave = saveSpotifyPlaylistToLibrary,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            selectedSpotifyArtist != null -&gt; {&#10;                // Nueva vista detallada para el artista&#10;                SpotifyArtistDetailView(&#10;                    artist = selectedSpotifyArtist!!,&#10;                    albums = selectedArtistAlbums,&#10;                    isLoading = isLoadingArtistAlbums,&#10;                    error = error,&#10;                    onBack = {&#10;                        selectedSpotifyArtist = null&#10;                        selectedArtistAlbums = emptyList()&#10;                    },&#10;                    onAlbumClick = { album -&gt;&#10;                        // Navegar al álbum seleccionado&#10;                        loadSpotifyAlbumTracks(album)&#10;                    },&#10;                    onShuffleAll = {&#10;                        // Reproducir todos los álbumes del artista en orden aleatorio&#10;                        if (selectedArtistAlbums.isNotEmpty()) {&#10;                            val firstAlbum = selectedArtistAlbums.first()&#10;                            Log.d(&quot;SearchScreen&quot;, &quot; Iniciando reproducción aleatoria del primer álbum del artista: ${firstAlbum.name}&quot;)&#10;&#10;                            // Cargar los tracks del primer álbum&#10;                            val accessToken = Config.getSpotifyAccessToken(context)&#10;                            if (accessToken != null) {&#10;                                SpotifyRepository.getAlbumTracks(accessToken, firstAlbum.id) { tracks, errorMsg -&gt;&#10;                                    if (tracks != null) {&#10;                                        // Convertir SpotifyTrack a TrackEntity y mezclar&#10;                                        val shuffledTracks = tracks.shuffled()&#10;                                        val trackEntities = shuffledTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                                            TrackEntity(&#10;                                                id = &quot;spotify_${firstAlbum.id}_${spotifyTrack.id}_shuffled&quot;,&#10;                                                playlistId = firstAlbum.id,&#10;                                                spotifyTrackId = spotifyTrack.id,&#10;                                                name = spotifyTrack.name,&#10;                                                artists = spotifyTrack.getArtistNames(),&#10;                                                youtubeVideoId = null, // Se buscará dinámicamente&#10;                                                audioUrl = null,&#10;                                                position = index,&#10;                                                lastSyncTime = System.currentTimeMillis()&#10;                                            )&#10;                                        }&#10;&#10;                                        // Establecer playlist mezclada y comenzar reproducción&#10;                                        playerViewModel?.setCurrentPlaylist(trackEntities, 0)&#10;&#10;                                        // Buscar y reproducir el primer track de la lista mezclada&#10;                                        trackEntities.firstOrNull()?.let { track -&gt;&#10;                                            coroutineScope.launch {&#10;                                                try {&#10;                                                    playerViewModel?.loadAudioFromTrack(track)&#10;                                                } catch (e: Exception) {&#10;                                                    Log.e(&quot;SearchScreen&quot;, &quot;Error al reproducir álbum del artista aleatorio&quot;, e)&#10;                                                }&#10;                                            }&#10;                                        }&#10;                                    } else {&#10;                                        Log.e(&quot;SearchScreen&quot;, &quot;❌ Error cargando tracks para shuffle: $errorMsg&quot;)&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    },&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            else -&gt; {&#10;                // Vista normal de búsqueda&#10;                SearchMainView(&#10;                    searchQuery = searchQuery,&#10;                    onSearchQueryChange = { searchQuery = it },&#10;                    results = results,&#10;                    spotifyResults = spotifyResults,&#10;                    showSpotifyResults = showSpotifyResults,&#10;                    isLoading = isLoading,&#10;                    error = error,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                    onAlbumSelected = loadSpotifyAlbumTracks,&#10;                    onPlaylistSelected = loadSpotifyPlaylistTracks,&#10;                    onArtistSelected = loadArtistAlbums, // Agregar callback para artistas&#10;                    onSearchTriggered = performSearch,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;@Composable&#10;private fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit = { _, _, _, _ -&gt; },&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Nuevo callback para artistas&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search field with clear button and enter action&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            label = {&#10;                Text(&#10;                    &quot;&gt; search_audio&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            trailingIcon = {&#10;                if (searchQuery.isNotEmpty()) {&#10;                    IconButton(onClick = {&#10;                        onSearchQueryChange(&quot;&quot;)&#10;                    }) {&#10;                        Text(&#10;                            text = &quot;x&quot;,&#10;                            style = MaterialTheme.typography.titleLarge.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                fontSize = 18.sp,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;            },&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    if (searchQuery.isNotBlank() &amp;&amp; !isLoading) {&#10;                        onSearchTriggered(searchQuery, false)&#10;                    }&#10;                }&#10;            ),&#10;            enabled = !isLoading,&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;                focusedLabelColor = MaterialTheme.colorScheme.primary,&#10;                unfocusedLabelColor = MaterialTheme.colorScheme.secondary,&#10;                focusedTextColor = MaterialTheme.colorScheme.onSurface,&#10;                unfocusedTextColor = MaterialTheme.colorScheme.onSurface&#10;            ),&#10;            textStyle = MaterialTheme.typography.bodyLarge.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp&#10;            )&#10;        )&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        if (isLoading) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.Center,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    &quot;$ loading...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        error?.let {&#10;            Spacer(Modifier.height(8.dp))&#10;            Text(&#10;                &quot;ERR: $it&quot;,&#10;                color = Color(0xFFFF6B6B),&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace&#10;                )&#10;            )&#10;        }&#10;&#10;        // === MENÚS DESPLEGABLES DE SPOTIFY ===&#10;        android.util.Log.d(&#10;            &quot;SearchMainView&quot;,&#10;            &quot;Renderizando vista principal - showSpotifyResults=$showSpotifyResults, spotifyResults!=null=${spotifyResults != null}&quot;&#10;        )&#10;        if (showSpotifyResults &amp;&amp; spotifyResults != null) {&#10;            CollapsibleSpotifySearchResultsView(&#10;                results = spotifyResults,&#10;                onAlbumSelected = onAlbumSelected,&#10;                onPlaylistSelected = onPlaylistSelected,&#10;                onArtistSelected = onArtistSelected, // Pasar el callback de artista&#10;                onTrackSelectedFromSearch = { track, allTracks, selectedIndex -&gt;&#10;                    // Convertir tracks de Spotify a TrackEntity y crear playlist temporal&#10;                    val trackEntities = allTracks.mapIndexed { index, spotifyTrack -&gt;&#10;                        TrackEntity(&#10;                            id = &quot;spotify_search_${spotifyTrack.id}_$index&quot;,&#10;                            playlistId = &quot;spotify_search_${System.currentTimeMillis()}&quot;,&#10;                            spotifyTrackId = spotifyTrack.id,&#10;                            name = spotifyTrack.name,&#10;                            artists = spotifyTrack.getArtistNames(),&#10;                            youtubeVideoId = null, // Se buscará dinámicamente&#10;                            audioUrl = null,&#10;                            position = index,&#10;                            lastSyncTime = System.currentTimeMillis()&#10;                        )&#10;                    }&#10;&#10;                    // Establecer playlist en el PlayerViewModel&#10;                    playerViewModel?.setCurrentPlaylist(trackEntities, selectedIndex)&#10;&#10;                    // Cargar el track seleccionado&#10;                    val selectedTrackEntity = trackEntities[selectedIndex]&#10;                    coroutineScope.launch {&#10;                        try {&#10;                            playerViewModel?.loadAudioFromTrack(selectedTrackEntity)&#10;                            Log.d(&#10;                                &quot;SpotifySearch&quot;,&#10;                                &quot; Track Spotify como playlist: ${track.name} (${selectedIndex + 1}/${allTracks.size})&quot;&#10;                            )&#10;                        } catch (e: Exception) {&#10;                            Log.e(&quot;SpotifySearch&quot;, &quot;Error al reproducir track de Spotify&quot;, e)&#10;                        }&#10;                    }&#10;                },&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;&#10;        // === RESULTADOS DE YOUTUBE ===&#10;        if (results.isNotEmpty()) {&#10;            CollapsibleYouTubeSearchResultsView(&#10;                results = results,&#10;                onVideoSelected = onVideoSelected,&#10;                onVideoSelectedFromSearch = onVideoSelectedFromSearch,&#10;                onLoadMore = { onSearchTriggered(searchQuery, true) },&#10;                playerViewModel = playerViewModel,&#10;                coroutineScope = coroutineScope&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun CollapsibleSpotifySearchResultsView(&#10;    results: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Agregar parámetro faltante&#10;    onTrackSelectedFromSearch: (SpotifyTrack, List&lt;SpotifyTrack&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var tracksExpanded by remember { mutableStateOf(true) }&#10;    var albumsExpanded by remember { mutableStateOf(true) }&#10;    var playlistsExpanded by remember { mutableStateOf(true) }&#10;    var artistsExpanded by remember { mutableStateOf(false) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (results.tracks.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ tracks [${results.tracks.items.size}] ${if (tracksExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { tracksExpanded = !tracksExpanded }&#10;                    .padding(bottom = 8.dp)&#10;            )&#10;&#10;            if (tracksExpanded) {&#10;                Column(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                ) {&#10;                    results.tracks.items.take(5).forEachIndexed { index, track -&gt;&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .clickable {&#10;                                    onTrackSelectedFromSearch(track, results.tracks.items, index)&#10;                                }&#10;                                .padding(vertical = 4.dp, horizontal = 8.dp),&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;&#10;                            Column(modifier = Modifier.weight(1f)) {&#10;                                Text(&#10;                                    text = track.name ?: &quot;Unknown Track&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFFE0E0E0)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                                Text(&#10;                                    text = track.getArtistNames(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;                            }&#10;&#10;                            Text(&#10;                                text = track.getDurationText(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (results.albums.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ albums [${results.albums.items.size}] ${if (albumsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { albumsExpanded = !albumsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (albumsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.albums.items.size) { index -&gt;&#10;                        val album = results.albums.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onAlbumSelected(album) },&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = album.getImageUrl(),&#10;                                contentDescription = &quot;Album cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = album.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;&#10;                            Text(&#10;                                text = album.getArtistNames(),&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (results.playlists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ playlists [${results.playlists.items.size}] ${if (playlistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { playlistsExpanded = !playlistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (playlistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.playlists.items.size) { index -&gt;&#10;                        val playlist = results.playlists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(120.dp)&#10;                                .clickable { onPlaylistSelected(playlist) },&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = playlist.getImageUrl(),&#10;                                contentDescription = &quot;Playlist cover&quot;,&#10;                                modifier = Modifier&#10;                                    .size(120.dp)&#10;                                    .clip(RoundedCornerShape(8.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = playlist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;&#10;                            Text(&#10;                                text = &quot;${playlist.getTrackCount()} tracks&quot;,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFF95A5A6)&#10;                                ),&#10;                                maxLines = 1,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Artists section&#10;        if (results.artists.items.isNotEmpty()) {&#10;            Text(&#10;                text = &quot;$ artists [${results.artists.items.size}] ${if (artistsExpanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;                style = MaterialTheme.typography.titleMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF4ECDC4)&#10;                ),&#10;                modifier = Modifier&#10;                    .clickable { artistsExpanded = !artistsExpanded }&#10;                    .padding(bottom = 8.dp, top = 16.dp)&#10;            )&#10;&#10;            if (artistsExpanded) {&#10;                LazyRow(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                    contentPadding = PaddingValues(horizontal = 8.dp)&#10;                ) {&#10;                    items(results.artists.items.size) { index -&gt;&#10;                        val artist = results.artists.items[index]&#10;                        Column(&#10;                            modifier = Modifier&#10;                                .width(100.dp)&#10;                                .clickable { onArtistSelected(artist) }, // Conectar con el callback&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            AsyncImage(&#10;                                model = artist.getImageUrl(),&#10;                                contentDescription = &quot;Artist image&quot;,&#10;                                modifier = Modifier&#10;                                    .size(100.dp)&#10;                                    .clip(RoundedCornerShape(50.dp))&#10;                            )&#10;&#10;                            Text(&#10;                                text = artist.name,&#10;                                style = MaterialTheme.typography.bodySmall.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                modifier = Modifier.padding(top = 4.dp),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun CollapsibleYouTubeSearchResultsView(&#10;    results: List&lt;AudioItem&gt;,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onLoadMore: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    var expanded by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;$ youtube_results [${results.size}] ${if (expanded) &quot;[-]&quot; else &quot;[+]&quot;}&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier&#10;                .clickable { expanded = !expanded }&#10;                .padding(bottom = 8.dp, top = 16.dp)&#10;        )&#10;&#10;        if (expanded) {&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                results.take(5).forEachIndexed { index, item -&gt;&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable {&#10;                                onVideoSelectedFromSearch(item.videoId, item.title, results, index)&#10;                            }&#10;                            .padding(8.dp),&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;${index + 1}. &quot;,&#10;                            style = MaterialTheme.typography.bodySmall.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            ),&#10;                            modifier = Modifier.width(32.dp)&#10;                        )&#10;&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = item.title,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    color = Color(0xFFE0E0E0)&#10;                                ),&#10;                                maxLines = 2,&#10;                                overflow = TextOverflow.Ellipsis&#10;                            )&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                Text(&#10;                                    text = item.channel ?: &quot;Unknown Channel&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.weight(1f),&#10;                                    maxLines = 1,&#10;                                    overflow = TextOverflow.Ellipsis&#10;                                )&#10;&#10;                                item.duration?.let { duration -&gt;&#10;                                    Text(&#10;                                        text = duration,&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/MarqueeText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/MarqueeText.kt" />
              <option name="updatedContent" value="package com.plyr.ui.components&#10;&#10;import androidx.compose.animation.core.*&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.BasicText&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clipToBounds&#10;import androidx.compose.ui.layout.onSizeChanged&#10;import androidx.compose.ui.platform.LocalDensity&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.IntOffset&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun MarqueeText(&#10;    text: String,&#10;    modifier: Modifier = Modifier,&#10;    style: TextStyle = TextStyle(),&#10;    delayMillis: Int = 1000,&#10;    velocity: Float = 30f&#10;) {&#10;    val density = LocalDensity.current&#10;    var textWidth by remember { mutableStateOf(0) }&#10;    var containerWidth by remember { mutableStateOf(0) }&#10;    &#10;    val shouldMarquee = textWidth &gt; containerWidth &amp;&amp; containerWidth &gt; 0&#10;    &#10;    val animationSpec = infiniteRepeatable&lt;Float&gt;(&#10;        animation = tween(&#10;            durationMillis = if (shouldMarquee) ((textWidth - containerWidth) / velocity * 1000).toInt() else 0,&#10;            easing = LinearEasing&#10;        ),&#10;        repeatMode = RepeatMode.Restart&#10;    )&#10;    &#10;    val animatedOffset by animateFloatAsState(&#10;        targetValue = if (shouldMarquee) -(textWidth - containerWidth).toFloat() else 0f,&#10;        animationSpec = animationSpec,&#10;        label = &quot;marquee&quot;&#10;    )&#10;    &#10;    var startAnimation by remember { mutableStateOf(false) }&#10;    &#10;    LaunchedEffect(shouldMarquee) {&#10;        if (shouldMarquee) {&#10;            delay(delayMillis.toLong())&#10;            startAnimation = true&#10;        } else {&#10;            startAnimation = false&#10;        }&#10;    }&#10;    &#10;    Box(&#10;        modifier = modifier&#10;            .clipToBounds()&#10;            .onSizeChanged { size -&gt;&#10;                containerWidth = size.width&#10;            }&#10;    ) {&#10;        BasicText(&#10;            text = text,&#10;            style = style,&#10;            maxLines = 1,&#10;            overflow = TextOverflow.Visible,&#10;            modifier = Modifier&#10;                .onSizeChanged { size -&gt;&#10;                    textWidth = size.width&#10;                }&#10;                .offset {&#10;                    IntOffset(&#10;                        x = if (startAnimation) animatedOffset.toInt() else 0,&#10;                        y = 0&#10;                    )&#10;                }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SearchMainView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SearchMainView.kt" />
              <option name="originalContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.SpotifyAlbum&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifySearchAllResponse&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;&#10;@Composable&#10;fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column {&#10;        // Search header&#10;        Text(&#10;            text = &quot;$ search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search input&#10;        TextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            placeholder = {&#10;                Text(&#10;                    &quot;Search (prefix: yt: youtube, sp: spotify)&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    onSearchTriggered(searchQuery, false)&#10;                }&#10;            ),&#10;            singleLine = true,&#10;            textStyle = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color.White&#10;            ),&#10;            colors = TextFieldDefaults.colors(&#10;                focusedContainerColor = Color.Transparent,&#10;                unfocusedContainerColor = Color.Transparent,&#10;                focusedIndicatorColor = Color.Transparent,&#10;                unfocusedIndicatorColor = Color.Transparent,&#10;                cursorColor = Color(0xFF4ECDC4)&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Loading indicator&#10;        if (isLoading) {&#10;            Text(&#10;                text = &quot;&gt; searching...&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFFFD93D)&#10;                )&#10;            )&#10;        }&#10;&#10;        // Error message&#10;        error?.let { errorMessage -&gt;&#10;            Text(&#10;                text = &quot;&gt; error: $errorMessage&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(vertical = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Search results&#10;        when {&#10;            showSpotifyResults &amp;&amp; spotifyResults != null -&gt; {&#10;                SpotifySearchResults(&#10;                    searchResults = spotifyResults,&#10;                    onAlbumSelected = onAlbumSelected,&#10;                    onPlaylistSelected = onPlaylistSelected,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            results.isNotEmpty() -&gt; {&#10;                YouTubeSearchResults(&#10;                    results = results,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch&#10;                )&#10;            }&#10;            !isLoading &amp;&amp; searchQuery.isNotBlank() -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; no results found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.model.AudioItem&#10;import com.plyr.network.SpotifyAlbum&#10;import com.plyr.network.SpotifyArtistFull&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifySearchAllResponse&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;&#10;@Composable&#10;fun SearchMainView(&#10;    searchQuery: String,&#10;    onSearchQueryChange: (String) -&gt; Unit,&#10;    results: List&lt;AudioItem&gt;,&#10;    spotifyResults: SpotifySearchAllResponse?,&#10;    showSpotifyResults: Boolean,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onVideoSelected: (String, String) -&gt; Unit,&#10;    onVideoSelectedFromSearch: (String, String, List&lt;AudioItem&gt;, Int) -&gt; Unit,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Agregar parámetro faltante&#10;    onSearchTriggered: (String, Boolean) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column {&#10;        // Search header&#10;        Text(&#10;            text = &quot;$ search&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Search input&#10;        TextField(&#10;            value = searchQuery,&#10;            onValueChange = onSearchQueryChange,&#10;            placeholder = {&#10;                Text(&#10;                    &quot;Search (prefix: yt: youtube, sp: spotify)&quot;,&#10;                    style = MaterialTheme.typography.bodySmall.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;            keyboardActions = KeyboardActions(&#10;                onSearch = {&#10;                    onSearchTriggered(searchQuery, false)&#10;                }&#10;            ),&#10;            singleLine = true,&#10;            textStyle = MaterialTheme.typography.bodyMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                color = Color.White&#10;            ),&#10;            colors = TextFieldDefaults.colors(&#10;                focusedContainerColor = Color.Transparent,&#10;                unfocusedContainerColor = Color.Transparent,&#10;                focusedIndicatorColor = Color.Transparent,&#10;                unfocusedIndicatorColor = Color.Transparent,&#10;                cursorColor = Color(0xFF4ECDC4)&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Loading indicator&#10;        if (isLoading) {&#10;            Text(&#10;                text = &quot;&gt; searching...&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFFFD93D)&#10;                )&#10;            )&#10;        }&#10;&#10;        // Error message&#10;        error?.let { errorMessage -&gt;&#10;            Text(&#10;                text = &quot;&gt; error: $errorMessage&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(vertical = 8.dp)&#10;            )&#10;        }&#10;&#10;        // Search results&#10;        when {&#10;            showSpotifyResults &amp;&amp; spotifyResults != null -&gt; {&#10;                SpotifySearchResults(&#10;                    searchResults = spotifyResults,&#10;                    onAlbumSelected = onAlbumSelected,&#10;                    onPlaylistSelected = onPlaylistSelected,&#10;                    onArtistSelected = onArtistSelected, // Pasar el parámetro&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;            results.isNotEmpty() -&gt; {&#10;                YouTubeSearchResults(&#10;                    results = results,&#10;                    onVideoSelected = onVideoSelected,&#10;                    onVideoSelectedFromSearch = onVideoSelectedFromSearch&#10;                )&#10;            }&#10;            !isLoading &amp;&amp; searchQuery.isNotBlank() -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; no results found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SpotifyPlaylistDetailView.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SpotifyPlaylistDetailView.kt" />
              <option name="originalContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun SpotifyPlaylistDetailView(&#10;    playlist: SpotifyPlaylist,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onBack: () -&gt; Unit,&#10;    onStart: () -&gt; Unit,&#10;    onRandom: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header with playlist info&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Playlist image&#10;            playlist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                AsyncImage(&#10;                    model = imageUrl,&#10;                    contentDescription = null,&#10;                    modifier = Modifier&#10;                        .size(80.dp)&#10;                        .clip(RoundedCornerShape(8.dp))&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;            }&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;$ playlist_detail&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 18.sp,&#10;                        color = Color(0xFF4ECDC4)&#10;                    )&#10;                )&#10;&#10;                Text(&#10;                    text = playlist.name,&#10;                    style = MaterialTheme.typography.titleLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;${playlist.tracks?.total ?: 0} tracks&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Action buttons&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            TextButton(onClick = onBack) {&#10;                Text(&#10;                    &quot;&lt; back&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onStart) {&#10;                Text(&#10;                    &quot;play&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF4ECDC4)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onRandom) {&#10;                Text(&#10;                    &quot;shuffle&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onSave) {&#10;                Text(&#10;                    &quot;save&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF1DB954)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Content&#10;        when {&#10;            isLoading -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;&#10;            error != null -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; error: $error&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFE74C3C)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;&#10;            tracks.isNotEmpty() -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(tracks.size) { index -&gt;&#10;                        val track = tracks[index]&#10;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 2.dp)&#10;                                .clickable {&#10;                                    // Play individual track from playlist&#10;                                    playerViewModel?.let { vm -&gt;&#10;                                        coroutineScope.launch {&#10;                                            val trackEntities = tracks.mapIndexed { idx, spotifyTrack -&gt;&#10;                                                TrackEntity(&#10;                                                    id = &quot;spotify_${playlist.id}_${spotifyTrack.id}&quot;,&#10;                                                    playlistId = playlist.id,&#10;                                                    spotifyTrackId = spotifyTrack.id,&#10;                                                    name = spotifyTrack.name,&#10;                                                    artists = spotifyTrack.getArtistNames(),&#10;                                                    youtubeVideoId = null,&#10;                                                    audioUrl = null,&#10;                                                    position = idx,&#10;                                                    lastSyncTime = System.currentTimeMillis()&#10;                                                )&#10;                                            }&#10;                                            vm.setCurrentPlaylist(trackEntities, index)&#10;                                            vm.loadAudioFromTrack(trackEntities[index])&#10;                                        }&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = Color(0xFF1DB954).copy(alpha = 0.2f)&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                // Track number&#10;                                Text(&#10;                                    text = &quot;${index + 1}.&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 12.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.width(32.dp)&#10;                                )&#10;&#10;                                // Track image (if available from album)&#10;                                track.album?.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                                    AsyncImage(&#10;                                        model = imageUrl,&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier&#10;                                            .size(40.dp)&#10;                                            .clip(RoundedCornerShape(4.dp))&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                }&#10;&#10;                                // Track image (if available from album)&#10;                                track.album?.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                                    AsyncImage(&#10;                                        model = imageUrl,&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier&#10;                                            .size(40.dp)&#10;                                            .clip(RoundedCornerShape(4.dp))&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                }&#10;&#10;                                // Track image (if available from album)&#10;                                track.album?.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                                    AsyncImage(&#10;                                        model = imageUrl,&#10;                                        contentDescription = null,&#10;                                        modifier = Modifier&#10;                                            .size(40.dp)&#10;                                            .clip(RoundedCornerShape(4.dp))&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(12.dp))&#10;                                }&#10;&#10;                                Column(modifier = Modifier.weight(1f)) {&#10;                                    MarqueeText(&#10;                                        text = track.name,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 14.sp,&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;&#10;                                    Text(&#10;                                        text = track.getArtistNames(),&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 12.sp,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        ),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis&#10;                                    )&#10;                                }&#10;&#10;                                Text(&#10;                                    text = track.getDurationText(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 12.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; no tracks found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.network.SpotifyPlaylist&#10;import com.plyr.network.SpotifyTrack&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun SpotifyPlaylistDetailView(&#10;    playlist: SpotifyPlaylist,&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    isLoading: Boolean,&#10;    error: String?,&#10;    onBack: () -&gt; Unit,&#10;    onStart: () -&gt; Unit,&#10;    onRandom: () -&gt; Unit,&#10;    onSave: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        // Header with playlist info&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Playlist image&#10;            playlist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                AsyncImage(&#10;                    model = imageUrl,&#10;                    contentDescription = null,&#10;                    modifier = Modifier&#10;                        .size(80.dp)&#10;                        .clip(RoundedCornerShape(8.dp))&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;            }&#10;&#10;            Column(modifier = Modifier.weight(1f)) {&#10;                Text(&#10;                    text = &quot;$ playlist_detail&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 18.sp,&#10;                        color = Color(0xFF4ECDC4)&#10;                    )&#10;                )&#10;&#10;                Text(&#10;                    text = playlist.name,&#10;                    style = MaterialTheme.typography.titleLarge.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;&#10;                Text(&#10;                    text = &quot;${playlist.tracks?.total ?: 0} tracks&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 12.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Action buttons&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(bottom = 16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;        ) {&#10;            TextButton(onClick = onBack) {&#10;                Text(&#10;                    &quot;&lt; back&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onStart) {&#10;                Text(&#10;                    &quot;play&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF4ECDC4)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onRandom) {&#10;                Text(&#10;                    &quot;shuffle&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    )&#10;                )&#10;            }&#10;&#10;            TextButton(onClick = onSave) {&#10;                Text(&#10;                    &quot;save&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF1DB954)&#10;                    )&#10;                )&#10;            }&#10;        }&#10;&#10;        // Content&#10;        when {&#10;            isLoading -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; loading tracks...&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFFFD93D)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;&#10;            error != null -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; error: $error&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFFE74C3C)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;&#10;            tracks.isNotEmpty() -&gt; {&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(tracks.size) { index -&gt;&#10;                        val track = tracks[index]&#10;&#10;                        Card(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 2.dp)&#10;                                .clickable {&#10;                                    // Play individual track from playlist&#10;                                    playerViewModel?.let { vm -&gt;&#10;                                        coroutineScope.launch {&#10;                                            val trackEntities = tracks.mapIndexed { idx, spotifyTrack -&gt;&#10;                                                TrackEntity(&#10;                                                    id = &quot;spotify_${playlist.id}_${spotifyTrack.id}&quot;,&#10;                                                    playlistId = playlist.id,&#10;                                                    spotifyTrackId = spotifyTrack.id,&#10;                                                    name = spotifyTrack.name,&#10;                                                    artists = spotifyTrack.getArtistNames(),&#10;                                                    youtubeVideoId = null,&#10;                                                    audioUrl = null,&#10;                                                    position = idx,&#10;                                                    lastSyncTime = System.currentTimeMillis()&#10;                                                )&#10;                                            }&#10;                                            vm.setCurrentPlaylist(trackEntities, index)&#10;                                            vm.loadAudioFromTrack(trackEntities[index])&#10;                                        }&#10;                                    }&#10;                                },&#10;                            colors = CardDefaults.cardColors(&#10;                                containerColor = Color(0xFF1DB954).copy(alpha = 0.2f)&#10;                            )&#10;                        ) {&#10;                            Row(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .padding(12.dp),&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                // Track number&#10;                                Text(&#10;                                    text = &quot;${index + 1}.&quot;,&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 12.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    ),&#10;                                    modifier = Modifier.width(32.dp)&#10;                                )&#10;&#10;                                Column(modifier = Modifier.weight(1f)) {&#10;                                    MarqueeText(&#10;                                        text = track.name,&#10;                                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 14.sp,&#10;                                            color = Color.White&#10;                                        )&#10;                                    )&#10;&#10;                                    Text(&#10;                                        text = track.getArtistNames(),&#10;                                        style = MaterialTheme.typography.bodySmall.copy(&#10;                                            fontFamily = FontFamily.Monospace,&#10;                                            fontSize = 12.sp,&#10;                                            color = Color(0xFF95A5A6)&#10;                                        ),&#10;                                        maxLines = 1,&#10;                                        overflow = TextOverflow.Ellipsis&#10;                                    )&#10;                                }&#10;&#10;                                Text(&#10;                                    text = track.getDurationText(),&#10;                                    style = MaterialTheme.typography.bodySmall.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        fontSize = 12.sp,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                Text(&#10;                    text = &quot;&gt; no tracks found&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SpotifySearchResults.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/components/search/SpotifySearchResults.kt" />
              <option name="originalContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.network.*&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun SpotifySearchResults(&#10;    searchResults: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        contentPadding = PaddingValues(bottom = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (searchResults.tracks.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyTracksSection(&#10;                    tracks = searchResults.tracks.items,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (searchResults.albums.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyAlbumsSection(&#10;                    albums = searchResults.albums.items,&#10;                    onAlbumSelected = onAlbumSelected&#10;                )&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (searchResults.playlists.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyPlaylistsSection(&#10;                    playlists = searchResults.playlists.items,&#10;                    onPlaylistSelected = onPlaylistSelected&#10;                )&#10;            }&#10;        }&#10;&#10;        // Artists section&#10;        if (searchResults.artists.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyArtistsSection(&#10;                    artists = searchResults.artists.items.map { artistFull -&gt;&#10;                        SpotifyArtist(name = artistFull.name)&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyTracksSection(&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify tracks [${tracks.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        tracks.take(5).forEach { track -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;                    .clickable {&#10;                        // Play individual track&#10;                        playerViewModel?.let { vm -&gt;&#10;                            coroutineScope.launch {&#10;                                val trackEntity = TrackEntity(&#10;                                    id = &quot;spotify_single_${track.id}&quot;,&#10;                                    playlistId = &quot;single_track&quot;,&#10;                                    spotifyTrackId = track.id,&#10;                                    name = track.name,&#10;                                    artists = track.getArtistNames(),&#10;                                    youtubeVideoId = null,&#10;                                    audioUrl = null,&#10;                                    position = 0,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                                vm.setCurrentPlaylist(listOf(trackEntity), 0)&#10;                                vm.loadAudioFromTrack(trackEntity)&#10;                            }&#10;                        }&#10;                    },&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Track icon&#10;                Text(&#10;                    text = &quot;♫&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        color = Color(0xFF1DB954),&#10;                        fontSize = 16.sp&#10;                    ),&#10;                    modifier = Modifier.padding(end = 12.dp)&#10;                )&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = track.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 14.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = track.getArtistNames(),&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (tracks.size &gt; 5) {&#10;            Text(&#10;                text = &quot;... and ${tracks.size - 5} more tracks&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 12.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                modifier = Modifier.padding(8.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyAlbumsSection(&#10;    albums: List&lt;SpotifyAlbum&gt;,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify albums [${albums.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(albums.size) { index -&gt;&#10;                val album = albums[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(160.dp)&#10;                        .clickable { onAlbumSelected(album) }&#10;                        .padding(8.dp)&#10;                ) {&#10;                    album.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .aspectRatio(1f)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = album.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = album.getArtistNames(),&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyPlaylistsSection(&#10;    playlists: List&lt;SpotifyPlaylist&gt;,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify playlists [${playlists.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(playlists.size) { index -&gt;&#10;                val playlist = playlists[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(160.dp)&#10;                        .clickable { onPlaylistSelected(playlist) }&#10;                        .padding(8.dp)&#10;                ) {&#10;                    playlist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .aspectRatio(1f)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = playlist.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;${playlist.tracks?.total ?: 0} tracks&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyArtistsSection(&#10;    artists: List&lt;SpotifyArtist&gt;&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify artists [${artists.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(artists.size) { index -&gt;&#10;                val artist = artists[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(120.dp)&#10;                        .padding(8.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // SpotifyArtist doesn't have images, so we'll show a placeholder&#10;                    Text(&#10;                        text = &quot;♫&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium.copy(&#10;                            color = Color(0xFF1DB954),&#10;                            fontSize = 24.sp&#10;                        ),&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    Text(&#10;                        text = artist.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.ui.components.search&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.AsyncImage&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.network.*&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.shape.CircleShape&#10;&#10;@Composable&#10;fun SpotifySearchResults(&#10;    searchResults: SpotifySearchAllResponse,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit,&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit, // Nuevo callback para artistas&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        contentPadding = PaddingValues(bottom = 16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // Tracks section&#10;        if (searchResults.tracks.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyTracksSection(&#10;                    tracks = searchResults.tracks.items,&#10;                    playerViewModel = playerViewModel,&#10;                    coroutineScope = coroutineScope&#10;                )&#10;            }&#10;        }&#10;&#10;        // Albums section&#10;        if (searchResults.albums.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyAlbumsSection(&#10;                    albums = searchResults.albums.items,&#10;                    onAlbumSelected = onAlbumSelected&#10;                )&#10;            }&#10;        }&#10;&#10;        // Playlists section&#10;        if (searchResults.playlists.items.isNotEmpty()) {&#10;            item {&#10;                SpotifyPlaylistsSection(&#10;                    playlists = searchResults.playlists.items,&#10;                    onPlaylistSelected = onPlaylistSelected&#10;                )&#10;            }&#10;        }&#10;&#10;        // Artists section&#10;        if (searchResults.artists.items.isNotEmpty()) {&#10;            item {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                SpotifyArtistsSection(&#10;                    artists = searchResults.artists.items, // Ahora son SpotifyArtistFull&#10;                    onArtistSelected = onArtistSelected&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyTracksSection(&#10;    tracks: List&lt;SpotifyTrack&gt;,&#10;    playerViewModel: PlayerViewModel?,&#10;    coroutineScope: CoroutineScope&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify tracks [${tracks.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        tracks.take(5).forEach { track -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp)&#10;                    .clickable {&#10;                        // Play individual track&#10;                        playerViewModel?.let { vm -&gt;&#10;                            coroutineScope.launch {&#10;                                val trackEntity = TrackEntity(&#10;                                    id = &quot;spotify_single_${track.id}&quot;,&#10;                                    playlistId = &quot;single_track&quot;,&#10;                                    spotifyTrackId = track.id,&#10;                                    name = track.name,&#10;                                    artists = track.getArtistNames(),&#10;                                    youtubeVideoId = null,&#10;                                    audioUrl = null,&#10;                                    position = 0,&#10;                                    lastSyncTime = System.currentTimeMillis()&#10;                                )&#10;                                vm.setCurrentPlaylist(listOf(trackEntity), 0)&#10;                                vm.loadAudioFromTrack(trackEntity)&#10;                            }&#10;                        }&#10;                    },&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // Track icon&#10;                Text(&#10;                    text = &quot;♫&quot;,&#10;                    style = MaterialTheme.typography.headlineMedium.copy(&#10;                        color = Color(0xFF1DB954),&#10;                        fontSize = 16.sp&#10;                    ),&#10;                    modifier = Modifier.padding(end = 12.dp)&#10;                )&#10;&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = track.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 14.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = track.getArtistNames(),&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        if (tracks.size &gt; 5) {&#10;            Text(&#10;                text = &quot;... and ${tracks.size - 5} more tracks&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 12.sp,&#10;                    color = Color(0xFF95A5A6)&#10;                ),&#10;                modifier = Modifier.padding(8.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyAlbumsSection(&#10;    albums: List&lt;SpotifyAlbum&gt;,&#10;    onAlbumSelected: (SpotifyAlbum) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify albums [${albums.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(albums.size) { index -&gt;&#10;                val album = albums[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(160.dp)&#10;                        .clickable { onAlbumSelected(album) }&#10;                        .padding(8.dp)&#10;                ) {&#10;                    album.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .aspectRatio(1f)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = album.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = album.getArtistNames(),&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        ),&#10;                        maxLines = 1,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyPlaylistsSection(&#10;    playlists: List&lt;SpotifyPlaylist&gt;,&#10;    onPlaylistSelected: (SpotifyPlaylist) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify playlists [${playlists.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(playlists.size) { index -&gt;&#10;                val playlist = playlists[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(160.dp)&#10;                        .clickable { onPlaylistSelected(playlist) }&#10;                        .padding(8.dp)&#10;                ) {&#10;                    playlist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = null,&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .aspectRatio(1f)&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = playlist.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = Color.White&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;${playlist.tracks?.total ?: 0} tracks&quot;,&#10;                        style = MaterialTheme.typography.bodySmall.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFF95A5A6)&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SpotifyArtistsSection(&#10;    artists: List&lt;SpotifyArtistFull&gt;, // Cambiar de SpotifyArtist a SpotifyArtistFull&#10;    onArtistSelected: (SpotifyArtistFull) -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = &quot;&gt; spotify artists [${artists.size}]&quot;,&#10;            style = MaterialTheme.typography.titleMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 16.sp,&#10;                color = Color(0xFFFFD93D)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        LazyRow(&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;            contentPadding = PaddingValues(horizontal = 4.dp)&#10;        ) {&#10;            items(artists.size) { index -&gt;&#10;                val artist = artists[index]&#10;                Column(&#10;                    modifier = Modifier&#10;                        .width(120.dp)&#10;                        .clickable { onArtistSelected(artist) } // Hacer clickeable&#10;                        .padding(8.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    // Usar imagen del artista si está disponible&#10;                    artist.images?.firstOrNull()?.url?.let { imageUrl -&gt;&#10;                        AsyncImage(&#10;                            model = imageUrl,&#10;                            contentDescription = &quot;Imagen de ${artist.name}&quot;,&#10;                            modifier = Modifier&#10;                                .size(80.dp)&#10;                                .clip(CircleShape)&#10;                        )&#10;                    } ?: run {&#10;                        // Placeholder si no hay imagen&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .size(80.dp)&#10;                                .clip(CircleShape)&#10;                                .background(Color(0xFF1DB954).copy(alpha = 0.2f)),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;♫&quot;,&#10;                                style = MaterialTheme.typography.headlineMedium.copy(&#10;                                    color = Color(0xFF1DB954),&#10;                                    fontSize = 24.sp&#10;                                )&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = artist.name,&#10;                        style = MaterialTheme.typography.bodyMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 12.sp,&#10;                            color = MaterialTheme.colorScheme.onSurface&#10;                        ),&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/navigation/Screen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.navigation&#10;&#10;import androidx.compose.runtime.Stable&#10;&#10;// Estados para navegación&#10;enum class Screen {&#10;    HOME,&#10;    SEARCH,&#10;    QUEUE,&#10;    CONFIG,&#10;    PLAYLISTS&#10;}&#10;&#10;@Stable&#10;data class MenuOption(val screen: Screen, val title: String)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/HomeScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.app.Activity&#10;import android.content.Context&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.plyr.ui.navigation.MenuOption&#10;import com.plyr.ui.navigation.Screen&#10;import kotlinx.coroutines.CoroutineScope&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    context: Context,&#10;    onNavigateToScreen: (Screen) -&gt; Unit&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    var backPressedTime by remember { mutableStateOf(0L) }&#10;    var showExitMessage by remember { mutableStateOf(false) }&#10;    &#10;    // Handle double back press to exit&#10;    BackHandler {&#10;        val currentTime = System.currentTimeMillis()&#10;        if (currentTime - backPressedTime &gt; 2000) {&#10;            backPressedTime = currentTime&#10;            showExitMessage = true&#10;            // Hide message after 2 seconds&#10;            CoroutineScope(Dispatchers.Main).launch {&#10;                delay(2000)&#10;                showExitMessage = false&#10;            }&#10;        } else {&#10;            // Exit app&#10;            (context as? Activity)?.finish()&#10;        }&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Terminal-style header&#10;        Text(&#10;            text = &quot;$ plyr_home&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        // Lista de opciones disponibles&#10;        val options = remember {&#10;            listOf(&#10;                MenuOption(Screen.SEARCH, &quot;&gt; search&quot;),&#10;                MenuOption(Screen.PLAYLISTS, &quot;&gt; playlists&quot;),&#10;                MenuOption(Screen.QUEUE, &quot;&gt; queue&quot;),&#10;                MenuOption(Screen.CONFIG, &quot;&gt; settings&quot;)&#10;            )&#10;        }&#10;        &#10;        Column(&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            options.forEach { option -&gt;&#10;                Text(&#10;                    text = option.title,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 20.sp,&#10;                        color = Color.White&#10;                    ),&#10;                    modifier = Modifier&#10;                        .clickable {&#10;                            haptic.performHapticFeedback(HapticFeedbackType.TextHandleMove)&#10;                            onNavigateToScreen(option.screen)&#10;                        }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;        &#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // Exit message&#10;        if (showExitMessage) {&#10;            Text(&#10;                text = &quot;&gt; Press back again to exit&quot;,&#10;                style = MaterialTheme.typography.bodySmall.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(top = 8.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/ui/screens/QueueScreen.kt" />
              <option name="updatedContent" value="package com.plyr.ui.screens&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import androidx.activity.compose.BackHandler&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.hapticfeedback.HapticFeedbackType&#10;import androidx.compose.ui.platform.LocalHapticFeedback&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.plyr.ui.components.MarqueeText&#10;import com.plyr.viewmodel.PlayerViewModel&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun QueueScreen(&#10;    context: Context,&#10;    onBack: () -&gt; Unit,&#10;    playerViewModel: PlayerViewModel? = null&#10;) {&#10;    val haptic = LocalHapticFeedback.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    &#10;    // Handle back button&#10;    BackHandler {&#10;        onBack()&#10;    }&#10;    &#10;    Column(&#10;        Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Header&#10;        Text(&#10;            text = &quot;$ plyr_queue&quot;,&#10;            style = MaterialTheme.typography.headlineMedium.copy(&#10;                fontFamily = FontFamily.Monospace,&#10;                fontSize = 24.sp,&#10;                color = Color(0xFF4ECDC4)&#10;            ),&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        &#10;        // Queue content&#10;        if (playerViewModel != null) {&#10;            val queueState by playerViewModel.queueState.collectAsStateWithLifecycle()&#10;            val currentQueue = queueState.queue&#10;            &#10;            if (currentQueue.isNotEmpty()) {&#10;                // Queue header&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Current queue [${currentQueue.size}]&quot;,&#10;                        style = MaterialTheme.typography.titleMedium.copy(&#10;                            fontFamily = FontFamily.Monospace,&#10;                            fontSize = 18.sp,&#10;                            color = Color(0xFFFFD93D)&#10;                        )&#10;                    )&#10;                    &#10;                    // Clear queue button&#10;                    TextButton(&#10;                        onClick = { &#10;                            playerViewModel.clearQueue()&#10;                            Log.d(&quot;QueueScreen&quot;, &quot;Queue cleared by user&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;clear&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium.copy(&#10;                                fontFamily = FontFamily.Monospace,&#10;                                color = Color(0xFF95A5A6)&#10;                            )&#10;                        )&#10;                    }&#10;                }&#10;                &#10;                Spacer(Modifier.height(16.dp))&#10;                &#10;                // Queue track list&#10;                LazyColumn(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentPadding = PaddingValues(bottom = 16.dp)&#10;                ) {&#10;                    items(&#10;                        count = currentQueue.size,&#10;                        key = { index -&gt; currentQueue[index].id }&#10;                    ) { index -&gt;&#10;                        val track = currentQueue[index]&#10;                        val isCurrentTrack = queueState.currentIndex == index&#10;                        &#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(vertical = 4.dp, horizontal = 4.dp)&#10;                                .clickable {&#10;                                    coroutineScope.launch {&#10;                                        if (queueState.currentIndex != index) {&#10;                                            playerViewModel.playQueueFromIndex(index)&#10;                                        } else {&#10;                                            playerViewModel.resumeIfPaused()&#10;                                        }&#10;                                    }&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Starting queue from index: $index&quot;)&#10;                                },&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            // Position and status indicator&#10;                            Text(&#10;                                text = if (isCurrentTrack) &quot;♪ &quot; else &quot;${index + 1}. &quot;,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFF4ECDC4) else Color(0xFF95A5A6)&#10;                                ),&#10;                                modifier = Modifier.width(32.dp)&#10;                            )&#10;                            &#10;                            // Track name&#10;                            MarqueeText(&#10;                                text = track.name,&#10;                                style = MaterialTheme.typography.bodyMedium.copy(&#10;                                    fontFamily = FontFamily.Monospace,&#10;                                    fontSize = 14.sp,&#10;                                    color = if (isCurrentTrack) Color(0xFFE0E0E0) else Color(0xFFBDC3C7)&#10;                                ),&#10;                                modifier = Modifier.weight(1f)&#10;                            )&#10;                            &#10;                            // Remove from queue button&#10;                            TextButton(&#10;                                onClick = { &#10;                                    playerViewModel.removeFromQueue(index)&#10;                                    Log.d(&quot;QueueScreen&quot;, &quot;Removed track from queue at index: $index&quot;)&#10;                                }&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;×&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                                        fontFamily = FontFamily.Monospace,&#10;                                        color = Color(0xFF95A5A6)&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // Empty queue message&#10;                Text(&#10;                    text = &quot;Queue is empty&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium.copy(&#10;                        fontFamily = FontFamily.Monospace,&#10;                        fontSize = 16.sp,&#10;                        color = Color(0xFF95A5A6)&#10;                    ),&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(32.dp)&#10;                )&#10;            }&#10;        } else {&#10;            Text(&#10;                text = &quot;Player not available&quot;,&#10;                style = MaterialTheme.typography.bodyMedium.copy(&#10;                    fontFamily = FontFamily.Monospace,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFFE74C3C)&#10;                ),&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/Config.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/Config.kt" />
              <option name="originalContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import androidx.core.content.edit&#10;&#10;/**&#10; * Config - Objeto singleton para gestión de configuración de la aplicación&#10; * &#10; * Maneja:&#10; * - Configuración de temas (claro/oscuro)&#10; * - Tokens y autenticación de Spotify&#10; * - Constantes de API de Spotify&#10; * - Persistencia de preferencias usando SharedPreferences&#10; * &#10; * Todos los datos se almacenan de forma segura en SharedPreferences&#10; * y se accede a través de métodos thread-safe.&#10; */&#10;object Config {&#10;    &#10;    // === CONSTANTES PRIVADAS ===&#10;    &#10;    /** Nombre del archivo de preferencias */&#10;    private const val PREFS_NAME = &quot;plyr_config&quot;&#10;    &#10;    // Claves para SharedPreferences&#10;    private const val KEY_THEME = &quot;theme&quot;&#10;    private const val KEY_SEARCH_ENGINE = &quot;search_engine&quot;&#10;    private const val KEY_SPOTIFY_ACCESS_TOKEN = &quot;spotify_access_token&quot;&#10;    private const val KEY_SPOTIFY_REFRESH_TOKEN = &quot;spotify_refresh_token&quot;&#10;    private const val KEY_SPOTIFY_TOKEN_EXPIRY = &quot;spotify_token_expiry&quot;&#10;    private const val KEY_SPOTIFY_CLIENT_ID = &quot;spotify_client_id&quot;&#10;    private const val KEY_SPOTIFY_CLIENT_SECRET = &quot;spotify_client_secret&quot;&#10;    &#10;    // Valores por defecto&#10;    private const val DEFAULT_THEME = &quot;dark&quot;&#10;    private const val DEFAULT_SEARCH_ENGINE = &quot;spotify&quot;&#10;&#10;    // === CONSTANTES PÚBLICAS DE SPOTIFY ===&#10;&#10;    /** URI de redirección para OAuth de Spotify */&#10;    const val SPOTIFY_REDIRECT_URI = &quot;plyr://spotify/callback&quot;&#10;    &#10;    /** Permisos solicitados a Spotify */&#10;    const val SPOTIFY_SCOPES = &quot;playlist-read-private playlist-read-collaborative playlist-modify-public playlist-modify-private user-library-modify user-library-read&quot;&#10;    &#10;    // === MÉTODOS PRIVADOS ===&#10;    &#10;    /**&#10;     * Obtiene la instancia de SharedPreferences para la aplicación.&#10;     * @param context Contexto de la aplicación&#10;     * @return SharedPreferences configurado con el nombre correcto&#10;     */&#10;    private fun getPrefs(context: Context): SharedPreferences {&#10;        return context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;    }&#10;    &#10;    // === GESTIÓN DE TEMAS ===&#10;    &#10;    /**&#10;     * Establece el tema de la aplicación.&#10;     * @param context Contexto de la aplicación&#10;     * @param theme Tema a establecer (&quot;dark&quot;, &quot;light&quot;)&#10;     */&#10;    fun setTheme(context: Context, theme: String) {&#10;        getPrefs(context).edit { &#10;            putString(KEY_THEME, theme) &#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Obtiene el tema actual de la aplicación.&#10;     * @param context Contexto de la aplicación&#10;     * @return Tema actual (por defecto &quot;dark&quot;)&#10;     */&#10;    fun getTheme(context: Context): String {&#10;        return getPrefs(context).getString(KEY_THEME, DEFAULT_THEME) ?: DEFAULT_THEME&#10;    }&#10;    &#10;    // === GESTIÓN DE TOKENS DE SPOTIFY ===&#10;    &#10;    /**&#10;     * Almacena los tokens de autenticación de Spotify.&#10;     * Calcula automáticamente el tiempo de expiración basado en expiresIn.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @param accessToken Token de acceso para API calls&#10;     * @param refreshToken Token para renovar el acceso (puede ser null)&#10;     * @param expiresIn Tiempo de vida del token en segundos&#10;     */&#10;    fun setSpotifyTokens(context: Context, accessToken: String, refreshToken: String?, expiresIn: Int) {&#10;        val expiryTime = System.currentTimeMillis() + (expiresIn * 1000L)&#10;        getPrefs(context).edit { &#10;            putString(KEY_SPOTIFY_ACCESS_TOKEN, accessToken)&#10;            refreshToken?.let { putString(KEY_SPOTIFY_REFRESH_TOKEN, it) }&#10;            putLong(KEY_SPOTIFY_TOKEN_EXPIRY, expiryTime)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Obtiene el token de acceso de Spotify si es válido.&#10;     * Verifica automáticamente si el token ha expirado.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return Token de acceso válido o null si expiró o no existe&#10;     */&#10;    fun getSpotifyAccessToken(context: Context): String? {&#10;        val token = getPrefs(context).getString(KEY_SPOTIFY_ACCESS_TOKEN, null)&#10;        val expiryTime = getPrefs(context).getLong(KEY_SPOTIFY_TOKEN_EXPIRY, 0)&#10;        &#10;        // Verificar que el token no haya expirado&#10;        return if (token != null &amp;&amp; System.currentTimeMillis() &lt; expiryTime) {&#10;            token&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Obtiene el token de renovación de Spotify.&#10;     * @param context Contexto de la aplicación&#10;     * @return Token de renovación o null si no existe&#10;     */&#10;    fun getSpotifyRefreshToken(context: Context): String? {&#10;        return getPrefs(context).getString(KEY_SPOTIFY_REFRESH_TOKEN, null)&#10;    }&#10;    &#10;    /**&#10;     * Elimina todos los tokens de Spotify almacenados.&#10;     * Útil para cerrar sesión o limpiar autenticación.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     */&#10;    fun clearSpotifyTokens(context: Context) {&#10;        getPrefs(context).edit { &#10;            remove(KEY_SPOTIFY_ACCESS_TOKEN)&#10;            remove(KEY_SPOTIFY_REFRESH_TOKEN)&#10;            remove(KEY_SPOTIFY_TOKEN_EXPIRY)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Verifica si hay una conexión válida con Spotify.&#10;     * Considera válida la conexión si existe un token de acceso válido&#10;     * o un token de renovación (que puede usarse para obtener nuevos tokens).&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return true si hay conexión con Spotify, false en caso contrario&#10;     */&#10;    fun isSpotifyConnected(context: Context): Boolean {&#10;        val hasValidAccessToken = getSpotifyAccessToken(context) != null&#10;        val hasRefreshToken = getSpotifyRefreshToken(context) != null&#10;        return hasValidAccessToken || hasRefreshToken&#10;    }&#10;    &#10;    /**&#10;     * Obtiene el Client ID de Spotify configurado por el usuario.&#10;     * @param context Contexto de la aplicación&#10;     * @return Client ID del usuario o null si no está configurado&#10;     */&#10;    fun getSpotifyClientId(context: Context): String? {&#10;        return getPrefs(context).getString(KEY_SPOTIFY_CLIENT_ID, null)&#10;    }&#10;    &#10;    /**&#10;     * Obtiene el Client Secret de Spotify configurado por el usuario.&#10;     * @param context Contexto de la aplicación&#10;     * @return Client Secret del usuario o null si no está configurado&#10;     */&#10;    fun getSpotifyClientSecret(context: Context): String? {&#10;        return getPrefs(context).getString(KEY_SPOTIFY_CLIENT_SECRET, null)&#10;    }&#10;    &#10;    /**&#10;     * Establece el Client ID de Spotify del usuario.&#10;     * @param context Contexto de la aplicación&#10;     * @param clientId Client ID del usuario&#10;     */&#10;    fun setSpotifyClientId(context: Context, clientId: String) {&#10;        getPrefs(context).edit {&#10;            putString(KEY_SPOTIFY_CLIENT_ID, clientId.trim())&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Establece el Client Secret de Spotify del usuario.&#10;     * @param context Contexto de la aplicación&#10;     * @param clientSecret Client Secret del usuario&#10;     */&#10;    fun setSpotifyClientSecret(context: Context, clientSecret: String) {&#10;        getPrefs(context).edit {&#10;            putString(KEY_SPOTIFY_CLIENT_SECRET, clientSecret.trim())&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Establece las credenciales de Spotify API del usuario.&#10;     * @param context Contexto de la aplicación&#10;     * @param clientId Client ID del usuario&#10;     * @param clientSecret Client Secret del usuario&#10;     */&#10;    fun setSpotifyCredentials(context: Context, clientId: String, clientSecret: String) {&#10;        getPrefs(context).edit {&#10;            putString(KEY_SPOTIFY_CLIENT_ID, clientId.trim())&#10;            putString(KEY_SPOTIFY_CLIENT_SECRET, clientSecret.trim())&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Limpia las credenciales de Spotify del usuario.&#10;     * @param context Contexto de la aplicación&#10;     */&#10;    fun clearSpotifyCredentials(context: Context) {&#10;        getPrefs(context).edit {&#10;            remove(KEY_SPOTIFY_CLIENT_ID)&#10;            remove(KEY_SPOTIFY_CLIENT_SECRET)&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el usuario tiene credenciales de Spotify configuradas.&#10;     * @param context Contexto de la aplicación&#10;     * @return true si tiene credenciales configuradas, false en caso contrario&#10;     */&#10;    fun hasSpotifyCredentials(context: Context): Boolean {&#10;        val prefs = getPrefs(context)&#10;        val clientId = prefs.getString(KEY_SPOTIFY_CLIENT_ID, null)&#10;        val clientSecret = prefs.getString(KEY_SPOTIFY_CLIENT_SECRET, null)&#10;        return !clientId.isNullOrBlank() &amp;&amp; !clientSecret.isNullOrBlank()&#10;    }&#10;    &#10;    /**&#10;     * Verifica si Spotify está completamente configurado (credenciales + conexión).&#10;     * @param context Contexto de la aplicación&#10;     * @return true si está completamente configurado, false en caso contrario&#10;     */&#10;    fun isSpotifyFullyConfigured(context: Context): Boolean {&#10;        return hasSpotifyCredentials(context) &amp;&amp; isSpotifyConnected(context)&#10;    }&#10;    &#10;    // === GESTIÓN DE MOTOR DE BÚSQUEDA ===&#10;    &#10;    /**&#10;     * Establece el motor de búsqueda predeterminado.&#10;     * @param context Contexto de la aplicación&#10;     * @param searchEngine Motor de búsqueda a establecer (&quot;spotify&quot;, &quot;youtube&quot;)&#10;     */&#10;    fun setSearchEngine(context: Context, searchEngine: String) {&#10;        getPrefs(context).edit { &#10;            putString(KEY_SEARCH_ENGINE, searchEngine) &#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Obtiene el motor de búsqueda actual de la aplicación.&#10;     * @param context Contexto de la aplicación&#10;     * @return Motor de búsqueda actual (por defecto &quot;spotify&quot;)&#10;     */&#10;    fun getSearchEngine(context: Context): String {&#10;        return getPrefs(context).getString(KEY_SEARCH_ENGINE, DEFAULT_SEARCH_ENGINE) ?: DEFAULT_SEARCH_ENGINE&#10;    }&#10;&#10;    // === GESTIÓN DE TIMESTAMPS DE TOKENS ===&#10;&#10;    /**&#10;     * Obtiene el timestamp de cuando se guardó el token actual.&#10;     * @param context Contexto de la aplicación&#10;     * @return Timestamp en milisegundos o 0 si no existe&#10;     */&#10;    fun getSpotifyTokenTimestamp(context: Context): Long {&#10;        return getPrefs(context).getLong(KEY_SPOTIFY_TOKEN_EXPIRY, 0L) - (3600 * 1000L) // Restar la duración del token&#10;    }&#10;&#10;    /**&#10;     * Obtiene el tiempo de expiración en segundos del token actual.&#10;     * @param context Contexto de la aplicación&#10;     * @return Tiempo de expiración en segundos (por defecto 3600 = 1 hora)&#10;     */&#10;    fun getSpotifyTokenExpiresIn(context: Context): Int {&#10;        // Los tokens de Spotify duran 1 hora por defecto&#10;        return 3600&#10;    }&#10;&#10;    /**&#10;     * Elimina solo el token de acceso, manteniendo el refresh token.&#10;     * Útil para forzar renovación sin perder la capacidad de autenticación.&#10;     * @param context Contexto de la aplicación&#10;     */&#10;    fun clearSpotifyAccessToken(context: Context) {&#10;        getPrefs(context).edit {&#10;            remove(KEY_SPOTIFY_ACCESS_TOKEN)&#10;            remove(KEY_SPOTIFY_TOKEN_EXPIRY)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.plyr.utils&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import android.content.SharedPreferences&#13;&#10;import androidx.core.content.edit&#13;&#10;&#13;&#10;/**&#13;&#10; * Config - Objeto singleton para gestión de configuración de la aplicación&#13;&#10; * &#13;&#10; * Maneja:&#13;&#10; * - Configuración de temas (claro/oscuro)&#13;&#10; * - Tokens y autenticación de Spotify&#13;&#10; * - Constantes de API de Spotify&#13;&#10; * - Persistencia de preferencias usando SharedPreferences&#13;&#10; * &#13;&#10; * Todos los datos se almacenan de forma segura en SharedPreferences&#13;&#10; * y se accede a través de métodos thread-safe.&#13;&#10; */&#13;&#10;object Config {&#13;&#10;    &#13;&#10;    // === CONSTANTES PRIVADAS ===&#13;&#10;    &#13;&#10;    /** Nombre del archivo de preferencias */&#13;&#10;    private const val PREFS_NAME = &quot;plyr_config&quot;&#13;&#10;    &#13;&#10;    // Claves para SharedPreferences&#13;&#10;    private const val KEY_THEME = &quot;theme&quot;&#13;&#10;    private const val KEY_SEARCH_ENGINE = &quot;search_engine&quot;&#13;&#10;    private const val KEY_AUDIO_QUALITY = &quot;audio_quality&quot;&#13;&#10;    private const val KEY_SPOTIFY_ACCESS_TOKEN = &quot;spotify_access_token&quot;&#13;&#10;    private const val KEY_SPOTIFY_REFRESH_TOKEN = &quot;spotify_refresh_token&quot;&#13;&#10;    private const val KEY_SPOTIFY_TOKEN_EXPIRY = &quot;spotify_token_expiry&quot;&#13;&#10;    private const val KEY_SPOTIFY_CLIENT_ID = &quot;spotify_client_id&quot;&#13;&#10;    private const val KEY_SPOTIFY_CLIENT_SECRET = &quot;spotify_client_secret&quot;&#13;&#10;    &#13;&#10;    // Valores por defecto&#13;&#10;    private const val DEFAULT_THEME = &quot;dark&quot;&#13;&#10;    private const val DEFAULT_SEARCH_ENGINE = &quot;spotify&quot;&#13;&#10;    private const val DEFAULT_AUDIO_QUALITY = &quot;medium&quot;&#13;&#10;&#13;&#10;    // === CONSTANTES PÚBLICAS DE SPOTIFY ===&#13;&#10;&#13;&#10;    /** URI de redirección para OAuth de Spotify */&#13;&#10;    const val SPOTIFY_REDIRECT_URI = &quot;plyr://spotify/callback&quot;&#13;&#10;    &#13;&#10;    /** Permisos solicitados a Spotify */&#13;&#10;    const val SPOTIFY_SCOPES = &quot;playlist-read-private playlist-read-collaborative playlist-modify-public playlist-modify-private user-library-modify user-library-read&quot;&#13;&#10;    &#13;&#10;    // === CONSTANTES PÚBLICAS DE CALIDAD DE AUDIO ===&#13;&#10;    &#13;&#10;    /** Calidades de audio disponibles */&#13;&#10;    const val AUDIO_QUALITY_WORST = &quot;worst&quot;&#13;&#10;    const val AUDIO_QUALITY_MEDIUM = &quot;medium&quot;&#13;&#10;    const val AUDIO_QUALITY_BEST = &quot;best&quot;&#13;&#10;    &#13;&#10;    /** Lista de todas las calidades de audio disponibles */&#13;&#10;    val AUDIO_QUALITY_OPTIONS = listOf(&#13;&#10;        AUDIO_QUALITY_WORST,&#13;&#10;        AUDIO_QUALITY_MEDIUM,&#13;&#10;        AUDIO_QUALITY_BEST&#13;&#10;    )&#13;&#10;    &#13;&#10;    /** Descripciones amigables para cada calidad de audio */&#13;&#10;    val AUDIO_QUALITY_DESCRIPTIONS = mapOf(&#13;&#10;        AUDIO_QUALITY_WORST to &quot;Baja (Menor uso de datos)&quot;,&#13;&#10;        AUDIO_QUALITY_MEDIUM to &quot;Media (Equilibrio recomendado)&quot;,&#13;&#10;        AUDIO_QUALITY_BEST to &quot;Alta (Mejor calidad)&quot;&#13;&#10;    )&#13;&#10;    &#13;&#10;    // === MÉTODOS PRIVADOS ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Obtiene la instancia de SharedPreferences para la aplicación.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return SharedPreferences configurado con el nombre correcto&#13;&#10;     */&#13;&#10;    private fun getPrefs(context: Context): SharedPreferences {&#13;&#10;        return context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#13;&#10;    }&#13;&#10;    &#13;&#10;    // === GESTIÓN DE TEMAS ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Establece el tema de la aplicación.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @param theme Tema a establecer (&quot;dark&quot;, &quot;light&quot;)&#13;&#10;     */&#13;&#10;    fun setTheme(context: Context, theme: String) {&#13;&#10;        getPrefs(context).edit { &#13;&#10;            putString(KEY_THEME, theme) &#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Obtiene el tema actual de la aplicación.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Tema actual (por defecto &quot;dark&quot;)&#13;&#10;     */&#13;&#10;    fun getTheme(context: Context): String {&#13;&#10;        return getPrefs(context).getString(KEY_THEME, DEFAULT_THEME) ?: DEFAULT_THEME&#13;&#10;    }&#13;&#10;    &#13;&#10;    // === GESTIÓN DE TOKENS DE SPOTIFY ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Almacena los tokens de autenticación de Spotify.&#13;&#10;     * Calcula automáticamente el tiempo de expiración basado en expiresIn.&#13;&#10;     * &#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @param accessToken Token de acceso para API calls&#13;&#10;     * @param refreshToken Token para renovar el acceso (puede ser null)&#13;&#10;     * @param expiresIn Tiempo de vida del token en segundos&#13;&#10;     */&#13;&#10;    fun setSpotifyTokens(context: Context, accessToken: String, refreshToken: String?, expiresIn: Int) {&#13;&#10;        val expiryTime = System.currentTimeMillis() + (expiresIn * 1000L)&#13;&#10;        getPrefs(context).edit { &#13;&#10;            putString(KEY_SPOTIFY_ACCESS_TOKEN, accessToken)&#13;&#10;            refreshToken?.let { putString(KEY_SPOTIFY_REFRESH_TOKEN, it) }&#13;&#10;            putLong(KEY_SPOTIFY_TOKEN_EXPIRY, expiryTime)&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Obtiene el token de acceso de Spotify si es válido.&#13;&#10;     * Verifica automáticamente si el token ha expirado.&#13;&#10;     * &#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Token de acceso válido o null si expiró o no existe&#13;&#10;     */&#13;&#10;    fun getSpotifyAccessToken(context: Context): String? {&#13;&#10;        val token = getPrefs(context).getString(KEY_SPOTIFY_ACCESS_TOKEN, null)&#13;&#10;        val expiryTime = getPrefs(context).getLong(KEY_SPOTIFY_TOKEN_EXPIRY, 0)&#13;&#10;        &#13;&#10;        // Verificar que el token no haya expirado&#13;&#10;        return if (token != null &amp;&amp; System.currentTimeMillis() &lt; expiryTime) {&#13;&#10;            token&#13;&#10;        } else {&#13;&#10;            null&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Obtiene el token de renovación de Spotify.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Token de renovación o null si no existe&#13;&#10;     */&#13;&#10;    fun getSpotifyRefreshToken(context: Context): String? {&#13;&#10;        return getPrefs(context).getString(KEY_SPOTIFY_REFRESH_TOKEN, null)&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Elimina todos los tokens de Spotify almacenados.&#13;&#10;     * Útil para cerrar sesión o limpiar autenticación.&#13;&#10;     * &#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     */&#13;&#10;    fun clearSpotifyTokens(context: Context) {&#13;&#10;        getPrefs(context).edit { &#13;&#10;            remove(KEY_SPOTIFY_ACCESS_TOKEN)&#13;&#10;            remove(KEY_SPOTIFY_REFRESH_TOKEN)&#13;&#10;            remove(KEY_SPOTIFY_TOKEN_EXPIRY)&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Verifica si hay una conexión válida con Spotify.&#13;&#10;     * Considera válida la conexión si existe un token de acceso válido&#13;&#10;     * o un token de renovación (que puede usarse para obtener nuevos tokens).&#13;&#10;     * &#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return true si hay conexión con Spotify, false en caso contrario&#13;&#10;     */&#13;&#10;    fun isSpotifyConnected(context: Context): Boolean {&#13;&#10;        val hasValidAccessToken = getSpotifyAccessToken(context) != null&#13;&#10;        val hasRefreshToken = getSpotifyRefreshToken(context) != null&#13;&#10;        return hasValidAccessToken || hasRefreshToken&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Obtiene el Client ID de Spotify configurado por el usuario.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Client ID del usuario o null si no está configurado&#13;&#10;     */&#13;&#10;    fun getSpotifyClientId(context: Context): String? {&#13;&#10;        return getPrefs(context).getString(KEY_SPOTIFY_CLIENT_ID, null)&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Obtiene el Client Secret de Spotify configurado por el usuario.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Client Secret del usuario o null si no está configurado&#13;&#10;     */&#13;&#10;    fun getSpotifyClientSecret(context: Context): String? {&#13;&#10;        return getPrefs(context).getString(KEY_SPOTIFY_CLIENT_SECRET, null)&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Establece el Client ID de Spotify del usuario.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @param clientId Client ID del usuario&#13;&#10;     */&#13;&#10;    fun setSpotifyClientId(context: Context, clientId: String) {&#13;&#10;        getPrefs(context).edit {&#13;&#10;            putString(KEY_SPOTIFY_CLIENT_ID, clientId.trim())&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Establece el Client Secret de Spotify del usuario.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @param clientSecret Client Secret del usuario&#13;&#10;     */&#13;&#10;    fun setSpotifyClientSecret(context: Context, clientSecret: String) {&#13;&#10;        getPrefs(context).edit {&#13;&#10;            putString(KEY_SPOTIFY_CLIENT_SECRET, clientSecret.trim())&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Establece las credenciales de Spotify API del usuario.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @param clientId Client ID del usuario&#13;&#10;     * @param clientSecret Client Secret del usuario&#13;&#10;     */&#13;&#10;    fun setSpotifyCredentials(context: Context, clientId: String, clientSecret: String) {&#13;&#10;        getPrefs(context).edit {&#13;&#10;            putString(KEY_SPOTIFY_CLIENT_ID, clientId.trim())&#13;&#10;            putString(KEY_SPOTIFY_CLIENT_SECRET, clientSecret.trim())&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Limpia las credenciales de Spotify del usuario.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     */&#13;&#10;    fun clearSpotifyCredentials(context: Context) {&#13;&#10;        getPrefs(context).edit {&#13;&#10;            remove(KEY_SPOTIFY_CLIENT_ID)&#13;&#10;            remove(KEY_SPOTIFY_CLIENT_SECRET)&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Verifica si el usuario tiene credenciales de Spotify configuradas.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return true si tiene credenciales configuradas, false en caso contrario&#13;&#10;     */&#13;&#10;    fun hasSpotifyCredentials(context: Context): Boolean {&#13;&#10;        val prefs = getPrefs(context)&#13;&#10;        val clientId = prefs.getString(KEY_SPOTIFY_CLIENT_ID, null)&#13;&#10;        val clientSecret = prefs.getString(KEY_SPOTIFY_CLIENT_SECRET, null)&#13;&#10;        return !clientId.isNullOrBlank() &amp;&amp; !clientSecret.isNullOrBlank()&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Verifica si Spotify está completamente configurado (credenciales + conexión).&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return true si está completamente configurado, false en caso contrario&#13;&#10;     */&#13;&#10;    fun isSpotifyFullyConfigured(context: Context): Boolean {&#13;&#10;        return hasSpotifyCredentials(context) &amp;&amp; isSpotifyConnected(context)&#13;&#10;    }&#13;&#10;    &#13;&#10;    // === GESTIÓN DE MOTOR DE BÚSQUEDA ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Establece el motor de búsqueda predeterminado.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @param searchEngine Motor de búsqueda a establecer (&quot;spotify&quot;, &quot;youtube&quot;)&#13;&#10;     */&#13;&#10;    fun setSearchEngine(context: Context, searchEngine: String) {&#13;&#10;        getPrefs(context).edit { &#13;&#10;            putString(KEY_SEARCH_ENGINE, searchEngine) &#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Obtiene el motor de búsqueda actual de la aplicación.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Motor de búsqueda actual (por defecto &quot;spotify&quot;)&#13;&#10;     */&#13;&#10;    fun getSearchEngine(context: Context): String {&#13;&#10;        return getPrefs(context).getString(KEY_SEARCH_ENGINE, DEFAULT_SEARCH_ENGINE) ?: DEFAULT_SEARCH_ENGINE&#13;&#10;    }&#13;&#10;&#13;&#10;    // === GESTIÓN DE CALIDAD DE AUDIO ===&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Establece la calidad de audio predeterminada.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @param quality Calidad de audio a establecer (&quot;worst&quot;, &quot;medium&quot;, &quot;best&quot;)&#13;&#10;     */&#13;&#10;    fun setAudioQuality(context: Context, quality: String) {&#13;&#10;        getPrefs(context).edit { &#13;&#10;            putString(KEY_AUDIO_QUALITY, quality) &#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Obtiene la calidad de audio actual de la aplicación.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Calidad de audio actual (por defecto &quot;medium&quot;)&#13;&#10;     */&#13;&#10;    fun getAudioQuality(context: Context): String {&#13;&#10;        return getPrefs(context).getString(KEY_AUDIO_QUALITY, DEFAULT_AUDIO_QUALITY) ?: DEFAULT_AUDIO_QUALITY&#13;&#10;    }&#13;&#10;    &#13;&#10;    /**&#13;&#10;     * Verifica si una calidad de audio es válida.&#13;&#10;     * @param quality Calidad de audio a verificar&#13;&#10;     * @return true si es válida, false en caso contrario&#13;&#10;     */&#13;&#10;    fun isValidAudioQuality(quality: String): Boolean {&#13;&#10;        return quality in AUDIO_QUALITY_OPTIONS&#13;&#10;    }&#13;&#10;&#13;&#10;    // === GESTIÓN DE TIMESTAMPS DE TOKENS ===&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Obtiene el timestamp de cuando se guardó el token actual.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Timestamp en milisegundos o 0 si no existe&#13;&#10;     */&#13;&#10;    fun getSpotifyTokenTimestamp(context: Context): Long {&#13;&#10;        return getPrefs(context).getLong(KEY_SPOTIFY_TOKEN_EXPIRY, 0L) - (3600 * 1000L) // Restar la duración del token&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Obtiene el tiempo de expiración en segundos del token actual.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     * @return Tiempo de expiración en segundos (por defecto 3600 = 1 hora)&#13;&#10;     */&#13;&#10;    fun getSpotifyTokenExpiresIn(context: Context): Int {&#13;&#10;        // Los tokens de Spotify duran 1 hora por defecto&#13;&#10;        return 3600&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Elimina solo el token de acceso, manteniendo el refresh token.&#13;&#10;     * Útil para forzar renovación sin perder la capacidad de autenticación.&#13;&#10;     * @param context Contexto de la aplicación&#13;&#10;     */&#13;&#10;    fun clearSpotifyAccessToken(context: Context) {&#13;&#10;        getPrefs(context).edit {&#13;&#10;            remove(KEY_SPOTIFY_ACCESS_TOKEN)&#13;&#10;            remove(KEY_SPOTIFY_TOKEN_EXPIRY)&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/PlayerViewModelExtensions.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import com.plyr.database.TrackEntity&#10;import com.plyr.service.MusicNotificationManager&#10;import com.plyr.viewmodel.PlayerViewModel&#10;&#10;/**&#10; * Extensiones para integrar PlayerViewModel con notificaciones de música&#10; * &#10; * Estas extensiones facilitan el uso del sistema de notificaciones&#10; * sin modificar directamente el PlayerViewModel existente.&#10; */&#10;&#10;/**&#10; * Inicializa el manager de notificaciones&#10; */&#10;fun PlayerViewModel.initializeNotifications(context: Context): MusicNotificationManager {&#10;    return MusicNotificationManager(context).apply {&#10;        startService()&#10;    }&#10;}&#10;&#10;/**&#10; * Reproduce un track con notificación&#10; */&#10;fun PlayerViewModel.playWithNotification(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity,&#10;    onAudioUrlReady: (String) -&gt; Unit&#10;) {&#10;    // Actualizar la información del track en la notificación&#10;    notificationManager.updateSongInfo(track)&#10;    &#10;    // Tu lógica existente de reproducción aquí&#10;    // Cuando tengas la URL de audio, llamar:&#10;    // onAudioUrlReady(audioUrl)&#10;}&#10;&#10;/**&#10; * Actualiza la notificación cuando cambia el track&#10; */&#10;fun PlayerViewModel.updateNotificationTrack(&#10;    notificationManager: MusicNotificationManager,&#10;    track: TrackEntity?&#10;) {&#10;    track?.let {&#10;        notificationManager.updateSongInfo(it.name, it.artists)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/SpotifyTokenManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/SpotifyTokenManager.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;import com.plyr.network.SpotifyRepository&#10;import kotlinx.coroutines.*&#10;import java.util.concurrent.atomic.AtomicBoolean&#10;import kotlin.coroutines.resume&#10;import kotlin.coroutines.suspendCoroutine&#10;&#10;/**&#10; * SpotifyTokenManager - Gestor centralizado de tokens de Spotify&#10; * &#10; * Este manager se encarga de:&#10; * - Verificar automáticamente si los tokens han expirado&#10; * - Renovar tokens automáticamente cuando sea necesario&#10; * - Proporcionar tokens válidos para todas las llamadas a la API&#10; * - Manejar la renovación de forma thread-safe&#10; * - Evitar múltiples renovaciones simultáneas&#10; */&#10;object SpotifyTokenManager {&#10;    &#10;    private const val TAG = &quot;SpotifyTokenManager&quot;&#10;    &#10;    // Margen de seguridad: renovar 5 minutos antes de que expire&#10;    private const val EXPIRATION_BUFFER_MS = 5 * 60 * 1000L // 5 minutos&#10;    &#10;    // Control de renovación en progreso&#10;    private val isRefreshing = AtomicBoolean(false)&#10;    private var refreshDeferred: Deferred&lt;String?&gt;? = null&#10;    &#10;    /**&#10;     * Obtiene un token de acceso válido, renovándolo automáticamente si es necesario.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return Token de acceso válido o null si no se pudo obtener/renovar&#10;     */&#10;    suspend fun getValidAccessToken(context: Context): String? = withContext(Dispatchers.IO) {&#10;        try {&#10;            // 1. Verificar si tenemos un token actual válido&#10;            val currentToken = Config.getSpotifyAccessToken(context)&#10;            if (currentToken != null &amp;&amp; !isTokenExpired(context)) {&#10;                Log.d(TAG, &quot;Token actual es válido&quot;)&#10;                return@withContext currentToken&#10;            }&#10;            &#10;            // 2. El token ha expirado o no existe, necesitamos renovarlo&#10;            Log.d(TAG, &quot;Token expirado o inexistente, iniciando renovación&quot;)&#10;            return@withContext refreshTokenSafely(context)&#10;            &#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error obteniendo token válido&quot;, e)&#10;            return@withContext null&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Verifica si el token actual ha expirado o está cerca de expirar.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return true si el token ha expirado o está cerca de expirar&#10;     */&#10;    private fun isTokenExpired(context: Context): Boolean {&#10;        val tokenTimestamp = Config.getSpotifyTokenTimestamp(context)&#10;        val expiresIn = Config.getSpotifyTokenExpiresIn(context)&#10;        &#10;        if (tokenTimestamp == 0L || expiresIn == 0) {&#10;            Log.d(TAG, &quot;No hay información de expiración del token&quot;)&#10;            return true&#10;        }&#10;        &#10;        val expirationTime = tokenTimestamp + (expiresIn * 1000L)&#10;        val currentTime = System.currentTimeMillis()&#10;        val timeToExpiry = expirationTime - currentTime&#10;        &#10;        val isExpired = timeToExpiry &lt;= EXPIRATION_BUFFER_MS&#10;        &#10;        Log.d(TAG, &quot;Verificación de expiración: tiempo restante = ${timeToExpiry / 1000}s, expirado = $isExpired&quot;)&#10;        &#10;        return isExpired&#10;    }&#10;    &#10;    /**&#10;     * Renueva el token de forma thread-safe, evitando múltiples renovaciones simultáneas.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return Token renovado o null si falló&#10;     */&#10;    private suspend fun refreshTokenSafely(context: Context): String? = withContext(Dispatchers.IO) {&#10;        // Si ya hay una renovación en progreso, esperar a que termine&#10;        if (isRefreshing.get()) {&#10;            Log.d(TAG, &quot;Renovación ya en progreso, esperando...&quot;)&#10;            return@withContext refreshDeferred?.await()&#10;        }&#10;        &#10;        // Iniciar nueva renovación&#10;        if (isRefreshing.compareAndSet(false, true)) {&#10;            Log.d(TAG, &quot;Iniciando nueva renovación de token&quot;)&#10;            &#10;            refreshDeferred = async {&#10;                try {&#10;                    refreshTokenInternal(context)&#10;                } finally {&#10;                    isRefreshing.set(false)&#10;                    refreshDeferred = null&#10;                }&#10;            }&#10;            &#10;            return@withContext refreshDeferred!!.await()&#10;        } else {&#10;            // Otra corrutina ganó la carrera, esperar su resultado&#10;            return@withContext refreshDeferred?.await()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Realiza la renovación real del token.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return Token renovado o null si falló&#10;     */&#10;    private suspend fun refreshTokenInternal(context: Context): String? = suspendCoroutine { continuation -&gt;&#10;        val refreshToken = Config.getSpotifyRefreshToken(context)&#10;        &#10;        if (refreshToken == null) {&#10;            Log.e(TAG, &quot;No hay refresh token disponible&quot;)&#10;            continuation.resume(null)&#10;            return@suspendCoroutine&#10;        }&#10;        &#10;        Log.d(TAG, &quot;Enviando solicitud de renovación a Spotify...&quot;)&#10;        &#10;        SpotifyRepository.refreshAccessToken(context, refreshToken) { newAccessToken, error -&gt;&#10;            if (error != null) {&#10;                Log.e(TAG, &quot;Error renovando token: $error&quot;)&#10;                continuation.resume(null)&#10;            } else if (newAccessToken != null) {&#10;                // Guardar el nuevo token con timestamp actual&#10;                val expiresIn = 3600 // Spotify tokens duran 1 hora&#10;                Config.setSpotifyTokens(context, newAccessToken, refreshToken, expiresIn)&#10;                &#10;                Log.d(TAG, &quot;Token renovado exitosamente&quot;)&#10;                continuation.resume(newAccessToken)&#10;            } else {&#10;                Log.e(TAG, &quot;Respuesta inesperada al renovar token&quot;)&#10;                continuation.resume(null)&#10;            }&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Invalida el token actual, forzando una renovación en la próxima solicitud.&#10;     * Útil cuando sabemos que el token ha sido revocado o es inválido.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     */&#10;    fun invalidateCurrentToken(context: Context) {&#10;        Log.d(TAG, &quot;Invalidando token actual&quot;)&#10;        Config.clearSpotifyAccessToken(context)&#10;    }&#10;    &#10;    /**&#10;     * Verifica si hay credenciales de Spotify configuradas.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return true si hay refresh token disponible&#10;     */&#10;    fun hasValidCredentials(context: Context): Boolean {&#10;        return Config.getSpotifyRefreshToken(context) != null&#10;    }&#10;    &#10;    /**&#10;     * Ejecuta una operación con un token válido, manejando automáticamente la renovación.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @param operation Operación a ejecutar con el token&#10;     * @return Resultado de la operación o null si no se pudo obtener token válido&#10;     */&#10;    suspend fun &lt;T&gt; withValidToken(&#10;        context: Context, &#10;        operation: suspend (token: String) -&gt; T?&#10;    ): T? {&#10;        val token = getValidAccessToken(context)&#10;        return if (token != null) {&#10;            try {&#10;                operation(token)&#10;            } catch (e: Exception) {&#10;                Log.e(TAG, &quot;Error ejecutando operación con token&quot;, e)&#10;                null&#10;            }&#10;        } else {&#10;            Log.e(TAG, &quot;No se pudo obtener token válido para la operación&quot;)&#10;            null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/YouTubeAudioExtractor.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/plyr/utils/YouTubeAudioExtractor.kt" />
              <option name="updatedContent" value="package com.plyr.utils&#10;&#10;import android.content.Context&#10;import android.util.Log&#10;&#10;/**&#10; * YouTubeAudioExtractor - Utilidad para extraer audio de YouTube con calidad configurable&#10; * &#10; * Esta clase maneja:&#10; * - Extracción de URLs de audio de YouTube basada en la configuración de calidad&#10; * - Mapeo de calidades de audio a formatos específicos&#10; * - Optimización de streaming según las preferencias del usuario&#10; * &#10; * Las calidades se mapean de la siguiente manera:&#10; * - worst: Prioriza menor uso de datos (formatos de menor bitrate)&#10; * - medium: Equilibrio entre calidad y datos (formatos estándar)&#10; * - best: Máxima calidad disponible (formatos de mayor bitrate)&#10; */&#10;object YouTubeAudioExtractor {&#10;    &#10;    private const val TAG = &quot;YouTubeAudioExtractor&quot;&#10;    &#10;    /**&#10;     * Parámetros de calidad para yt-dlp/youtube-dl según configuración del usuario&#10;     */&#10;    private val qualityFormats = mapOf(&#10;        Config.AUDIO_QUALITY_WORST to listOf(&#10;            &quot;worstaudio[ext=m4a]&quot;,&#10;            &quot;worstaudio[ext=webm]&quot;, &#10;            &quot;worstaudio&quot;,&#10;            &quot;worst[height&lt;=360]&quot;&#10;        ),&#10;        Config.AUDIO_QUALITY_MEDIUM to listOf(&#10;            &quot;bestaudio[ext=m4a][abr&lt;=128]&quot;,&#10;            &quot;bestaudio[ext=webm][abr&lt;=128]&quot;,&#10;            &quot;bestaudio[abr&lt;=128]&quot;,&#10;            &quot;best[height&lt;=720]&quot;&#10;        ),&#10;        Config.AUDIO_QUALITY_BEST to listOf(&#10;            &quot;bestaudio[ext=m4a]&quot;,&#10;            &quot;bestaudio[ext=webm]&quot;,&#10;            &quot;bestaudio&quot;,&#10;            &quot;best&quot;&#10;        )&#10;    )&#10;    &#10;    /**&#10;     * Obtiene el formato de audio recomendado basado en la configuración actual.&#10;     * &#10;     * @param context Contexto de la aplicación para acceder a configuración&#10;     * @return String con el formato de audio para yt-dlp/youtube-dl&#10;     */&#10;    fun getAudioFormat(context: Context): String {&#10;        val currentQuality = Config.getAudioQuality(context)&#10;        val formats = qualityFormats[currentQuality] ?: qualityFormats[Config.AUDIO_QUALITY_MEDIUM]!!&#10;        &#10;        Log.d(TAG, &quot;Calidad de audio configurada: $currentQuality&quot;)&#10;        Log.d(TAG, &quot;Formatos de audio seleccionados: $formats&quot;)&#10;        &#10;        // Unir formatos con '/' para que yt-dlp pruebe en orden de preferencia&#10;        return formats.joinToString(&quot;/&quot;)&#10;    }&#10;    &#10;    /**&#10;     * Obtiene los parámetros adicionales para la extracción según calidad configurada.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return Map con parámetros adicionales para el extractor&#10;     */&#10;    fun getExtractionParams(context: Context): Map&lt;String, Any&gt; {&#10;        val currentQuality = Config.getAudioQuality(context)&#10;        &#10;        return when (currentQuality) {&#10;            Config.AUDIO_QUALITY_WORST -&gt; mapOf(&#10;                &quot;prefer_ffmpeg&quot; to true,&#10;                &quot;postprocessors&quot; to listOf(&#10;                    mapOf(&#10;                        &quot;key&quot; to &quot;FFmpegAudioConvertor&quot;,&#10;                        &quot;preferredcodec&quot; to &quot;m4a&quot;,&#10;                        &quot;preferredquality&quot; to &quot;64&quot;&#10;                    )&#10;                )&#10;            )&#10;            Config.AUDIO_QUALITY_MEDIUM -&gt; mapOf(&#10;                &quot;prefer_ffmpeg&quot; to true,&#10;                &quot;postprocessors&quot; to listOf(&#10;                    mapOf(&#10;                        &quot;key&quot; to &quot;FFmpegAudioConvertor&quot;,&#10;                        &quot;preferredcodec&quot; to &quot;m4a&quot;,&#10;                        &quot;preferredquality&quot; to &quot;128&quot;&#10;                    )&#10;                )&#10;            )&#10;            Config.AUDIO_QUALITY_BEST -&gt; mapOf(&#10;                &quot;prefer_ffmpeg&quot; to true,&#10;                &quot;postprocessors&quot; to listOf(&#10;                    mapOf(&#10;                        &quot;key&quot; to &quot;FFmpegAudioConvertor&quot;,&#10;                        &quot;preferredcodec&quot; to &quot;m4a&quot;,&#10;                        &quot;preferredquality&quot; to &quot;192&quot;&#10;                    )&#10;                )&#10;            )&#10;            else -&gt; mapOf()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Obtiene una descripción amigable de la calidad actual y su impacto.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return String descriptivo de la calidad actual&#10;     */&#10;    fun getQualityDescription(context: Context): String {&#10;        val currentQuality = Config.getAudioQuality(context)&#10;        val baseDescription = Config.AUDIO_QUALITY_DESCRIPTIONS[currentQuality] &#10;            ?: Config.AUDIO_QUALITY_DESCRIPTIONS[Config.AUDIO_QUALITY_MEDIUM]!!&#10;        &#10;        val additionalInfo = when (currentQuality) {&#10;            Config.AUDIO_QUALITY_WORST -&gt; &quot; • Bitrate: ~64 kbps • Uso de datos mínimo&quot;&#10;            Config.AUDIO_QUALITY_MEDIUM -&gt; &quot; • Bitrate: ~128 kbps • Buena calidad y uso moderado de datos&quot;&#10;            Config.AUDIO_QUALITY_BEST -&gt; &quot; • Bitrate: ~192+ kbps • Máxima calidad disponible&quot;&#10;            else -&gt; &quot;&quot;&#10;        }&#10;        &#10;        return &quot;$baseDescription$additionalInfo&quot;&#10;    }&#10;    &#10;    /**&#10;     * Estima el uso de datos por minuto de audio según la calidad configurada.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @return Uso estimado de datos en MB por minuto&#10;     */&#10;    fun getEstimatedDataUsagePerMinute(context: Context): Double {&#10;        val currentQuality = Config.getAudioQuality(context)&#10;        &#10;        return when (currentQuality) {&#10;            Config.AUDIO_QUALITY_WORST -&gt; 0.48   // ~64 kbps = 0.48 MB/min&#10;            Config.AUDIO_QUALITY_MEDIUM -&gt; 0.96  // ~128 kbps = 0.96 MB/min&#10;            Config.AUDIO_QUALITY_BEST -&gt; 1.44    // ~192 kbps = 1.44 MB/min&#10;            else -&gt; 0.96&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * Genera el comando completo para yt-dlp basado en la configuración actual.&#10;     * &#10;     * @param context Contexto de la aplicación&#10;     * @param videoUrl URL del video de YouTube&#10;     * @return Lista de argumentos para yt-dlp&#10;     */&#10;    fun generateYtDlpCommand(context: Context, videoUrl: String): List&lt;String&gt; {&#10;        val audioFormat = getAudioFormat(context)&#10;        val currentQuality = Config.getAudioQuality(context)&#10;        &#10;        val baseCommand = mutableListOf(&#10;            &quot;yt-dlp&quot;,&#10;            &quot;--extract-flat&quot;, &quot;false&quot;,&#10;            &quot;--format&quot;, audioFormat,&#10;            &quot;--no-playlist&quot;,&#10;            &quot;--get-url&quot;&#10;        )&#10;        &#10;        // Añadir parámetros específicos según calidad&#10;        when (currentQuality) {&#10;            Config.AUDIO_QUALITY_WORST -&gt; {&#10;                baseCommand.addAll(listOf(&#10;                    &quot;--audio-quality&quot;, &quot;3&quot;,  // Calidad baja&#10;                    &quot;--prefer-ffmpeg&quot;&#10;                ))&#10;            }&#10;            Config.AUDIO_QUALITY_MEDIUM -&gt; {&#10;                baseCommand.addAll(listOf(&#10;                    &quot;--audio-quality&quot;, &quot;5&quot;,  // Calidad media&#10;                    &quot;--prefer-ffmpeg&quot;&#10;                ))&#10;            }&#10;            Config.AUDIO_QUALITY_BEST -&gt; {&#10;                baseCommand.addAll(listOf(&#10;                    &quot;--audio-quality&quot;, &quot;0&quot;,  // Mejor calidad&#10;                    &quot;--prefer-ffmpeg&quot;&#10;                ))&#10;            }&#10;        }&#10;        &#10;        baseCommand.add(videoUrl)&#10;        &#10;        Log.d(TAG, &quot;Comando yt-dlp generado: ${baseCommand.joinToString(&quot; &quot;)}&quot;)&#10;        return baseCommand&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>